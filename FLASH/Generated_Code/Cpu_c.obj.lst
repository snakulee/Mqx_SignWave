   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"Cpu.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	SR_reg,1,1
  18              		.global	SR_lock
  19              		.section	.bss.SR_lock,"aw",%nobits
  22              	SR_lock:
  23 0000 00       		.space	1
  24              		.section	.text.Cpu_INT_NMIInterrupt,"ax",%progbits
  25              		.align	2
  26              		.global	Cpu_INT_NMIInterrupt
  27              		.code	16
  28              		.thumb_func
  30              	Cpu_INT_NMIInterrupt:
  31              	.LFB0:
  32              		.file 1 "../Generated_Code/Cpu.c"
   1:../Generated_Code/Cpu.c **** /** ###################################################################
   2:../Generated_Code/Cpu.c **** **     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
   3:../Generated_Code/Cpu.c **** **     Filename    : Cpu.c
   4:../Generated_Code/Cpu.c **** **     Project     : ProcessorExpert
   5:../Generated_Code/Cpu.c **** **     Processor   : MKL25Z128VLK4
   6:../Generated_Code/Cpu.c **** **     Component   : MKL25Z128LK4
   7:../Generated_Code/Cpu.c **** **     Version     : Component 01.025, Driver 01.04, CPU db: 3.00.000
   8:../Generated_Code/Cpu.c **** **     Datasheet   : KL25P80M48SF0RM, Rev.3, Sep 2012
   9:../Generated_Code/Cpu.c **** **     Compiler    : GNU C Compiler
  10:../Generated_Code/Cpu.c **** **     Date/Time   : 2013-02-22, 19:12, # CodeGen: 21
  11:../Generated_Code/Cpu.c **** **     Abstract    :
  12:../Generated_Code/Cpu.c **** **
  13:../Generated_Code/Cpu.c **** **     Settings    :
  14:../Generated_Code/Cpu.c **** **
  15:../Generated_Code/Cpu.c **** **     Contents    :
  16:../Generated_Code/Cpu.c **** **         No public methods
  17:../Generated_Code/Cpu.c **** **
  18:../Generated_Code/Cpu.c **** **     Copyright : 1997 - 2012 Freescale, Inc. All Rights Reserved.
  19:../Generated_Code/Cpu.c **** **     
  20:../Generated_Code/Cpu.c **** **     http      : www.freescale.com
  21:../Generated_Code/Cpu.c **** **     mail      : support@freescale.com
  22:../Generated_Code/Cpu.c **** ** ###################################################################*/
  23:../Generated_Code/Cpu.c **** 
  24:../Generated_Code/Cpu.c **** /* MODULE Cpu. */
  25:../Generated_Code/Cpu.c **** #include "MQX1.h"
  26:../Generated_Code/Cpu.c **** #include "SystemTimer1.h"
  27:../Generated_Code/Cpu.c **** #include "Console.h"
  28:../Generated_Code/Cpu.c **** #include "IO1.h"
  29:../Generated_Code/Cpu.c **** #include "DrvPwmTimerRG.h"
  30:../Generated_Code/Cpu.c **** #include "DrvPwmTimerB.h"
  31:../Generated_Code/Cpu.c **** #include "DrvI2c0.h"
  32:../Generated_Code/Cpu.c **** #include "DrvI2c1.h"
  33:../Generated_Code/Cpu.c **** #include "DrvDac2V.h"
  34:../Generated_Code/Cpu.c **** #include "PE_Types.h"
  35:../Generated_Code/Cpu.c **** #include "PE_Error.h"
  36:../Generated_Code/Cpu.c **** #include "PE_Const.h"
  37:../Generated_Code/Cpu.c **** #include "IO_Map.h"
  38:../Generated_Code/Cpu.c **** #include "Events.h"
  39:../Generated_Code/Cpu.c **** #include "mqx_tasks.h"
  40:../Generated_Code/Cpu.c **** #include "Cpu.h"
  41:../Generated_Code/Cpu.c **** 
  42:../Generated_Code/Cpu.c **** /* Global variables */
  43:../Generated_Code/Cpu.c **** volatile uint8_t SR_reg;               /* Current value of the FAULTMASK register */
  44:../Generated_Code/Cpu.c **** volatile uint8_t SR_lock = 0x00U;      /* Lock */
  45:../Generated_Code/Cpu.c **** 
  46:../Generated_Code/Cpu.c **** 
  47:../Generated_Code/Cpu.c **** /*
  48:../Generated_Code/Cpu.c **** ** ===================================================================
  49:../Generated_Code/Cpu.c **** **     Method      :  Cpu_INT_NMIInterrupt (component MKL25Z128LK4)
  50:../Generated_Code/Cpu.c **** **
  51:../Generated_Code/Cpu.c **** **     Description :
  52:../Generated_Code/Cpu.c **** **         This ISR services the Non Maskable Interrupt interrupt.
  53:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  54:../Generated_Code/Cpu.c **** ** ===================================================================
  55:../Generated_Code/Cpu.c **** */
  56:../Generated_Code/Cpu.c **** void Cpu_INT_NMIInterrupt(void)
  57:../Generated_Code/Cpu.c **** {
  33              		.loc 1 57 0
  34              		.cfi_startproc
  35 0000 80B5     		push	{r7, lr}
  36              	.LCFI0:
  37              		.cfi_def_cfa_offset 8
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 00AF     		add	r7, sp, #0
  41              	.LCFI1:
  42              		.cfi_def_cfa_register 7
  58:../Generated_Code/Cpu.c ****   Cpu_OnNMIINT();
  43              		.loc 1 58 0
  44 0004 FFF7FEFF 		bl	Cpu_OnNMIINT
  59:../Generated_Code/Cpu.c **** }
  45              		.loc 1 59 0
  46 0008 BD46     		mov	sp, r7
  47              		@ sp needed for prologue
  48 000a 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE0:
  52              		.section	.text.Cpu_Interrupt,"ax",%progbits
  53              		.align	2
  54              		.global	Cpu_Interrupt
  55              		.code	16
  56              		.thumb_func
  58              	Cpu_Interrupt:
  59              	.LFB1:
  60:../Generated_Code/Cpu.c **** 
  61:../Generated_Code/Cpu.c **** /*
  62:../Generated_Code/Cpu.c **** ** ===================================================================
  63:../Generated_Code/Cpu.c **** **     Method      :  Cpu_Cpu_Interrupt (component MKL25Z128LK4)
  64:../Generated_Code/Cpu.c **** **
  65:../Generated_Code/Cpu.c **** **     Description :
  66:../Generated_Code/Cpu.c **** **         This ISR services an unused interrupt/exception vector.
  67:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
  68:../Generated_Code/Cpu.c **** ** ===================================================================
  69:../Generated_Code/Cpu.c **** */
  70:../Generated_Code/Cpu.c **** PE_ISR(Cpu_Interrupt)
  71:../Generated_Code/Cpu.c **** {
  60              		.loc 1 71 0
  61              		.cfi_startproc
  62 0000 80B5     		push	{r7, lr}
  63              	.LCFI2:
  64              		.cfi_def_cfa_offset 8
  65              		.cfi_offset 7, -8
  66              		.cfi_offset 14, -4
  67 0002 00AF     		add	r7, sp, #0
  68              	.LCFI3:
  69              		.cfi_def_cfa_register 7
  72:../Generated_Code/Cpu.c ****   /* This code can be changed using the CPU component property "Build Options / Unhandled int code"
  73:../Generated_Code/Cpu.c ****   PE_DEBUGHALT();
  70              		.loc 1 73 0
  71              	@ 73 "../Generated_Code/Cpu.c" 1
  72 0004 FFBE     		BKPT 255
  73              	@ 0 "" 2
  74:../Generated_Code/Cpu.c **** }
  74              		.loc 1 74 0
  75              		.code	16
  76 0006 BD46     		mov	sp, r7
  77              		@ sp needed for prologue
  78 0008 80BD     		pop	{r7, pc}
  79              		.cfi_endproc
  80              	.LFE1:
  82 000a C046     		.section	.text.__init_hardware,"ax",%progbits
  83              		.align	2
  84              		.global	__init_hardware
  85              		.code	16
  86              		.thumb_func
  88              	__init_hardware:
  89              	.LFB2:
  75:../Generated_Code/Cpu.c **** 
  76:../Generated_Code/Cpu.c **** 
  77:../Generated_Code/Cpu.c **** /*** !!! Here you can place your own code using property "User data declarations" on the build opti
  78:../Generated_Code/Cpu.c **** 
  79:../Generated_Code/Cpu.c **** /*lint -esym(765,__init_hardware) Disable MISRA rule (8.10) checking for symbols (__init_hardware).
  80:../Generated_Code/Cpu.c **** /*lint -esym(765,Cpu_Interrupt) Disable MISRA rule (8.10) checking for symbols (Cpu_Interrupt). */
  81:../Generated_Code/Cpu.c **** void __init_hardware(void)
  82:../Generated_Code/Cpu.c **** {
  90              		.loc 1 82 0
  91              		.cfi_startproc
  92 0000 80B5     		push	{r7, lr}
  93              	.LCFI4:
  94              		.cfi_def_cfa_offset 8
  95              		.cfi_offset 7, -8
  96              		.cfi_offset 14, -4
  97 0002 00AF     		add	r7, sp, #0
  98              	.LCFI5:
  99              		.cfi_def_cfa_register 7
  83:../Generated_Code/Cpu.c **** 
  84:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code before PE initialization using property "User code befo
  85:../Generated_Code/Cpu.c **** 
  86:../Generated_Code/Cpu.c ****   /*** ### MKL25Z128VLK4 "Cpu" init code ... ***/
  87:../Generated_Code/Cpu.c ****   /*** PE initialization code after reset ***/
  88:../Generated_Code/Cpu.c ****   SCB_VTOR = (uint32_t)(&__vect_table); /* Set the interrupt vector table position */
 100              		.loc 1 88 0
 101 0004 4F4A     		ldr	r2, .L9
 102 0006 5049     		ldr	r1, .L9+4
 103 0008 504B     		ldr	r3, .L9+8
 104 000a D150     		str	r1, [r2, r3]
  89:../Generated_Code/Cpu.c ****   /* Disable the WDOG module */
  90:../Generated_Code/Cpu.c ****   /* SIM_COPC: ??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0
  91:../Generated_Code/Cpu.c ****   SIM_COPC = 0x00U;                                                   
 105              		.loc 1 91 0
 106 000c 504A     		ldr	r2, .L9+12
 107 000e 8823     		mov	r3, #136
 108 0010 5B01     		lsl	r3, r3, #5
 109 0012 0021     		mov	r1, #0
 110 0014 D150     		str	r1, [r2, r3]
  92:../Generated_Code/Cpu.c ****   /* System clock initialization */
  93:../Generated_Code/Cpu.c ****   /* SIM_SCGC5: PORTE=1,PORTD=1,PORTC=1,PORTB=1,PORTA=1 */
  94:../Generated_Code/Cpu.c ****   SIM_SCGC5 |= SIM_SCGC5_PORTE_MASK |
 111              		.loc 1 94 0
 112 0016 4E4A     		ldr	r2, .L9+12
 113 0018 4D49     		ldr	r1, .L9+12
 114 001a 4E4B     		ldr	r3, .L9+16
 115 001c CB58     		ldr	r3, [r1, r3]
 116 001e F821     		mov	r1, #248
 117 0020 8901     		lsl	r1, r1, #6
 118 0022 1943     		orr	r1, r3
 119 0024 4B4B     		ldr	r3, .L9+16
 120 0026 D150     		str	r1, [r2, r3]
  95:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTD_MASK |
  96:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTC_MASK |
  97:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTB_MASK |
  98:../Generated_Code/Cpu.c ****                SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
  99:../Generated_Code/Cpu.c ****   /* SIM_CLKDIV1: OUTDIV1=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,?
 100:../Generated_Code/Cpu.c ****   SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x01) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescaler
 121              		.loc 1 100 0
 122 0028 494A     		ldr	r2, .L9+12
 123 002a 4B4B     		ldr	r3, .L9+20
 124 002c 4B49     		ldr	r1, .L9+24
 125 002e D150     		str	r1, [r2, r3]
 101:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: PLLFLLSEL=1 */
 102:../Generated_Code/Cpu.c ****   SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK; /* Select PLL as a clock source for various peripherals */
 126              		.loc 1 102 0
 127 0030 474A     		ldr	r2, .L9+12
 128 0032 4749     		ldr	r1, .L9+12
 129 0034 4A4B     		ldr	r3, .L9+28
 130 0036 CB58     		ldr	r3, [r1, r3]
 131 0038 8021     		mov	r1, #128
 132 003a 4902     		lsl	r1, r1, #9
 133 003c 1943     		orr	r1, r3
 134 003e 484B     		ldr	r3, .L9+28
 135 0040 D150     		str	r1, [r2, r3]
 103:../Generated_Code/Cpu.c ****   /* SIM_SOPT1: OSC32KSEL=3 */
 104:../Generated_Code/Cpu.c ****   SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x03); /* LPO 1kHz oscillator drives 32 kHz clock for various pe
 136              		.loc 1 104 0
 137 0042 434B     		ldr	r3, .L9+12
 138 0044 424A     		ldr	r2, .L9+12
 139 0046 1268     		ldr	r2, [r2]
 140 0048 C021     		mov	r1, #192
 141 004a 0903     		lsl	r1, r1, #12
 142 004c 0A43     		orr	r2, r1
 143 004e 1A60     		str	r2, [r3]
 105:../Generated_Code/Cpu.c ****   /* SIM_SOPT2: TPMSRC=1 */
 106:../Generated_Code/Cpu.c ****   SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
 144              		.loc 1 106 0
 145 0050 3F4A     		ldr	r2, .L9+12
 146 0052 3F49     		ldr	r1, .L9+12
 147 0054 424B     		ldr	r3, .L9+28
 148 0056 C958     		ldr	r1, [r1, r3]
 149 0058 424B     		ldr	r3, .L9+32
 150 005a 0B40     		and	r3, r1
 151 005c 8021     		mov	r1, #128
 152 005e 4904     		lsl	r1, r1, #17
 153 0060 1943     		orr	r1, r3
 154 0062 3F4B     		ldr	r3, .L9+28
 155 0064 D150     		str	r1, [r2, r3]
 107:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x02)
 108:../Generated_Code/Cpu.c ****               )) | (uint32_t)(
 109:../Generated_Code/Cpu.c ****                SIM_SOPT2_TPMSRC(0x01)
 110:../Generated_Code/Cpu.c ****               ));                      /* Set the TPM clock */
 111:../Generated_Code/Cpu.c ****   /* PORTA_PCR18: ISF=0,MUX=0 */
 112:../Generated_Code/Cpu.c ****   PORTA_PCR18 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 156              		.loc 1 112 0
 157 0066 404B     		ldr	r3, .L9+36
 158 0068 3F4A     		ldr	r2, .L9+36
 159 006a 916C     		ldr	r1, [r2, #72]
 160 006c 3F4A     		ldr	r2, .L9+40
 161 006e 0A40     		and	r2, r1
 162 0070 9A64     		str	r2, [r3, #72]
 113:../Generated_Code/Cpu.c ****   /* PORTA_PCR19: ISF=0,MUX=0 */
 114:../Generated_Code/Cpu.c ****   PORTA_PCR19 &= (uint32_t)~(uint32_t)((PORT_PCR_ISF_MASK | PORT_PCR_MUX(0x07)));                  
 163              		.loc 1 114 0
 164 0072 3D4B     		ldr	r3, .L9+36
 165 0074 3C4A     		ldr	r2, .L9+36
 166 0076 D16C     		ldr	r1, [r2, #76]
 167 0078 3C4A     		ldr	r2, .L9+40
 168 007a 0A40     		and	r2, r1
 169 007c DA64     		str	r2, [r3, #76]
 115:../Generated_Code/Cpu.c ****   /* Switch to FBE Mode */
 116:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
 117:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);                                             
 170              		.loc 1 117 0
 171 007e 3C4B     		ldr	r3, .L9+44
 172 0080 2422     		mov	r2, #36
 173 0082 5A70     		strb	r2, [r3, #1]
 118:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 119:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;                                                   
 174              		.loc 1 119 0
 175 0084 3B4B     		ldr	r3, .L9+48
 176 0086 8022     		mov	r2, #128
 177 0088 1A70     		strb	r2, [r3]
 120:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 121:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                         
 178              		.loc 1 121 0
 179 008a 394B     		ldr	r3, .L9+44
 180 008c 9A22     		mov	r2, #154
 181 008e 1A70     		strb	r2, [r3]
 122:../Generated_Code/Cpu.c ****   /* MCG_C4: DMX32=0,DRST_DRS=0 */
 123:../Generated_Code/Cpu.c ****   MCG_C4 &= (uint8_t)~(uint8_t)((MCG_C4_DMX32_MASK | MCG_C4_DRST_DRS(0x03)));                      
 182              		.loc 1 123 0
 183 0090 374B     		ldr	r3, .L9+44
 184 0092 374A     		ldr	r2, .L9+44
 185 0094 D278     		ldrb	r2, [r2, #3]
 186 0096 D1B2     		uxtb	r1, r2
 187 0098 1F22     		mov	r2, #31
 188 009a 0A40     		and	r2, r1
 189 009c D2B2     		uxtb	r2, r2
 190 009e DA70     		strb	r2, [r3, #3]
 124:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
 125:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x01);                                                   
 191              		.loc 1 125 0
 192 00a0 334B     		ldr	r3, .L9+44
 193 00a2 0122     		mov	r2, #1
 194 00a4 1A71     		strb	r2, [r3, #4]
 126:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
 127:../Generated_Code/Cpu.c ****   MCG_C6 = 0x00U;                                                   
 195              		.loc 1 127 0
 196 00a6 324B     		ldr	r3, .L9+44
 197 00a8 0022     		mov	r2, #0
 198 00aa 5A71     		strb	r2, [r3, #5]
 128:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_IREFST_MASK) != 0x00U) { /* Check that the source of the FLL reference clock
 199              		.loc 1 128 0
 200 00ac C046     		mov	r8, r8
 201              	.L4:
 202              		.loc 1 128 0 is_stmt 0
 203 00ae 304B     		ldr	r3, .L9+44
 204 00b0 9B79     		ldrb	r3, [r3, #6]
 205 00b2 DBB2     		uxtb	r3, r3
 206 00b4 1A1C     		mov	r2, r3
 207 00b6 1023     		mov	r3, #16
 208 00b8 1340     		and	r3, r2
 209 00ba F8D1     		bne	.L4
 129:../Generated_Code/Cpu.c ****   }
 130:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 210              		.loc 1 130 0 is_stmt 1
 211 00bc C046     		mov	r8, r8
 212              	.L5:
 213              		.loc 1 130 0 is_stmt 0
 214 00be 2C4B     		ldr	r3, .L9+44
 215 00c0 9B79     		ldrb	r3, [r3, #6]
 216 00c2 DBB2     		uxtb	r3, r3
 217 00c4 1A1C     		mov	r2, r3
 218 00c6 0C23     		mov	r3, #12
 219 00c8 1340     		and	r3, r2
 220 00ca 082B     		cmp	r3, #8
 221 00cc F7D1     		bne	.L5
 131:../Generated_Code/Cpu.c ****   }
 132:../Generated_Code/Cpu.c ****   /* Switch to PBE Mode */
 133:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 134:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;                                                   
 222              		.loc 1 134 0 is_stmt 1
 223 00ce 294B     		ldr	r3, .L9+48
 224 00d0 8022     		mov	r2, #128
 225 00d2 1A70     		strb	r2, [r3]
 135:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=2,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 136:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_CLKS(0x02) | MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                         
 226              		.loc 1 136 0
 227 00d4 264B     		ldr	r3, .L9+44
 228 00d6 9A22     		mov	r2, #154
 229 00d8 1A70     		strb	r2, [r3]
 137:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
 138:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);                                             
 230              		.loc 1 138 0
 231 00da 254B     		ldr	r3, .L9+44
 232 00dc 2422     		mov	r2, #36
 233 00de 5A70     		strb	r2, [r3, #1]
 139:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
 140:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x01);                                                   
 234              		.loc 1 140 0
 235 00e0 234B     		ldr	r3, .L9+44
 236 00e2 0122     		mov	r2, #1
 237 00e4 1A71     		strb	r2, [r3, #4]
 141:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
 142:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_PLLS_MASK;                                                   
 238              		.loc 1 142 0
 239 00e6 224B     		ldr	r3, .L9+44
 240 00e8 4022     		mov	r2, #64
 241 00ea 5A71     		strb	r2, [r3, #5]
 143:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x08U) {    /* Wait until external reference clock is selected as MCG ou
 242              		.loc 1 143 0
 243 00ec C046     		mov	r8, r8
 244              	.L6:
 245              		.loc 1 143 0 is_stmt 0
 246 00ee 204B     		ldr	r3, .L9+44
 247 00f0 9B79     		ldrb	r3, [r3, #6]
 248 00f2 DBB2     		uxtb	r3, r3
 249 00f4 1A1C     		mov	r2, r3
 250 00f6 0C23     		mov	r3, #12
 251 00f8 1340     		and	r3, r2
 252 00fa 082B     		cmp	r3, #8
 253 00fc F7D1     		bne	.L6
 144:../Generated_Code/Cpu.c ****   }
 145:../Generated_Code/Cpu.c ****   while((MCG_S & MCG_S_LOCK0_MASK) == 0x00U) { /* Wait until locked */
 254              		.loc 1 145 0 is_stmt 1
 255 00fe C046     		mov	r8, r8
 256              	.L7:
 257              		.loc 1 145 0 is_stmt 0
 258 0100 1B4B     		ldr	r3, .L9+44
 259 0102 9B79     		ldrb	r3, [r3, #6]
 260 0104 DBB2     		uxtb	r3, r3
 261 0106 1A1C     		mov	r2, r3
 262 0108 4023     		mov	r3, #64
 263 010a 1340     		and	r3, r2
 264 010c F8D0     		beq	.L7
 146:../Generated_Code/Cpu.c ****   }
 147:../Generated_Code/Cpu.c ****   /* Switch to PEE Mode */
 148:../Generated_Code/Cpu.c ****   /* OSC0_CR: ERCLKEN=1,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
 149:../Generated_Code/Cpu.c ****   OSC0_CR = OSC_CR_ERCLKEN_MASK;                                                   
 265              		.loc 1 149 0 is_stmt 1
 266 010e 194B     		ldr	r3, .L9+48
 267 0110 8022     		mov	r2, #128
 268 0112 1A70     		strb	r2, [r3]
 150:../Generated_Code/Cpu.c ****   /* MCG_C1: CLKS=0,FRDIV=3,IREFS=0,IRCLKEN=1,IREFSTEN=0 */
 151:../Generated_Code/Cpu.c ****   MCG_C1 = (MCG_C1_FRDIV(0x03) | MCG_C1_IRCLKEN_MASK);                                             
 269              		.loc 1 151 0
 270 0114 164B     		ldr	r3, .L9+44
 271 0116 1A22     		mov	r2, #26
 272 0118 1A70     		strb	r2, [r3]
 152:../Generated_Code/Cpu.c ****   /* MCG_C2: LOCRE0=0,??=0,RANGE0=2,HGO0=0,EREFS0=1,LP=0,IRCS=0 */
 153:../Generated_Code/Cpu.c ****   MCG_C2 = (MCG_C2_RANGE0(0x02) | MCG_C2_EREFS0_MASK);                                             
 273              		.loc 1 153 0
 274 011a 154B     		ldr	r3, .L9+44
 275 011c 2422     		mov	r2, #36
 276 011e 5A70     		strb	r2, [r3, #1]
 154:../Generated_Code/Cpu.c ****   /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=1 */
 155:../Generated_Code/Cpu.c ****   MCG_C5 = MCG_C5_PRDIV0(0x01);                                                   
 277              		.loc 1 155 0
 278 0120 134B     		ldr	r3, .L9+44
 279 0122 0122     		mov	r2, #1
 280 0124 1A71     		strb	r2, [r3, #4]
 156:../Generated_Code/Cpu.c ****   /* MCG_C6: LOLIE0=0,PLLS=1,CME0=0,VDIV0=0 */
 157:../Generated_Code/Cpu.c ****   MCG_C6 = MCG_C6_PLLS_MASK;                                                   
 281              		.loc 1 157 0
 282 0126 124B     		ldr	r3, .L9+44
 283 0128 4022     		mov	r2, #64
 284 012a 5A71     		strb	r2, [r3, #5]
 158:../Generated_Code/Cpu.c ****   while((MCG_S & 0x0CU) != 0x0CU) {    /* Wait until output of the PLL is selected */
 285              		.loc 1 158 0
 286 012c C046     		mov	r8, r8
 287              	.L8:
 288              		.loc 1 158 0 is_stmt 0
 289 012e 104B     		ldr	r3, .L9+44
 290 0130 9B79     		ldrb	r3, [r3, #6]
 291 0132 DBB2     		uxtb	r3, r3
 292 0134 1A1C     		mov	r2, r3
 293 0136 0C23     		mov	r3, #12
 294 0138 1340     		and	r3, r2
 295 013a 0C2B     		cmp	r3, #12
 296 013c F7D1     		bne	.L8
 159:../Generated_Code/Cpu.c ****   }
 160:../Generated_Code/Cpu.c ****   /*** End of PE initialization code after reset ***/
 161:../Generated_Code/Cpu.c **** 
 162:../Generated_Code/Cpu.c ****   /*** !!! Here you can place your own code after PE initialization using property "User code after
 163:../Generated_Code/Cpu.c **** 
 164:../Generated_Code/Cpu.c **** }
 297              		.loc 1 164 0 is_stmt 1
 298 013e BD46     		mov	sp, r7
 299              		@ sp needed for prologue
 300 0140 80BD     		pop	{r7, pc}
 301              	.L10:
 302 0142 C046     		.align	2
 303              	.L9:
 304 0144 00E000E0 		.word	-536813568
 305 0148 00000000 		.word	__vect_table
 306 014c 080D0000 		.word	3336
 307 0150 00700440 		.word	1074032640
 308 0154 38100000 		.word	4152
 309 0158 44100000 		.word	4164
 310 015c 00000110 		.word	268500992
 311 0160 04100000 		.word	4100
 312 0164 FFFFFFFC 		.word	-50331649
 313 0168 00900440 		.word	1074040832
 314 016c FFF8FFFE 		.word	-16779009
 315 0170 00400640 		.word	1074151424
 316 0174 00500640 		.word	1074155520
 317              		.cfi_endproc
 318              	.LFE2:
 320              		.section	.text.PE_low_level_init,"ax",%progbits
 321              		.align	2
 322              		.global	PE_low_level_init
 323              		.code	16
 324              		.thumb_func
 326              	PE_low_level_init:
 327              	.LFB3:
 165:../Generated_Code/Cpu.c **** 
 166:../Generated_Code/Cpu.c **** 
 167:../Generated_Code/Cpu.c **** 
 168:../Generated_Code/Cpu.c **** /*
 169:../Generated_Code/Cpu.c **** ** ===================================================================
 170:../Generated_Code/Cpu.c **** **     Method      :  PE_low_level_init (component MKL25Z128LK4)
 171:../Generated_Code/Cpu.c **** **
 172:../Generated_Code/Cpu.c **** **     Description :
 173:../Generated_Code/Cpu.c **** **         Initializes beans and provides common register initialization. 
 174:../Generated_Code/Cpu.c **** **         The method is called automatically as a part of the 
 175:../Generated_Code/Cpu.c **** **         application initialization code.
 176:../Generated_Code/Cpu.c **** **         This method is internal. It is used by Processor Expert only.
 177:../Generated_Code/Cpu.c **** ** ===================================================================
 178:../Generated_Code/Cpu.c **** */
 179:../Generated_Code/Cpu.c **** void PE_low_level_init(void)
 180:../Generated_Code/Cpu.c **** {
 328              		.loc 1 180 0
 329              		.cfi_startproc
 330 0000 80B5     		push	{r7, lr}
 331              	.LCFI6:
 332              		.cfi_def_cfa_offset 8
 333              		.cfi_offset 7, -8
 334              		.cfi_offset 14, -4
 335 0002 00AF     		add	r7, sp, #0
 336              	.LCFI7:
 337              		.cfi_def_cfa_register 7
 181:../Generated_Code/Cpu.c ****   #ifdef PEX_RTOS_INIT
 182:../Generated_Code/Cpu.c ****     PEX_RTOS_INIT();                   /* Initialization of the selected RTOS. Macro is defined by 
 338              		.loc 1 182 0
 339 0004 304B     		ldr	r3, .L14
 340 0006 181C     		mov	r0, r3
 341 0008 FFF7FEFF 		bl	_mqxlite_init
 342 000c 031C     		mov	r3, r0
 343 000e 002B     		cmp	r3, #0
 344 0010 00D0     		beq	.L12
 345              	.L13:
 346              		.loc 1 182 0 is_stmt 0
 347 0012 FEE7     		b	.L13
 348              	.L12:
 183:../Generated_Code/Cpu.c ****   #endif
 184:../Generated_Code/Cpu.c ****   /* {MQXLite RTOS Adapter} Set new interrupt vector (function handler and ISR parameter) */
 185:../Generated_Code/Cpu.c ****       /* Initialization of the SIM module */
 186:../Generated_Code/Cpu.c ****   /* PORTA_PCR4: ISF=0,MUX=7 */
 187:../Generated_Code/Cpu.c ****   PORTA_PCR4 = (uint32_t)((PORTA_PCR4 & (uint32_t)~(uint32_t)(
 349              		.loc 1 187 0 is_stmt 1
 350 0014 2D4B     		ldr	r3, .L14+4
 351 0016 2D4A     		ldr	r2, .L14+4
 352 0018 1169     		ldr	r1, [r2, #16]
 353 001a 2D4A     		ldr	r2, .L14+8
 354 001c 0A40     		and	r2, r1
 355 001e E021     		mov	r1, #224
 356 0020 C900     		lsl	r1, r1, #3
 357 0022 0A43     		orr	r2, r1
 358 0024 1A61     		str	r2, [r3, #16]
 188:../Generated_Code/Cpu.c ****                 PORT_PCR_ISF_MASK
 189:../Generated_Code/Cpu.c ****                )) | (uint32_t)(
 190:../Generated_Code/Cpu.c ****                 PORT_PCR_MUX(0x07)
 191:../Generated_Code/Cpu.c ****                ));                                                  
 192:../Generated_Code/Cpu.c ****         /* Initialization of the RCM module */
 193:../Generated_Code/Cpu.c ****   /* RCM_RPFW: RSTFLTSEL=0 */
 194:../Generated_Code/Cpu.c ****   RCM_RPFW &= (uint8_t)~(uint8_t)(RCM_RPFW_RSTFLTSEL(0x1F));                                       
 359              		.loc 1 194 0
 360 0026 2B4B     		ldr	r3, .L14+12
 361 0028 2A4A     		ldr	r2, .L14+12
 362 002a 5279     		ldrb	r2, [r2, #5]
 363 002c D2B2     		uxtb	r2, r2
 364 002e 1F21     		mov	r1, #31
 365 0030 8A43     		bic	r2, r1
 366 0032 D2B2     		uxtb	r2, r2
 367 0034 5A71     		strb	r2, [r3, #5]
 195:../Generated_Code/Cpu.c ****   /* RCM_RPFC: RSTFLTSS=0,RSTFLTSRW=0 */
 196:../Generated_Code/Cpu.c ****   RCM_RPFC &= (uint8_t)~(uint8_t)(
 368              		.loc 1 196 0
 369 0036 274B     		ldr	r3, .L14+12
 370 0038 264A     		ldr	r2, .L14+12
 371 003a 1279     		ldrb	r2, [r2, #4]
 372 003c D2B2     		uxtb	r2, r2
 373 003e 0721     		mov	r1, #7
 374 0040 8A43     		bic	r2, r1
 375 0042 D2B2     		uxtb	r2, r2
 376 0044 1A71     		strb	r2, [r3, #4]
 197:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSS_MASK |
 198:../Generated_Code/Cpu.c ****                RCM_RPFC_RSTFLTSRW(0x03)
 199:../Generated_Code/Cpu.c ****               );                                                   
 200:../Generated_Code/Cpu.c ****         /* Initialization of the FTFL_FlashConfig module */
 201:../Generated_Code/Cpu.c ****       /* Initialization of the PMC module */
 202:../Generated_Code/Cpu.c ****   /* PMC_LVDSC1: LVDACK=1,LVDIE=0,LVDRE=1,LVDV=0 */
 203:../Generated_Code/Cpu.c ****   PMC_LVDSC1 = (uint8_t)((PMC_LVDSC1 & (uint8_t)~(uint8_t)(
 377              		.loc 1 203 0
 378 0046 244B     		ldr	r3, .L14+16
 379 0048 234A     		ldr	r2, .L14+16
 380 004a 1278     		ldrb	r2, [r2]
 381 004c D2B2     		uxtb	r2, r2
 382 004e D2B2     		uxtb	r2, r2
 383 0050 7321     		mov	r1, #115
 384 0052 8A43     		bic	r2, r1
 385 0054 D2B2     		uxtb	r2, r2
 386 0056 5021     		mov	r1, #80
 387 0058 0A43     		orr	r2, r1
 388 005a D2B2     		uxtb	r2, r2
 389 005c D2B2     		uxtb	r2, r2
 390 005e 1A70     		strb	r2, [r3]
 204:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDIE_MASK |
 205:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDV(0x03)
 206:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 207:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDACK_MASK |
 208:../Generated_Code/Cpu.c ****                 PMC_LVDSC1_LVDRE_MASK
 209:../Generated_Code/Cpu.c ****                ));                                                  
 210:../Generated_Code/Cpu.c ****   /* PMC_LVDSC2: LVWACK=1,LVWIE=0,LVWV=0 */
 211:../Generated_Code/Cpu.c ****   PMC_LVDSC2 = (uint8_t)((PMC_LVDSC2 & (uint8_t)~(uint8_t)(
 391              		.loc 1 211 0
 392 0060 1D4B     		ldr	r3, .L14+16
 393 0062 1D4A     		ldr	r2, .L14+16
 394 0064 5278     		ldrb	r2, [r2, #1]
 395 0066 D2B2     		uxtb	r2, r2
 396 0068 D2B2     		uxtb	r2, r2
 397 006a 6321     		mov	r1, #99
 398 006c 8A43     		bic	r2, r1
 399 006e D2B2     		uxtb	r2, r2
 400 0070 4021     		mov	r1, #64
 401 0072 0A43     		orr	r2, r1
 402 0074 D2B2     		uxtb	r2, r2
 403 0076 D2B2     		uxtb	r2, r2
 404 0078 5A70     		strb	r2, [r3, #1]
 212:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWIE_MASK |
 213:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWV(0x03)
 214:../Generated_Code/Cpu.c ****                )) | (uint8_t)(
 215:../Generated_Code/Cpu.c ****                 PMC_LVDSC2_LVWACK_MASK
 216:../Generated_Code/Cpu.c ****                ));                                                  
 217:../Generated_Code/Cpu.c ****   /* PMC_REGSC: BGEN=0,ACKISO=0,BGBE=0 */
 218:../Generated_Code/Cpu.c ****   PMC_REGSC &= (uint8_t)~(uint8_t)(
 405              		.loc 1 218 0
 406 007a 174B     		ldr	r3, .L14+16
 407 007c 164A     		ldr	r2, .L14+16
 408 007e 9278     		ldrb	r2, [r2, #2]
 409 0080 D2B2     		uxtb	r2, r2
 410 0082 1921     		mov	r1, #25
 411 0084 8A43     		bic	r2, r1
 412 0086 D2B2     		uxtb	r2, r2
 413 0088 9A70     		strb	r2, [r3, #2]
 219:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGEN_MASK |
 220:../Generated_Code/Cpu.c ****                 PMC_REGSC_ACKISO_MASK |
 221:../Generated_Code/Cpu.c ****                 PMC_REGSC_BGBE_MASK
 222:../Generated_Code/Cpu.c ****                );                                                   
 223:../Generated_Code/Cpu.c ****   /* SMC_PMPROT: ??=0,??=0,AVLP=0,??=0,ALLS=0,??=0,AVLLS=0,??=0 */
 224:../Generated_Code/Cpu.c ****   SMC_PMPROT = 0x00U;                  /* Setup Power mode protection register */
 414              		.loc 1 224 0
 415 008a 144B     		ldr	r3, .L14+20
 416 008c 0022     		mov	r2, #0
 417 008e 1A70     		strb	r2, [r3]
 225:../Generated_Code/Cpu.c ****   /* Common initialization of the CPU registers */
 226:../Generated_Code/Cpu.c ****   /* PORTA_PCR20: ISF=0,MUX=7 */
 227:../Generated_Code/Cpu.c ****   PORTA_PCR20 = (uint32_t)((PORTA_PCR20 & (uint32_t)~(uint32_t)(
 418              		.loc 1 227 0
 419 0090 0E4B     		ldr	r3, .L14+4
 420 0092 0E4A     		ldr	r2, .L14+4
 421 0094 116D     		ldr	r1, [r2, #80]
 422 0096 0E4A     		ldr	r2, .L14+8
 423 0098 0A40     		and	r2, r1
 424 009a E021     		mov	r1, #224
 425 009c C900     		lsl	r1, r1, #3
 426 009e 0A43     		orr	r2, r1
 427 00a0 1A65     		str	r2, [r3, #80]
 228:../Generated_Code/Cpu.c ****                  PORT_PCR_ISF_MASK
 229:../Generated_Code/Cpu.c ****                 )) | (uint32_t)(
 230:../Generated_Code/Cpu.c ****                  PORT_PCR_MUX(0x07)
 231:../Generated_Code/Cpu.c ****                 ));                                                  
 232:../Generated_Code/Cpu.c ****   /* NVIC_IPR1: PRI_6=0 */
 233:../Generated_Code/Cpu.c ****   NVIC_IPR1 &= (uint32_t)~(uint32_t)(NVIC_IP_PRI_6(0xFF));                                         
 428              		.loc 1 233 0
 429 00a2 0F4A     		ldr	r2, .L14+24
 430 00a4 0E49     		ldr	r1, .L14+24
 431 00a6 C123     		mov	r3, #193
 432 00a8 9B00     		lsl	r3, r3, #2
 433 00aa C958     		ldr	r1, [r1, r3]
 434 00ac 0D4B     		ldr	r3, .L14+28
 435 00ae 1940     		and	r1, r3
 436 00b0 C123     		mov	r3, #193
 437 00b2 9B00     		lsl	r3, r3, #2
 438 00b4 D150     		str	r1, [r2, r3]
 234:../Generated_Code/Cpu.c ****   /* ### Serial_LDD "IO1" component auto initialization. Auto initialization feature can be disable
 235:../Generated_Code/Cpu.c ****   (void)IO1_Init(NULL);
 439              		.loc 1 235 0
 440 00b6 0020     		mov	r0, #0
 441 00b8 FFF7FEFF 		bl	IO1_Init
 236:../Generated_Code/Cpu.c ****   /* ### DAC_LDD "DrvDac2V" component auto initialization. Auto initialization feature can be disab
 237:../Generated_Code/Cpu.c ****   (void)DrvDac2V_Init(NULL);
 442              		.loc 1 237 0
 443 00bc 0020     		mov	r0, #0
 444 00be FFF7FEFF 		bl	DrvDac2V_Init
 238:../Generated_Code/Cpu.c **** }
 445              		.loc 1 238 0
 446 00c2 BD46     		mov	sp, r7
 447              		@ sp needed for prologue
 448 00c4 80BD     		pop	{r7, pc}
 449              	.L15:
 450 00c6 C046     		.align	2
 451              	.L14:
 452 00c8 00000000 		.word	MQX_init_struct
 453 00cc 00900440 		.word	1074040832
 454 00d0 FFF8FFFE 		.word	-16779009
 455 00d4 00F00740 		.word	1074262016
 456 00d8 00D00740 		.word	1074253824
 457 00dc 00E00740 		.word	1074257920
 458 00e0 00E100E0 		.word	-536813312
 459 00e4 FFFF00FF 		.word	-16711681
 460              		.cfi_endproc
 461              	.LFE3:
 463              		.global	_cfm
 464              		.section	.cfmconfig,"a",%progbits
 465              		.align	2
 468              	_cfm:
 469 0000 FF       		.byte	-1
 470 0001 FF       		.byte	-1
 471 0002 FF       		.byte	-1
 472 0003 FF       		.byte	-1
 473 0004 FF       		.byte	-1
 474 0005 FF       		.byte	-1
 475 0006 FF       		.byte	-1
 476 0007 FF       		.byte	-1
 477 0008 FF       		.byte	-1
 478 0009 FF       		.byte	-1
 479 000a FF       		.byte	-1
 480 000b FF       		.byte	-1
 481 000c 7E       		.byte	126
 482 000d FF       		.byte	-1
 483 000e FF       		.byte	-1
 484 000f FF       		.byte	-1
 485              		.text
 486              	.Letext0:
 487              		.file 2 "C:/Freescale/CW MCU v10.3/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 488              		.file 3 "../Generated_Code/IO_Map.h"
 489              		.file 4 "../Generated_Code/Cpu.h"
 490              		.file 5 "E:/CW103_Work_Space/Mqx_Lite_Test/MQXLITE/psp/cortex_m/psptypes.h"
 491              		.file 6 "E:/CW103_Work_Space/Mqx_Lite_Test/MQXLITE/include/mqxlite.h"
 492              		.file 7 "../Generated_Code/MQX1.h"
DEFINED SYMBOLS
                            *ABS*:00000000 Cpu.c
                            *COM*:00000001 SR_reg
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:22     .bss.SR_lock:00000000 SR_lock
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:23     .bss.SR_lock:00000000 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:25     .text.Cpu_INT_NMIInterrupt:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:30     .text.Cpu_INT_NMIInterrupt:00000000 Cpu_INT_NMIInterrupt
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:53     .text.Cpu_Interrupt:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:58     .text.Cpu_Interrupt:00000000 Cpu_Interrupt
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:83     .text.__init_hardware:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:88     .text.__init_hardware:00000000 __init_hardware
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:304    .text.__init_hardware:00000144 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:321    .text.PE_low_level_init:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:326    .text.PE_low_level_init:00000000 PE_low_level_init
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:452    .text.PE_low_level_init:000000c8 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:468    .cfmconfig:00000000 _cfm
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\ccLcmcXi.s:465    .cfmconfig:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
Cpu_OnNMIINT
__vect_table
_mqxlite_init
IO1_Init
DrvDac2V_Init
MQX_init_struct
