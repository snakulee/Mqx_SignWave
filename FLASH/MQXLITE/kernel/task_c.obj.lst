   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"task.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	_tad_task_at_flag,4,4
  18              		.section	.text._task_abort_internal,"ax",%progbits
  19              		.align	2
  20              		.global	_task_abort_internal
  21              		.code	16
  22              		.thumb_func
  24              	_task_abort_internal:
  25              	.LFB0:
  26              		.file 1 "../MQXLITE/kernel/task.c"
   1:../MQXLITE/kernel/task.c **** /*HEADER*********************************************************************
   2:../MQXLITE/kernel/task.c ****  *
   3:../MQXLITE/kernel/task.c ****  * Copyright (c) 2008 Freescale Semiconductor;
   4:../MQXLITE/kernel/task.c ****  * All Rights Reserved
   5:../MQXLITE/kernel/task.c ****  *
   6:../MQXLITE/kernel/task.c ****  * Copyright (c) 2004-2008 Embedded Access Inc.;
   7:../MQXLITE/kernel/task.c ****  * All Rights Reserved
   8:../MQXLITE/kernel/task.c ****  *
   9:../MQXLITE/kernel/task.c ****  * Copyright (c) 1989-2008 ARC International;
  10:../MQXLITE/kernel/task.c ****  * All Rights Reserved
  11:../MQXLITE/kernel/task.c ****  *
  12:../MQXLITE/kernel/task.c ****  *****************************************************************************
  13:../MQXLITE/kernel/task.c ****  *
  14:../MQXLITE/kernel/task.c ****  * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESSED OR
  15:../MQXLITE/kernel/task.c ****  * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  16:../MQXLITE/kernel/task.c ****  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  17:../MQXLITE/kernel/task.c ****  * IN NO EVENT SHALL FREESCALE OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  18:../MQXLITE/kernel/task.c ****  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  19:../MQXLITE/kernel/task.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  20:../MQXLITE/kernel/task.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  21:../MQXLITE/kernel/task.c ****  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  22:../MQXLITE/kernel/task.c ****  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  23:../MQXLITE/kernel/task.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
  24:../MQXLITE/kernel/task.c ****  * THE POSSIBILITY OF SUCH DAMAGE.
  25:../MQXLITE/kernel/task.c ****  *
  26:../MQXLITE/kernel/task.c ****  *****************************************************************************
  27:../MQXLITE/kernel/task.c ****  *
  28:../MQXLITE/kernel/task.c ****  * $FileName: task.c$
  29:../MQXLITE/kernel/task.c ****  * $Version : 3.8.0.2$
  30:../MQXLITE/kernel/task.c ****  * $Date    : Feb-27-2012$
  31:../MQXLITE/kernel/task.c ****  *
  32:../MQXLITE/kernel/task.c ****  * Comments:
  33:../MQXLITE/kernel/task.c ****  *
  34:../MQXLITE/kernel/task.c ****  *   This file contains functions of the Task Management component.
  35:../MQXLITE/kernel/task.c ****  *
  36:../MQXLITE/kernel/task.c ****  *END************************************************************************/
  37:../MQXLITE/kernel/task.c **** 
  38:../MQXLITE/kernel/task.c **** #include <string.h>
  39:../MQXLITE/kernel/task.c **** #include "mqx_inc.h"
  40:../MQXLITE/kernel/task.c **** 
  41:../MQXLITE/kernel/task.c **** /*!
  42:../MQXLITE/kernel/task.c ****  * \private
  43:../MQXLITE/kernel/task.c ****  *
  44:../MQXLITE/kernel/task.c ****  * This variable has no use to MQX.
  45:../MQXLITE/kernel/task.c ****  * Its been created for Task Aware Debug module.
  46:../MQXLITE/kernel/task.c ****  */
  47:../MQXLITE/kernel/task.c **** volatile uint_32 _tad_task_at_flag;
  48:../MQXLITE/kernel/task.c **** 
  49:../MQXLITE/kernel/task.c **** /*!
  50:../MQXLITE/kernel/task.c ****  * \private
  51:../MQXLITE/kernel/task.c ****  *
  52:../MQXLITE/kernel/task.c ****  * \brief Makes a task run its task exit handler and then destroys itself.
  53:../MQXLITE/kernel/task.c ****  *
  54:../MQXLITE/kernel/task.c ****  * \param[in] task_id The task id of the task to abort.
  55:../MQXLITE/kernel/task.c ****  * \param[in] user User mode functionality.
  56:../MQXLITE/kernel/task.c ****  *
  57:../MQXLITE/kernel/task.c ****  * \return MQX_OK
  58:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_TASK_ID
  59:../MQXLITE/kernel/task.c ****  *
  60:../MQXLITE/kernel/task.c ****  * \see _task_abort
  61:../MQXLITE/kernel/task.c ****  */
  62:../MQXLITE/kernel/task.c **** _mqx_uint _task_abort_internal
  63:../MQXLITE/kernel/task.c **** (
  64:../MQXLITE/kernel/task.c ****     _task_id    task_id,
  65:../MQXLITE/kernel/task.c ****     boolean     user
  66:../MQXLITE/kernel/task.c **** )
  67:../MQXLITE/kernel/task.c **** {
  27              		.loc 1 67 0
  28              		.cfi_startproc
  29 0000 80B5     		push	{r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 8CB0     		sub	sp, sp, #48
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 56
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  41 0008 3960     		str	r1, [r7]
  68:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR kernel_data;
  69:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR          td_ptr;
  70:../MQXLITE/kernel/task.c ****     pointer                stack_ptr;
  71:../MQXLITE/kernel/task.c ****     _processor_number processor;
  72:../MQXLITE/kernel/task.c **** 
  73:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
  42              		.loc 1 73 0
  43 000a 5A4B     		ldr	r3, .L13
  44 000c 1B68     		ldr	r3, [r3]
  45 000e FB62     		str	r3, [r7, #44]
  74:../MQXLITE/kernel/task.c ****     _KLOGE2(KLOG_task_abort, task_id);
  75:../MQXLITE/kernel/task.c **** 
  76:../MQXLITE/kernel/task.c ****     if (task_id != MQX_NULL_TASK_ID)
  46              		.loc 1 76 0
  47 0010 7B68     		ldr	r3, [r7, #4]
  48 0012 002B     		cmp	r3, #0
  49 0014 10D0     		beq	.L2
  77:../MQXLITE/kernel/task.c ****     {
  78:../MQXLITE/kernel/task.c ****         processor = PROC_NUMBER_FROM_TASKID(task_id);
  50              		.loc 1 78 0
  51 0016 7B68     		ldr	r3, [r7, #4]
  52 0018 1A0C     		lsr	r2, r3, #16
  53 001a 3B1C     		mov	r3, r7
  54 001c 2A33     		add	r3, r3, #42
  55 001e 1A80     		strh	r2, [r3]
  79:../MQXLITE/kernel/task.c ****         if (processor != (_processor_number) kernel_data->INIT.PROCESSOR_NUMBER)
  56              		.loc 1 79 0
  57 0020 FA6A     		ldr	r2, [r7, #44]
  58 0022 A823     		mov	r3, #168
  59 0024 5B00     		lsl	r3, r3, #1
  60 0026 D358     		ldr	r3, [r2, r3]
  61 0028 9BB2     		uxth	r3, r3
  62 002a 3A1C     		mov	r2, r7
  63 002c 2A32     		add	r2, r2, #42
  64 002e 1288     		ldrh	r2, [r2]
  65 0030 9A42     		cmp	r2, r3
  66 0032 01D0     		beq	.L2
  80:../MQXLITE/kernel/task.c ****         {
  81:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
  82:../MQXLITE/kernel/task.c ****             if ( kernel_data->IPC != NULL )
  83:../MQXLITE/kernel/task.c ****             {
  84:../MQXLITE/kernel/task.c ****                 _KLOGX2(KLOG_task_abort, MQX_OK);
  85:../MQXLITE/kernel/task.c ****                 return( (*kernel_data->IPC)(FALSE, processor,
  86:../MQXLITE/kernel/task.c ****                                                 KERNEL_MESSAGES, IPC_TASK_ABORT, 1, (_mqx_uint)task
  87:../MQXLITE/kernel/task.c ****             }
  88:../MQXLITE/kernel/task.c ****             else
  89:../MQXLITE/kernel/task.c ****             {
  90:../MQXLITE/kernel/task.c **** #endif
  91:../MQXLITE/kernel/task.c ****             _KLOGX2(KLOG_task_abort, MQX_INVALID_TASK_ID);
  92:../MQXLITE/kernel/task.c ****             return (MQX_INVALID_TASK_ID);
  67              		.loc 1 92 0
  68 0034 1223     		mov	r3, #18
  69 0036 99E0     		b	.L3
  70              	.L2:
  93:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
  94:../MQXLITE/kernel/task.c ****         } /* Endif */
  95:../MQXLITE/kernel/task.c **** #endif
  96:../MQXLITE/kernel/task.c ****         }/* Endif */
  97:../MQXLITE/kernel/task.c ****     }/* Endif */
  98:../MQXLITE/kernel/task.c **** 
  99:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR) _task_get_td(task_id);
  71              		.loc 1 99 0
  72 0038 7B68     		ldr	r3, [r7, #4]
  73 003a 181C     		mov	r0, r3
  74 003c FFF7FEFF 		bl	_task_get_td
  75 0040 031C     		mov	r3, r0
  76 0042 7B62     		str	r3, [r7, #36]
 100:../MQXLITE/kernel/task.c **** 
 101:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
 102:../MQXLITE/kernel/task.c ****     /* check template for correct user task parameters */
 103:../MQXLITE/kernel/task.c ****     if (user)
 104:../MQXLITE/kernel/task.c ****     {
 105:../MQXLITE/kernel/task.c ****         if (!(td_ptr->FLAGS & MQX_USER_TASK))
 106:../MQXLITE/kernel/task.c ****         {
 107:../MQXLITE/kernel/task.c ****             return MQX_INVALID_TASK_ID;
 108:../MQXLITE/kernel/task.c ****         }
 109:../MQXLITE/kernel/task.c ****     }
 110:../MQXLITE/kernel/task.c **** #endif
 111:../MQXLITE/kernel/task.c **** 
 112:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
 113:../MQXLITE/kernel/task.c ****     if ((td_ptr == NULL) || (td_ptr == SYSTEM_TD_PTR(kernel_data)))
  77              		.loc 1 113 0
  78 0044 7B6A     		ldr	r3, [r7, #36]
  79 0046 002B     		cmp	r3, #0
  80 0048 05D0     		beq	.L4
  81              		.loc 1 113 0 is_stmt 0
  82 004a FB6A     		ldr	r3, [r7, #44]
  83 004c 1A1C     		mov	r2, r3
  84 004e 4832     		add	r2, r2, #72
  85 0050 7B6A     		ldr	r3, [r7, #36]
  86 0052 9A42     		cmp	r2, r3
  87 0054 01D1     		bne	.L5
  88              	.L4:
 114:../MQXLITE/kernel/task.c ****     {
 115:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_abort, MQX_INVALID_TASK_ID);
 116:../MQXLITE/kernel/task.c ****         return (MQX_INVALID_TASK_ID);
  89              		.loc 1 116 0 is_stmt 1
  90 0056 1223     		mov	r3, #18
  91 0058 88E0     		b	.L3
  92              	.L5:
 117:../MQXLITE/kernel/task.c ****     } /* Endif */
 118:../MQXLITE/kernel/task.c **** #endif
 119:../MQXLITE/kernel/task.c **** 
 120:../MQXLITE/kernel/task.c ****     if (td_ptr == kernel_data->ACTIVE_PTR)
  93              		.loc 1 120 0
  94 005a FB6A     		ldr	r3, [r7, #44]
  95 005c DA69     		ldr	r2, [r3, #28]
  96 005e 7B6A     		ldr	r3, [r7, #36]
  97 0060 9A42     		cmp	r2, r3
  98 0062 0FD1     		bne	.L6
 121:../MQXLITE/kernel/task.c ****     {
 122:../MQXLITE/kernel/task.c ****         if (kernel_data->IN_ISR)
  99              		.loc 1 122 0
 100 0064 FB6A     		ldr	r3, [r7, #44]
 101 0066 1B8B     		ldrh	r3, [r3, #24]
 102 0068 002B     		cmp	r3, #0
 103 006a 08D0     		beq	.L7
 123:../MQXLITE/kernel/task.c ****         {
 124:../MQXLITE/kernel/task.c ****             stack_ptr = (pointer) td_ptr->STACK_PTR;
 104              		.loc 1 124 0
 105 006c 7B6A     		ldr	r3, [r7, #36]
 106 006e 5B69     		ldr	r3, [r3, #20]
 107 0070 3B62     		str	r3, [r7, #32]
 125:../MQXLITE/kernel/task.c ****             _PSP_SET_PC_OF_INTERRUPTED_TASK(stack_ptr,
 108              		.loc 1 125 0
 109 0072 FFF7FEFF 		bl	__get_PSP
 110 0076 031C     		mov	r3, r0
 111 0078 3F4A     		ldr	r2, .L13+4
 112 007a 9A61     		str	r2, [r3, #24]
 113 007c 75E0     		b	.L8
 114              	.L7:
 126:../MQXLITE/kernel/task.c ****                             _task_exit_function_internal);
 127:../MQXLITE/kernel/task.c ****         }
 128:../MQXLITE/kernel/task.c ****         else
 129:../MQXLITE/kernel/task.c ****         {
 130:../MQXLITE/kernel/task.c ****             _task_exit_function_internal();
 115              		.loc 1 130 0
 116 007e FFF7FEFF 		bl	_task_exit_function_internal
 117 0082 72E0     		b	.L8
 118              	.L6:
 131:../MQXLITE/kernel/task.c ****         }/* Endif */
 132:../MQXLITE/kernel/task.c ****     }
 133:../MQXLITE/kernel/task.c ****     else
 134:../MQXLITE/kernel/task.c ****     {
 135:../MQXLITE/kernel/task.c **** 
 136:../MQXLITE/kernel/task.c ****         _int_disable();
 119              		.loc 1 136 0
 120 0084 FFF7FEFF 		bl	_int_disable
 137:../MQXLITE/kernel/task.c ****         /* Task is not running */
 138:../MQXLITE/kernel/task.c ****         stack_ptr = (pointer) td_ptr->STACK_PTR;
 121              		.loc 1 138 0
 122 0088 7B6A     		ldr	r3, [r7, #36]
 123 008a 5B69     		ldr	r3, [r3, #20]
 124 008c 3B62     		str	r3, [r7, #32]
 139:../MQXLITE/kernel/task.c ****         _PSP_SET_PC_OF_BLOCKED_TASK(stack_ptr,
 125              		.loc 1 139 0
 126 008e 3A4A     		ldr	r2, .L13+4
 127 0090 3B6A     		ldr	r3, [r7, #32]
 128 0092 9A63     		str	r2, [r3, #56]
 140:../MQXLITE/kernel/task.c ****                         _task_exit_function_internal);
 141:../MQXLITE/kernel/task.c ****         if (td_ptr->STATE & IS_ON_TIMEOUT_Q)
 129              		.loc 1 141 0
 130 0094 7B6A     		ldr	r3, [r7, #36]
 131 0096 9A68     		ldr	r2, [r3, #8]
 132 0098 8023     		mov	r3, #128
 133 009a 5B00     		lsl	r3, r3, #1
 134 009c 1340     		and	r3, r2
 135 009e 25D0     		beq	.L9
 142:../MQXLITE/kernel/task.c ****         {
 143:../MQXLITE/kernel/task.c ****             /* Remove from time queue (uses NEXT, PREV field) */
 144:../MQXLITE/kernel/task.c ****             _TIME_DEQUEUE(td_ptr, kernel_data);
 136              		.loc 1 144 0
 137 00a0 7B6A     		ldr	r3, [r7, #36]
 138 00a2 9A68     		ldr	r2, [r3, #8]
 139 00a4 8023     		mov	r3, #128
 140 00a6 5B00     		lsl	r3, r3, #1
 141 00a8 1340     		and	r3, r2
 142 00aa 53D0     		beq	.L10
 143              	.LBB2:
 144              		.loc 1 144 0 is_stmt 0
 145 00ac 7B6A     		ldr	r3, [r7, #36]
 146 00ae 5B68     		ldr	r3, [r3, #4]
 147 00b0 FB61     		str	r3, [r7, #28]
 148 00b2 7B6A     		ldr	r3, [r7, #36]
 149 00b4 1B68     		ldr	r3, [r3]
 150 00b6 BB61     		str	r3, [r7, #24]
 151 00b8 FB69     		ldr	r3, [r7, #28]
 152 00ba BA69     		ldr	r2, [r7, #24]
 153 00bc 1A60     		str	r2, [r3]
 154 00be BB69     		ldr	r3, [r7, #24]
 155 00c0 FA69     		ldr	r2, [r7, #28]
 156 00c2 5A60     		str	r2, [r3, #4]
 157              	.LBE2:
 158 00c4 FB6A     		ldr	r3, [r7, #44]
 159 00c6 2933     		add	r3, r3, #41
 160 00c8 FF33     		add	r3, r3, #255
 161 00ca 1A89     		ldrh	r2, [r3, #8]
 162 00cc 013A     		sub	r2, r2, #1
 163 00ce 92B2     		uxth	r2, r2
 164 00d0 1A81     		strh	r2, [r3, #8]
 165 00d2 7B6A     		ldr	r3, [r7, #36]
 166 00d4 9A68     		ldr	r2, [r3, #8]
 167 00d6 294B     		ldr	r3, .L13+8
 168 00d8 1A40     		and	r2, r3
 169 00da 7B6A     		ldr	r3, [r7, #36]
 170 00dc 9A60     		str	r2, [r3, #8]
 171 00de 7B6A     		ldr	r3, [r7, #36]
 172 00e0 9B68     		ldr	r3, [r3, #8]
 173 00e2 0322     		mov	r2, #3
 174 00e4 1A43     		orr	r2, r3
 175 00e6 7B6A     		ldr	r3, [r7, #36]
 176 00e8 9A60     		str	r2, [r3, #8]
 177 00ea 33E0     		b	.L10
 178              	.L9:
 145:../MQXLITE/kernel/task.c ****         }
 146:../MQXLITE/kernel/task.c ****         else if (td_ptr->STATE & TD_IS_ON_QUEUE)
 179              		.loc 1 146 0 is_stmt 1
 180 00ec 7B6A     		ldr	r3, [r7, #36]
 181 00ee 9A68     		ldr	r2, [r3, #8]
 182 00f0 8023     		mov	r3, #128
 183 00f2 9B00     		lsl	r3, r3, #2
 184 00f4 1340     		and	r3, r2
 185 00f6 12D0     		beq	.L11
 186              	.LBB3:
 147:../MQXLITE/kernel/task.c ****         {
 148:../MQXLITE/kernel/task.c ****             _QUEUE_REMOVE(td_ptr->INFO, td_ptr);
 187              		.loc 1 148 0
 188 00f8 7B6A     		ldr	r3, [r7, #36]
 189 00fa 5B68     		ldr	r3, [r3, #4]
 190 00fc 7B61     		str	r3, [r7, #20]
 191 00fe 7B6A     		ldr	r3, [r7, #36]
 192 0100 1B68     		ldr	r3, [r3]
 193 0102 3B61     		str	r3, [r7, #16]
 194 0104 7B69     		ldr	r3, [r7, #20]
 195 0106 3A69     		ldr	r2, [r7, #16]
 196 0108 1A60     		str	r2, [r3]
 197 010a 3B69     		ldr	r3, [r7, #16]
 198 010c 7A69     		ldr	r2, [r7, #20]
 199 010e 5A60     		str	r2, [r3, #4]
 200              	.LBE3:
 201 0110 7B6A     		ldr	r3, [r7, #36]
 202 0112 DB6A     		ldr	r3, [r3, #44]
 203 0114 1A89     		ldrh	r2, [r3, #8]
 204 0116 013A     		sub	r2, r2, #1
 205 0118 92B2     		uxth	r2, r2
 206 011a 1A81     		strh	r2, [r3, #8]
 207 011c 1AE0     		b	.L10
 208              	.L11:
 149:../MQXLITE/kernel/task.c ****         }
 150:../MQXLITE/kernel/task.c ****         else if ((td_ptr->STATE & BLOCKED_ON_AUX_QUEUE) == BLOCKED_ON_AUX_QUEUE)
 209              		.loc 1 150 0
 210 011e 7B6A     		ldr	r3, [r7, #36]
 211 0120 9A68     		ldr	r2, [r3, #8]
 212 0122 174B     		ldr	r3, .L13+12
 213 0124 1A40     		and	r2, r3
 214 0126 164B     		ldr	r3, .L13+12
 215 0128 9A42     		cmp	r2, r3
 216 012a 13D1     		bne	.L10
 217              	.LBB4:
 151:../MQXLITE/kernel/task.c ****         {
 152:../MQXLITE/kernel/task.c ****             /* We need to remove it here because _task_ready() below will
 153:../MQXLITE/kernel/task.c ****              change its state to READY */
 154:../MQXLITE/kernel/task.c ****             _QUEUE_REMOVE(td_ptr->INFO, &td_ptr->AUX_QUEUE);
 218              		.loc 1 154 0
 219 012c 7B6A     		ldr	r3, [r7, #36]
 220 012e 3033     		add	r3, r3, #48
 221 0130 5B68     		ldr	r3, [r3, #4]
 222 0132 FB60     		str	r3, [r7, #12]
 223 0134 7B6A     		ldr	r3, [r7, #36]
 224 0136 3033     		add	r3, r3, #48
 225 0138 1B68     		ldr	r3, [r3]
 226 013a BB60     		str	r3, [r7, #8]
 227 013c FB68     		ldr	r3, [r7, #12]
 228 013e BA68     		ldr	r2, [r7, #8]
 229 0140 1A60     		str	r2, [r3]
 230 0142 BB68     		ldr	r3, [r7, #8]
 231 0144 FA68     		ldr	r2, [r7, #12]
 232 0146 5A60     		str	r2, [r3, #4]
 233              	.LBE4:
 234 0148 7B6A     		ldr	r3, [r7, #36]
 235 014a DB6A     		ldr	r3, [r3, #44]
 236 014c 1A89     		ldrh	r2, [r3, #8]
 237 014e 013A     		sub	r2, r2, #1
 238 0150 92B2     		uxth	r2, r2
 239 0152 1A81     		strh	r2, [r3, #8]
 240              	.L10:
 155:../MQXLITE/kernel/task.c ****         } /* Endif */
 156:../MQXLITE/kernel/task.c ****         if (td_ptr->STATE & IS_BLOCKED)
 241              		.loc 1 156 0
 242 0154 7B6A     		ldr	r3, [r7, #36]
 243 0156 9A68     		ldr	r2, [r3, #8]
 244 0158 0123     		mov	r3, #1
 245 015a 1340     		and	r3, r2
 246 015c 03D0     		beq	.L12
 157:../MQXLITE/kernel/task.c ****         {
 158:../MQXLITE/kernel/task.c ****             _task_ready(td_ptr);
 247              		.loc 1 158 0
 248 015e 7B6A     		ldr	r3, [r7, #36]
 249 0160 181C     		mov	r0, r3
 250 0162 FFF7FEFF 		bl	_task_ready
 251              	.L12:
 159:../MQXLITE/kernel/task.c ****         } /* Endif */
 160:../MQXLITE/kernel/task.c ****         _int_enable();
 252              		.loc 1 160 0
 253 0166 FFF7FEFF 		bl	_int_enable
 254              	.L8:
 161:../MQXLITE/kernel/task.c ****     }/* Endif */
 162:../MQXLITE/kernel/task.c **** 
 163:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_abort, MQX_OK);
 164:../MQXLITE/kernel/task.c ****     return (MQX_OK);
 255              		.loc 1 164 0
 256 016a 0023     		mov	r3, #0
 257              	.L3:
 165:../MQXLITE/kernel/task.c **** }
 258              		.loc 1 165 0
 259 016c 181C     		mov	r0, r3
 260 016e BD46     		mov	sp, r7
 261 0170 0CB0     		add	sp, sp, #48
 262              		@ sp needed for prologue
 263 0172 80BD     		pop	{r7, pc}
 264              	.L14:
 265              		.align	2
 266              	.L13:
 267 0174 00000000 		.word	_mqx_kernel_data
 268 0178 00000000 		.word	_task_exit_function_internal
 269 017c FFFEFFFF 		.word	-257
 270 0180 01040000 		.word	1025
 271              		.cfi_endproc
 272              	.LFE0:
 274              		.section	.text._task_abort,"ax",%progbits
 275              		.align	2
 276              		.global	_task_abort
 277              		.code	16
 278              		.thumb_func
 280              	_task_abort:
 281              	.LFB1:
 166:../MQXLITE/kernel/task.c **** 
 167:../MQXLITE/kernel/task.c **** /*!
 168:../MQXLITE/kernel/task.c ****  * \brief Makes a task run its task exit handler and then destroys itself.
 169:../MQXLITE/kernel/task.c ****  *
 170:../MQXLITE/kernel/task.c ****  * \param[in] task_id One of the following:
 171:../MQXLITE/kernel/task.c ****  * \n - Task ID of the task to be destroyed.
 172:../MQXLITE/kernel/task.c ****  * \n - MQX_NULL_TASK_ID (Abort the calling task.)
 173:../MQXLITE/kernel/task.c ****  *
 174:../MQXLITE/kernel/task.c ****  * \return MQX_OK
 175:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_TASK_ID (Task_id does not represent a valid task.)
 176:../MQXLITE/kernel/task.c ****  *
 177:../MQXLITE/kernel/task.c ****  * \see _task_destroy
 178:../MQXLITE/kernel/task.c ****  * \see _task_get_exit_handler
 179:../MQXLITE/kernel/task.c ****  * \see _task_set_exit_handler
 180:../MQXLITE/kernel/task.c ****  */
 181:../MQXLITE/kernel/task.c **** _mqx_uint _task_abort
 182:../MQXLITE/kernel/task.c **** (
 183:../MQXLITE/kernel/task.c ****     _task_id    task_id
 184:../MQXLITE/kernel/task.c **** )
 185:../MQXLITE/kernel/task.c **** {
 282              		.loc 1 185 0
 283              		.cfi_startproc
 284 0000 80B5     		push	{r7, lr}
 285              	.LCFI3:
 286              		.cfi_def_cfa_offset 8
 287              		.cfi_offset 7, -8
 288              		.cfi_offset 14, -4
 289 0002 82B0     		sub	sp, sp, #8
 290              	.LCFI4:
 291              		.cfi_def_cfa_offset 16
 292 0004 00AF     		add	r7, sp, #0
 293              	.LCFI5:
 294              		.cfi_def_cfa_register 7
 295 0006 7860     		str	r0, [r7, #4]
 186:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE && MQX_ENABLE_USER_STDAPI
 187:../MQXLITE/kernel/task.c ****     if (MQX_RUN_IN_USER_MODE)
 188:../MQXLITE/kernel/task.c ****     {
 189:../MQXLITE/kernel/task.c ****         return _usr_task_abort(task_id);
 190:../MQXLITE/kernel/task.c ****     }
 191:../MQXLITE/kernel/task.c **** #endif
 192:../MQXLITE/kernel/task.c **** 
 193:../MQXLITE/kernel/task.c ****     return _task_abort_internal(task_id, FALSE);
 296              		.loc 1 193 0
 297 0008 7B68     		ldr	r3, [r7, #4]
 298 000a 181C     		mov	r0, r3
 299 000c 0021     		mov	r1, #0
 300 000e FFF7FEFF 		bl	_task_abort_internal
 301 0012 031C     		mov	r3, r0
 194:../MQXLITE/kernel/task.c **** }
 302              		.loc 1 194 0
 303 0014 181C     		mov	r0, r3
 304 0016 BD46     		mov	sp, r7
 305 0018 02B0     		add	sp, sp, #8
 306              		@ sp needed for prologue
 307 001a 80BD     		pop	{r7, pc}
 308              		.cfi_endproc
 309              	.LFE1:
 311              		.section	.text._task_create_at,"ax",%progbits
 312              		.align	2
 313              		.global	_task_create_at
 314              		.code	16
 315              		.thumb_func
 317              	_task_create_at:
 318              	.LFB2:
 195:../MQXLITE/kernel/task.c **** 
 196:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
 197:../MQXLITE/kernel/task.c **** 
 198:../MQXLITE/kernel/task.c **** /*!
 199:../MQXLITE/kernel/task.c ****  * \brief Makes a task run its task exit handler and then destroys itself.
 200:../MQXLITE/kernel/task.c ****  *
 201:../MQXLITE/kernel/task.c ****  * This function is an equivalent to the _task_abort() API call but it can be
 202:../MQXLITE/kernel/task.c ****  * executed from within the User task or other code running in the CPU User mode.
 203:../MQXLITE/kernel/task.c ****  * Parameters passed to this function by pointer are required to meet the memory
 204:../MQXLITE/kernel/task.c ****  * protection requirements as described in the parameter list below.
 205:../MQXLITE/kernel/task.c ****  *
 206:../MQXLITE/kernel/task.c ****  * \param[in] task_id One of the following:
 207:../MQXLITE/kernel/task.c ****  * \n - Task ID of the task to be destroyed.
 208:../MQXLITE/kernel/task.c ****  * \n - MQX_NULL_TASK_ID (Abort the calling task.)
 209:../MQXLITE/kernel/task.c ****  *
 210:../MQXLITE/kernel/task.c ****  * \return MQX_OK
 211:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_TASK_ID
 212:../MQXLITE/kernel/task.c ****  *
 213:../MQXLITE/kernel/task.c ****  * \see _task_abort
 214:../MQXLITE/kernel/task.c ****  * \see _usr_task_destroy
 215:../MQXLITE/kernel/task.c ****  */
 216:../MQXLITE/kernel/task.c **** _mqx_uint _usr_task_abort
 217:../MQXLITE/kernel/task.c **** (
 218:../MQXLITE/kernel/task.c ****     _task_id    task_id
 219:../MQXLITE/kernel/task.c **** )
 220:../MQXLITE/kernel/task.c **** {
 221:../MQXLITE/kernel/task.c ****     MQX_API_CALL_PARAMS params = {(uint_32)task_id, 0, 0, 0, 0};
 222:../MQXLITE/kernel/task.c ****     return _mqx_api_call(MQX_API_TASK_ABORT, &params);
 223:../MQXLITE/kernel/task.c **** }
 224:../MQXLITE/kernel/task.c **** 
 225:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
 226:../MQXLITE/kernel/task.c **** 
 227:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
 228:../MQXLITE/kernel/task.c **** /*!
 229:../MQXLITE/kernel/task.c ****  * \private
 230:../MQXLITE/kernel/task.c ****  *
 231:../MQXLITE/kernel/task.c ****  * \brief Creates the task and make it ready.
 232:../MQXLITE/kernel/task.c ****  *
 233:../MQXLITE/kernel/task.c ****  * \param[in] processor_number One of the following:
 234:../MQXLITE/kernel/task.c ****  * \n - Processor number of the processor where the task is to be created.
 235:../MQXLITE/kernel/task.c ****  * \n - 0 (Create on the local processor.)
 236:../MQXLITE/kernel/task.c ****  * \param[in] template_index One of the following:
 237:../MQXLITE/kernel/task.c ****  * \n - Index of the task template in the processor's task template list to use
 238:../MQXLITE/kernel/task.c ****  * for the child task.
 239:../MQXLITE/kernel/task.c ****  * \n - 0 (Use the task template that create_parameter defines.)
 240:../MQXLITE/kernel/task.c ****  * \param[in] parameter Pointer:
 241:../MQXLITE/kernel/task.c ****  * \n - Template_index is not 0 (Pointer to the parameter that MQX passes to the
 242:../MQXLITE/kernel/task.c ****  * child task.)
 243:../MQXLITE/kernel/task.c ****  * \n - Template_index is 0 (Pointer to the task template.)
 244:../MQXLITE/kernel/task.c ****  * \param[in] user User mode functionality.
 245:../MQXLITE/kernel/task.c ****  *
 246:../MQXLITE/kernel/task.c ****  * \return Task ID of the child task (Success.)
 247:../MQXLITE/kernel/task.c ****  * \return MQX_NULL_TASK_ID
 248:../MQXLITE/kernel/task.c ****  *
 249:../MQXLITE/kernel/task.c ****  * \warning If the child is on another processor, blocks the creator until the
 250:../MQXLITE/kernel/task.c ****  * child is created.
 251:../MQXLITE/kernel/task.c ****  * \warning On failure, _task_set_error() is called to set the the following task
 252:../MQXLITE/kernel/task.c ****  * error codes:
 253:../MQXLITE/kernel/task.c ****  * \n - MQX_INVALID_PROCESSOR_NUMBER (Processor_number is not one of the allowed
 254:../MQXLITE/kernel/task.c ****  * processor numbers.)
 255:../MQXLITE/kernel/task.c ****  * \n - MQX_NO_TASK_TEMPLATE (Template_index is not in the task template list.)
 256:../MQXLITE/kernel/task.c ****  * \n - MQX_OUT_OF_MEMORY (MQX cannot allocate memory for the task data structures.)
 257:../MQXLITE/kernel/task.c ****  * \warning For _task_create(): If the child is on the same processor, preempts
 258:../MQXLITE/kernel/task.c ****  * the creator if the
 259:../MQXLITE/kernel/task.c ****  * child is a higher priority.
 260:../MQXLITE/kernel/task.c ****  *
 261:../MQXLITE/kernel/task.c ****  * \see _task_create
 262:../MQXLITE/kernel/task.c ****  * \see _task_create_blocked
 263:../MQXLITE/kernel/task.c ****  * \see _task_create_at
 264:../MQXLITE/kernel/task.c ****  * \see _usr_task_create
 265:../MQXLITE/kernel/task.c ****  */
 266:../MQXLITE/kernel/task.c **** _task_id _task_create_internal
 267:../MQXLITE/kernel/task.c **** (
 268:../MQXLITE/kernel/task.c ****     _processor_number   processor_number,
 269:../MQXLITE/kernel/task.c ****     _mqx_uint           template_index,
 270:../MQXLITE/kernel/task.c ****     uint_32             parameter,
 271:../MQXLITE/kernel/task.c ****     boolean             user
 272:../MQXLITE/kernel/task.c **** )
 273:../MQXLITE/kernel/task.c **** {
 274:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR   kernel_data;
 275:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR            td_ptr;
 276:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
 277:../MQXLITE/kernel/task.c ****     TASK_TEMPLATE_STRUCT_PTR task_template_ptr;
 278:../MQXLITE/kernel/task.c ****     boolean                  blocking;
 279:../MQXLITE/kernel/task.c **** #endif
 280:../MQXLITE/kernel/task.c ****     _task_id                 result = MQX_NULL_TASK_ID;
 281:../MQXLITE/kernel/task.c **** 
 282:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 283:../MQXLITE/kernel/task.c ****     _KLOGE4(KLOG_task_create, processor_number, template_index, parameter);
 284:../MQXLITE/kernel/task.c **** 
 285:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
 286:../MQXLITE/kernel/task.c ****     if (template_index & SYSTEM_TASK_FLAG)
 287:../MQXLITE/kernel/task.c ****     {
 288:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TEMPLATE_INDEX);
 289:../MQXLITE/kernel/task.c ****         _KLOGX3(KLOG_task_create, MQX_NULL_TASK_ID, MQX_INVALID_TEMPLATE_INDEX);
 290:../MQXLITE/kernel/task.c ****         return MQX_NULL_TASK_ID;
 291:../MQXLITE/kernel/task.c ****     }
 292:../MQXLITE/kernel/task.c **** #endif
 293:../MQXLITE/kernel/task.c **** 
 294:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
 295:../MQXLITE/kernel/task.c ****     if (user)
 296:../MQXLITE/kernel/task.c ****     {
 297:../MQXLITE/kernel/task.c ****         if (kernel_data->INIT.MAX_USER_TASK_COUNT && kernel_data->USR_TASK_RUN_COUNT >= kernel_data
 298:../MQXLITE/kernel/task.c ****         {
 299:../MQXLITE/kernel/task.c ****             _task_set_error(MQX_TOO_MANY_USER_TASKS);
 300:../MQXLITE/kernel/task.c ****             _KLOGX3(KLOG_task_create, MQX_NULL_TASK_ID, MQX_TOO_MANY_USER_TASKS);
 301:../MQXLITE/kernel/task.c ****             return MQX_NULL_TASK_ID;
 302:../MQXLITE/kernel/task.c ****         }
 303:../MQXLITE/kernel/task.c **** 
 304:../MQXLITE/kernel/task.c ****         kernel_data->USR_TASK_RUN_COUNT++;
 305:../MQXLITE/kernel/task.c ****     }
 306:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
 307:../MQXLITE/kernel/task.c ****     if (processor_number == 0)
 308:../MQXLITE/kernel/task.c ****     {
 309:../MQXLITE/kernel/task.c ****         processor_number = (_processor_number) kernel_data->INIT.PROCESSOR_NUMBER;
 310:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
 311:../MQXLITE/kernel/task.c ****     }
 312:../MQXLITE/kernel/task.c ****     else if (processor_number > MQX_MAX_PROCESSOR_NUMBER)
 313:../MQXLITE/kernel/task.c ****     {
 314:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);
 315:../MQXLITE/kernel/task.c ****         _KLOGX3(KLOG_task_create, MQX_NULL_TASK_ID, MQX_INVALID_PROCESSOR_NUMBER);
 316:../MQXLITE/kernel/task.c ****         return MQX_NULL_TASK_ID;
 317:../MQXLITE/kernel/task.c **** #endif
 318:../MQXLITE/kernel/task.c ****     }
 319:../MQXLITE/kernel/task.c ****     else if (processor_number != kernel_data->INIT.PROCESSOR_NUMBER)
 320:../MQXLITE/kernel/task.c ****     {
 321:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
 322:../MQXLITE/kernel/task.c ****         if (user)
 323:../MQXLITE/kernel/task.c ****         {
 324:../MQXLITE/kernel/task.c ****             /* usermode don't support multiprocessor functionality */
 325:../MQXLITE/kernel/task.c ****             _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);
 326:../MQXLITE/kernel/task.c ****             _KLOGX3(KLOG_task_create, MQX_NULL_TASK_ID, MQX_INVALID_PROCESSOR_NUMBER);
 327:../MQXLITE/kernel/task.c ****             return MQX_NULL_TASK_ID;
 328:../MQXLITE/kernel/task.c ****         }
 329:../MQXLITE/kernel/task.c **** #endif
 330:../MQXLITE/kernel/task.c **** 
 331:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
 332:../MQXLITE/kernel/task.c ****         if ( kernel_data->IPC != NULL )
 333:../MQXLITE/kernel/task.c ****         {
 334:../MQXLITE/kernel/task.c **** #if MQX_TASK_CREATION_BLOCKS
 335:../MQXLITE/kernel/task.c ****             blocking = TRUE;
 336:../MQXLITE/kernel/task.c **** #else
 337:../MQXLITE/kernel/task.c ****             blocking = FALSE;
 338:../MQXLITE/kernel/task.c **** #endif
 339:../MQXLITE/kernel/task.c ****             if (template_index == 0)
 340:../MQXLITE/kernel/task.c ****             {
 341:../MQXLITE/kernel/task.c ****                 /* Task template is pointed to by the parameter */
 342:../MQXLITE/kernel/task.c ****                 task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
 343:../MQXLITE/kernel/task.c ****                 (*kernel_data->IPC)(blocking, processor_number,
 344:../MQXLITE/kernel/task.c ****                                 KERNEL_MESSAGES,
 345:../MQXLITE/kernel/task.c ****                                 IPC_TASK_CREATE_WITH_TEMPLATE,
 346:../MQXLITE/kernel/task.c ****                                 8L,
 347:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_TEMPLATE_INDEX,
 348:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_ADDRESS,
 349:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_STACKSIZE,
 350:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_PRIORITY,
 351:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_NAME,
 352:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_ATTRIBUTES,
 353:../MQXLITE/kernel/task.c ****                                 task_template_ptr->CREATION_PARAMETER,
 354:../MQXLITE/kernel/task.c ****                                 task_template_ptr->DEFAULT_TIME_SLICE);
 355:../MQXLITE/kernel/task.c ****             }
 356:../MQXLITE/kernel/task.c ****             else
 357:../MQXLITE/kernel/task.c ****             {
 358:../MQXLITE/kernel/task.c ****                 (*kernel_data->IPC)(blocking, processor_number,
 359:../MQXLITE/kernel/task.c ****                                 KERNEL_MESSAGES, IPC_TASK_CREATE, 3,
 360:../MQXLITE/kernel/task.c ****                                 processor_number, template_index, parameter);
 361:../MQXLITE/kernel/task.c ****             } /* Endif */
 362:../MQXLITE/kernel/task.c ****             return(kernel_data->ACTIVE_PTR->INFO);
 363:../MQXLITE/kernel/task.c ****         }
 364:../MQXLITE/kernel/task.c ****         else
 365:../MQXLITE/kernel/task.c ****         {
 366:../MQXLITE/kernel/task.c **** #endif
 367:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);
 368:../MQXLITE/kernel/task.c ****         _KLOGX3(KLOG_task_create, MQX_NULL_TASK_ID, MQX_INVALID_PROCESSOR_NUMBER);
 369:../MQXLITE/kernel/task.c ****         return MQX_NULL_TASK_ID;
 370:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
 371:../MQXLITE/kernel/task.c ****     } /* Endif */
 372:../MQXLITE/kernel/task.c **** #endif
 373:../MQXLITE/kernel/task.c ****     } /* Endif */
 374:../MQXLITE/kernel/task.c **** 
 375:../MQXLITE/kernel/task.c ****     td_ptr = _task_build_internal(template_index, parameter, NULL, 0, user);
 376:../MQXLITE/kernel/task.c **** 
 377:../MQXLITE/kernel/task.c ****     if (td_ptr != NULL)
 378:../MQXLITE/kernel/task.c ****     {
 379:../MQXLITE/kernel/task.c ****         result = td_ptr->TASK_ID;
 380:../MQXLITE/kernel/task.c ****         _INT_DISABLE();
 381:../MQXLITE/kernel/task.c ****         _task_ready_internal(td_ptr);
 382:../MQXLITE/kernel/task.c ****         _INT_ENABLE();
 383:../MQXLITE/kernel/task.c ****         _CHECK_RUN_SCHEDULER(); /* Let a higher priority task run */
 384:../MQXLITE/kernel/task.c ****     }
 385:../MQXLITE/kernel/task.c **** 
 386:../MQXLITE/kernel/task.c ****     _KLOGX3(KLOG_task_create, result, kernel_data->ACTIVE_PTR->TASK_ERROR_CODE);
 387:../MQXLITE/kernel/task.c **** 
 388:../MQXLITE/kernel/task.c ****     return (result);
 389:../MQXLITE/kernel/task.c **** }
 390:../MQXLITE/kernel/task.c **** 
 391:../MQXLITE/kernel/task.c **** /*!
 392:../MQXLITE/kernel/task.c ****  * \brief Creates the task and make it ready.
 393:../MQXLITE/kernel/task.c ****  *
 394:../MQXLITE/kernel/task.c ****  * \param[in] processor_number One of the following:
 395:../MQXLITE/kernel/task.c ****  * \n - Processor number of the processor where the task is to be created.
 396:../MQXLITE/kernel/task.c ****  * \n - 0 (Create on the local processor.)
 397:../MQXLITE/kernel/task.c ****  * \param[in] template_index   One of the following:
 398:../MQXLITE/kernel/task.c ****  * \n - Index of the task template in the processor's task template list to use
 399:../MQXLITE/kernel/task.c ****  * for the child task.
 400:../MQXLITE/kernel/task.c ****  * \n - 0 (Use the task template that create_parameter defines.)
 401:../MQXLITE/kernel/task.c ****  * \param[in] parameter        Pointer:
 402:../MQXLITE/kernel/task.c ****  * \n - Template_index is not 0 (Pointer to the parameter that MQX passes to the
 403:../MQXLITE/kernel/task.c ****  * child task.)
 404:../MQXLITE/kernel/task.c ****  * \n - Template_index is 0 (Pointer to the task template.)
 405:../MQXLITE/kernel/task.c ****  *
 406:../MQXLITE/kernel/task.c ****  * \return Task ID of the child task (Success.)
 407:../MQXLITE/kernel/task.c ****  * \return MQX_NULL_TASK_ID (Failure.)
 408:../MQXLITE/kernel/task.c ****  *
 409:../MQXLITE/kernel/task.c ****  * \warning If the child is on another processor, blocks the creator until the
 410:../MQXLITE/kernel/task.c ****  * child is created.
 411:../MQXLITE/kernel/task.c ****  * \warning On failure, _task_set_error() is called to set the the following task
 412:../MQXLITE/kernel/task.c ****  * error codes:
 413:../MQXLITE/kernel/task.c ****  * \n - MQX_INVALID_PROCESSOR_NUMBER (Processor_number is not one of the allowed
 414:../MQXLITE/kernel/task.c ****  * processor numbers.)
 415:../MQXLITE/kernel/task.c ****  * \n - MQX_NO_TASK_TEMPLATE (Template_index is not in the task template list.)
 416:../MQXLITE/kernel/task.c ****  * \n - MQX_OUT_OF_MEMORY (MQX cannot allocate memory for the task data structures.)
 417:../MQXLITE/kernel/task.c ****  * \warning If the child is on the same processor, preempts the creator if the
 418:../MQXLITE/kernel/task.c ****  * child is a higher priority.
 419:../MQXLITE/kernel/task.c ****  *
 420:../MQXLITE/kernel/task.c ****  * \see _task_create_blocked
 421:../MQXLITE/kernel/task.c ****  * \see _task_create_at
 422:../MQXLITE/kernel/task.c ****  * \see _task_abort
 423:../MQXLITE/kernel/task.c ****  * \see _task_block
 424:../MQXLITE/kernel/task.c ****  * \see _task_destroy
 425:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter
 426:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter_for
 427:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter
 428:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter_for
 429:../MQXLITE/kernel/task.c ****  * \see _task_ready
 430:../MQXLITE/kernel/task.c ****  * \see _task_set_error
 431:../MQXLITE/kernel/task.c ****  */
 432:../MQXLITE/kernel/task.c **** _task_id _task_create
 433:../MQXLITE/kernel/task.c **** (
 434:../MQXLITE/kernel/task.c ****     _processor_number   processor_number,
 435:../MQXLITE/kernel/task.c ****     _mqx_uint           template_index,
 436:../MQXLITE/kernel/task.c ****     uint_32             parameter
 437:../MQXLITE/kernel/task.c **** )
 438:../MQXLITE/kernel/task.c **** {
 439:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE && MQX_ENABLE_USER_STDAPI
 440:../MQXLITE/kernel/task.c ****     if (MQX_RUN_IN_USER_MODE)
 441:../MQXLITE/kernel/task.c ****     {
 442:../MQXLITE/kernel/task.c ****         return _usr_task_create(processor_number, template_index, parameter);
 443:../MQXLITE/kernel/task.c ****     }
 444:../MQXLITE/kernel/task.c **** #endif
 445:../MQXLITE/kernel/task.c ****     return _task_create_internal(processor_number, template_index, parameter, FALSE);
 446:../MQXLITE/kernel/task.c **** }
 447:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
 448:../MQXLITE/kernel/task.c **** 
 449:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
 450:../MQXLITE/kernel/task.c **** 
 451:../MQXLITE/kernel/task.c **** /*!
 452:../MQXLITE/kernel/task.c ****  * \brief Creates the task and make it ready.
 453:../MQXLITE/kernel/task.c ****  *
 454:../MQXLITE/kernel/task.c ****  * This function is an equivalent to the _task_create() API call but it can be
 455:../MQXLITE/kernel/task.c ****  * executed from within the User task or other code running in the CPU User mode.
 456:../MQXLITE/kernel/task.c ****  * Parameters passed to this function by pointer are required to meet the memory
 457:../MQXLITE/kernel/task.c ****  * protection requirements as described in the parameter list below.
 458:../MQXLITE/kernel/task.c ****  *
 459:../MQXLITE/kernel/task.c ****  * \param[in] processor_number One of the following:
 460:../MQXLITE/kernel/task.c ****  * \n - Processor number of the processor where the task is to be created.
 461:../MQXLITE/kernel/task.c ****  * \n - 0 (Create on the local processor.)
 462:../MQXLITE/kernel/task.c ****  * \param[in] template_index   One of the following:
 463:../MQXLITE/kernel/task.c ****  * \n - Index of the task template in the processor's task template list to use
 464:../MQXLITE/kernel/task.c ****  * for the child task.
 465:../MQXLITE/kernel/task.c ****  * \n - 0 (Use the task template that create_parameter defines.)
 466:../MQXLITE/kernel/task.c ****  * \param[in] parameter        Pointer:
 467:../MQXLITE/kernel/task.c ****  * \n - Template_index is not 0 (Pointer to the parameter that MQX passes to the
 468:../MQXLITE/kernel/task.c ****  * child task.)
 469:../MQXLITE/kernel/task.c ****  * \n - Template_index is 0 (Pointer to the task template.)
 470:../MQXLITE/kernel/task.c ****  *
 471:../MQXLITE/kernel/task.c ****  * \return Task ID of the child task (Success.)
 472:../MQXLITE/kernel/task.c ****  * \return MQX_NULL_TASK_ID (Failure.)
 473:../MQXLITE/kernel/task.c ****  *
 474:../MQXLITE/kernel/task.c ****  * \warning If the child is on another processor, blocks the creator until the
 475:../MQXLITE/kernel/task.c ****  * child is created.
 476:../MQXLITE/kernel/task.c ****  * \warning On failure, _task_set_error() is called to set the the following task
 477:../MQXLITE/kernel/task.c ****  * error codes:
 478:../MQXLITE/kernel/task.c ****  * \n - MQX_INVALID_PROCESSOR_NUMBER (Processor_number is not one of the allowed
 479:../MQXLITE/kernel/task.c ****  * processor numbers.)
 480:../MQXLITE/kernel/task.c ****  * \n - MQX_NO_TASK_TEMPLATE (Template_index is not in the task template list.)
 481:../MQXLITE/kernel/task.c ****  * \n - MQX_OUT_OF_MEMORY (MQX cannot allocate memory for the task data structures.)
 482:../MQXLITE/kernel/task.c ****  * \warning If the child is on the same processor, preempts the creator if the
 483:../MQXLITE/kernel/task.c ****  * child is a higher priority.
 484:../MQXLITE/kernel/task.c ****  *
 485:../MQXLITE/kernel/task.c ****  * \see _task_create
 486:../MQXLITE/kernel/task.c ****  * \see _usr_task_abort
 487:../MQXLITE/kernel/task.c ****  * \see _usr_task_destroy
 488:../MQXLITE/kernel/task.c ****  * \see _usr_task_ready
 489:../MQXLITE/kernel/task.c ****  * \see _usr_task_set_error
 490:../MQXLITE/kernel/task.c ****  */
 491:../MQXLITE/kernel/task.c **** _task_id _usr_task_create
 492:../MQXLITE/kernel/task.c **** (
 493:../MQXLITE/kernel/task.c ****     _processor_number   processor_number,
 494:../MQXLITE/kernel/task.c ****     _mqx_uint           template_index,
 495:../MQXLITE/kernel/task.c ****     uint_32             parameter
 496:../MQXLITE/kernel/task.c **** )
 497:../MQXLITE/kernel/task.c **** {
 498:../MQXLITE/kernel/task.c ****     MQX_API_CALL_PARAMS params =
 499:../MQXLITE/kernel/task.c ****         {(uint_32)processor_number, (uint_32)template_index, (uint_32)parameter, 0, 0};
 500:../MQXLITE/kernel/task.c **** 
 501:../MQXLITE/kernel/task.c ****     return _mqx_api_call(MQX_API_TASK_CREATE, &params);
 502:../MQXLITE/kernel/task.c **** }
 503:../MQXLITE/kernel/task.c **** 
 504:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
 505:../MQXLITE/kernel/task.c **** 
 506:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
 507:../MQXLITE/kernel/task.c **** /*!
 508:../MQXLITE/kernel/task.c ****  * \brief Creates the task, but do not make it ready.
 509:../MQXLITE/kernel/task.c ****  *
 510:../MQXLITE/kernel/task.c ****  * \param[in] processor_number One of the following:
 511:../MQXLITE/kernel/task.c ****  * \n - Processor number of the processor where the task is to be created.
 512:../MQXLITE/kernel/task.c ****  * \n - 0 (Create on the local processor.)
 513:../MQXLITE/kernel/task.c ****  * \param[in] template_index   One of the following:
 514:../MQXLITE/kernel/task.c ****  * \n - Index of the task template in the processor's task template list to use
 515:../MQXLITE/kernel/task.c ****  * for the child task.
 516:../MQXLITE/kernel/task.c ****  * \n - 0 (Use the task template that create_parameter defines.)
 517:../MQXLITE/kernel/task.c ****  * \param[in] parameter        Pointer:
 518:../MQXLITE/kernel/task.c ****  * \n - Template_index is not 0 (Pointer to the parameter that MQX passes to the
 519:../MQXLITE/kernel/task.c ****  * child task.)
 520:../MQXLITE/kernel/task.c ****  * \n - Template_index is 0 (Pointer to the task template.)
 521:../MQXLITE/kernel/task.c ****  *
 522:../MQXLITE/kernel/task.c ****  * \return Task ID of the child task (Success.)
 523:../MQXLITE/kernel/task.c ****  * \return MQX_NULL_TASK_ID (Failure.)
 524:../MQXLITE/kernel/task.c ****  *
 525:../MQXLITE/kernel/task.c ****  * \warning If the child is on another processor, blocks the creator until the
 526:../MQXLITE/kernel/task.c ****  * child is created.
 527:../MQXLITE/kernel/task.c ****  * \warning On failure, _task_set_error() is called to set the the following task
 528:../MQXLITE/kernel/task.c ****  * error codes:
 529:../MQXLITE/kernel/task.c ****  * \n - MQX_INVALID_PROCESSOR_NUMBER (Processor_number is not one of the allowed
 530:../MQXLITE/kernel/task.c ****  * processor numbers.)
 531:../MQXLITE/kernel/task.c ****  * \n - MQX_NO_TASK_TEMPLATE (Template_index is not in the task template list.)
 532:../MQXLITE/kernel/task.c ****  * \n - MQX_OUT_OF_MEMORY (MQX cannot allocate memory for the task data structures.)
 533:../MQXLITE/kernel/task.c ****  * \warning If the child is on the same processor, preempts the creator if the
 534:../MQXLITE/kernel/task.c ****  * child is a higher priority.
 535:../MQXLITE/kernel/task.c ****  *
 536:../MQXLITE/kernel/task.c ****  * \see _task_create
 537:../MQXLITE/kernel/task.c ****  * \see _task_create_at
 538:../MQXLITE/kernel/task.c ****  * \see _task_abort
 539:../MQXLITE/kernel/task.c ****  * \see _task_block
 540:../MQXLITE/kernel/task.c ****  * \see _task_destroy
 541:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter
 542:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter_for
 543:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter
 544:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter_for
 545:../MQXLITE/kernel/task.c ****  * \see _task_ready
 546:../MQXLITE/kernel/task.c ****  * \see _task_set_error
 547:../MQXLITE/kernel/task.c ****  */
 548:../MQXLITE/kernel/task.c **** _task_id _task_create_blocked
 549:../MQXLITE/kernel/task.c **** (
 550:../MQXLITE/kernel/task.c ****     _processor_number   processor_number,
 551:../MQXLITE/kernel/task.c ****     _mqx_uint           template_index,
 552:../MQXLITE/kernel/task.c ****     uint_32             parameter
 553:../MQXLITE/kernel/task.c **** )
 554:../MQXLITE/kernel/task.c **** { /* Body */
 555:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR   kernel_data;
 556:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR            td_ptr;
 557:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
 558:../MQXLITE/kernel/task.c ****     TASK_TEMPLATE_STRUCT_PTR task_template_ptr;
 559:../MQXLITE/kernel/task.c ****     boolean                  blocking;
 560:../MQXLITE/kernel/task.c **** #endif
 561:../MQXLITE/kernel/task.c ****     _task_id                 result;
 562:../MQXLITE/kernel/task.c **** 
 563:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 564:../MQXLITE/kernel/task.c ****     _KLOGE4(KLOG_task_create_block, processor_number, template_index, parameter);
 565:../MQXLITE/kernel/task.c **** 
 566:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
 567:../MQXLITE/kernel/task.c ****     if (template_index & SYSTEM_TASK_FLAG)
 568:../MQXLITE/kernel/task.c ****     {
 569:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TEMPLATE_INDEX);
 570:../MQXLITE/kernel/task.c ****         _KLOGX3(KLOG_task_create_block, MQX_NULL_TASK_ID,
 571:../MQXLITE/kernel/task.c ****                         MQX_INVALID_TEMPLATE_INDEX);
 572:../MQXLITE/kernel/task.c ****         return MQX_NULL_TASK_ID;
 573:../MQXLITE/kernel/task.c ****     } /* Endif */
 574:../MQXLITE/kernel/task.c **** #endif
 575:../MQXLITE/kernel/task.c **** 
 576:../MQXLITE/kernel/task.c ****     if (processor_number == 0)
 577:../MQXLITE/kernel/task.c ****     {
 578:../MQXLITE/kernel/task.c ****         processor_number = (_processor_number) kernel_data->INIT.PROCESSOR_NUMBER;
 579:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
 580:../MQXLITE/kernel/task.c ****     }
 581:../MQXLITE/kernel/task.c ****     else if (processor_number > MQX_MAX_PROCESSOR_NUMBER)
 582:../MQXLITE/kernel/task.c ****     {
 583:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);
 584:../MQXLITE/kernel/task.c ****         _KLOGX3(KLOG_task_create_block, MQX_NULL_TASK_ID,
 585:../MQXLITE/kernel/task.c ****                         MQX_INVALID_PROCESSOR_NUMBER);
 586:../MQXLITE/kernel/task.c ****         return MQX_NULL_TASK_ID;
 587:../MQXLITE/kernel/task.c **** #endif
 588:../MQXLITE/kernel/task.c ****     }
 589:../MQXLITE/kernel/task.c ****     else if (processor_number != kernel_data->INIT.PROCESSOR_NUMBER)
 590:../MQXLITE/kernel/task.c ****     {
 591:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
 592:../MQXLITE/kernel/task.c ****         if ( kernel_data->IPC != NULL )
 593:../MQXLITE/kernel/task.c ****         {
 594:../MQXLITE/kernel/task.c **** #if MQX_TASK_CREATION_BLOCKS
 595:../MQXLITE/kernel/task.c ****             blocking = TRUE;
 596:../MQXLITE/kernel/task.c **** #else
 597:../MQXLITE/kernel/task.c ****             blocking = FALSE;
 598:../MQXLITE/kernel/task.c **** #endif
 599:../MQXLITE/kernel/task.c ****             if (template_index == 0)
 600:../MQXLITE/kernel/task.c ****             {
 601:../MQXLITE/kernel/task.c ****                 /* Task template is pointed to by the parameter */
 602:../MQXLITE/kernel/task.c ****                 task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
 603:../MQXLITE/kernel/task.c ****                 (*kernel_data->IPC)(blocking, processor_number,
 604:../MQXLITE/kernel/task.c ****                                 KERNEL_MESSAGES, IPC_TASK_CREATE_WITH_TEMPLATE, 8L,
 605:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_TEMPLATE_INDEX,
 606:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_ADDRESS,
 607:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_STACKSIZE,
 608:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_PRIORITY,
 609:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_NAME,
 610:../MQXLITE/kernel/task.c ****                                 task_template_ptr->TASK_ATTRIBUTES,
 611:../MQXLITE/kernel/task.c ****                                 task_template_ptr->CREATION_PARAMETER,
 612:../MQXLITE/kernel/task.c ****                                 task_template_ptr->DEFAULT_TIME_SLICE
 613:../MQXLITE/kernel/task.c ****                 );
 614:../MQXLITE/kernel/task.c ****             }
 615:../MQXLITE/kernel/task.c ****             else
 616:../MQXLITE/kernel/task.c ****             {
 617:../MQXLITE/kernel/task.c ****                 (*kernel_data->IPC)(blocking, processor_number,
 618:../MQXLITE/kernel/task.c ****                                 KERNEL_MESSAGES, IPC_TASK_CREATE, 3,
 619:../MQXLITE/kernel/task.c ****                                 processor_number, template_index, parameter);
 620:../MQXLITE/kernel/task.c ****             } /* Endif */
 621:../MQXLITE/kernel/task.c ****             return(kernel_data->ACTIVE_PTR->INFO);
 622:../MQXLITE/kernel/task.c ****         }
 623:../MQXLITE/kernel/task.c ****         else
 624:../MQXLITE/kernel/task.c ****         {
 625:../MQXLITE/kernel/task.c **** #endif
 626:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);
 627:../MQXLITE/kernel/task.c ****         _KLOGX3(KLOG_task_create_block, MQX_NULL_TASK_ID,
 628:../MQXLITE/kernel/task.c ****                         MQX_INVALID_PROCESSOR_NUMBER);
 629:../MQXLITE/kernel/task.c ****         return MQX_NULL_TASK_ID;
 630:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
 631:../MQXLITE/kernel/task.c ****     } /* Endif */
 632:../MQXLITE/kernel/task.c **** #endif
 633:../MQXLITE/kernel/task.c ****     } /* Endif */
 634:../MQXLITE/kernel/task.c **** 
 635:../MQXLITE/kernel/task.c ****     td_ptr = _task_build_internal(template_index, parameter, NULL, 0, FALSE);
 636:../MQXLITE/kernel/task.c ****     if (td_ptr != NULL)
 637:../MQXLITE/kernel/task.c ****     {
 638:../MQXLITE/kernel/task.c ****         td_ptr->STATE = BLOCKED;
 639:../MQXLITE/kernel/task.c ****         result = td_ptr->TASK_ID;
 640:../MQXLITE/kernel/task.c ****     }
 641:../MQXLITE/kernel/task.c ****     else
 642:../MQXLITE/kernel/task.c ****     {
 643:../MQXLITE/kernel/task.c ****         result = MQX_NULL_TASK_ID;
 644:../MQXLITE/kernel/task.c ****     }/* Endif */
 645:../MQXLITE/kernel/task.c **** 
 646:../MQXLITE/kernel/task.c ****     _KLOGX3(KLOG_task_create_block, result,
 647:../MQXLITE/kernel/task.c ****                     kernel_data->ACTIVE_PTR->TASK_ERROR_CODE);
 648:../MQXLITE/kernel/task.c **** 
 649:../MQXLITE/kernel/task.c ****     return (result);
 650:../MQXLITE/kernel/task.c **** 
 651:../MQXLITE/kernel/task.c **** } /* Endbody */
 652:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
 653:../MQXLITE/kernel/task.c **** 
 654:../MQXLITE/kernel/task.c **** /*!
 655:../MQXLITE/kernel/task.c ****  * \brief Creates the task with the stack location specified.
 656:../MQXLITE/kernel/task.c ****  *
 657:../MQXLITE/kernel/task.c ****  * \param[in] processor_number One of the following:
 658:../MQXLITE/kernel/task.c ****  * \n - Processor number of the processor where the task is to be created.
 659:../MQXLITE/kernel/task.c ****  * \n - 0 (Create on the local processor.)
 660:../MQXLITE/kernel/task.c ****  * \param[in] template_index   One of the following:
 661:../MQXLITE/kernel/task.c ****  * \n - Index of the task template in the processor's task template list to use
 662:../MQXLITE/kernel/task.c ****  * for the child task.
 663:../MQXLITE/kernel/task.c ****  * \n - 0 (Use the task template that create_parameter defines.)
 664:../MQXLITE/kernel/task.c ****  * \param[in] parameter        Pointer:
 665:../MQXLITE/kernel/task.c ****  * \n - Template_index is not 0 (Pointer to the parameter that MQX passes to the
 666:../MQXLITE/kernel/task.c ****  * child task.)
 667:../MQXLITE/kernel/task.c ****  * \n - Template_index is 0 (Pointer to the task template.)
 668:../MQXLITE/kernel/task.c ****  * \param[in] stack_ptr        Pointer to where the stack and TD are to be created.
 669:../MQXLITE/kernel/task.c ****  * \param[in] stack_size       The size of the stack.
 670:../MQXLITE/kernel/task.c ****  *
 671:../MQXLITE/kernel/task.c ****  * \return Task ID of the child task (Success.)
 672:../MQXLITE/kernel/task.c ****  * \return MQX_NULL_TASK_ID (Failure.)
 673:../MQXLITE/kernel/task.c ****  *
 674:../MQXLITE/kernel/task.c ****  * \warning If the child is on another processor, blocks the creator until the
 675:../MQXLITE/kernel/task.c ****  * child is created.
 676:../MQXLITE/kernel/task.c ****  * \warning On failure, _task_set_error() is called to set the following task
 677:../MQXLITE/kernel/task.c ****  * error codes:
 678:../MQXLITE/kernel/task.c ****  * \n Task Error Codes
 679:../MQXLITE/kernel/task.c ****  * \n - MQX_INVALID_PROCESSOR_NUMBER (Processor_number is not one of the allowed
 680:../MQXLITE/kernel/task.c ****  * processor numbers.)
 681:../MQXLITE/kernel/task.c ****  * \n - MQX_NO_TASK_TEMPLATE (Template_index is not in the task template list.)
 682:../MQXLITE/kernel/task.c ****  * \n - MQX_OUT_OF_MEMORY (MQX cannot allocate memory for the task data structures.)
 683:../MQXLITE/kernel/task.c ****  *
 684:../MQXLITE/kernel/task.c ****  * \see _task_create
 685:../MQXLITE/kernel/task.c ****  * \see _task_create_blocked
 686:../MQXLITE/kernel/task.c ****  * \see _task_abort
 687:../MQXLITE/kernel/task.c ****  * \see _task_block
 688:../MQXLITE/kernel/task.c ****  * \see _task_destroy
 689:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter
 690:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter_for
 691:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter
 692:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter_for
 693:../MQXLITE/kernel/task.c ****  * \see _task_ready
 694:../MQXLITE/kernel/task.c ****  * \see _task_set_error
 695:../MQXLITE/kernel/task.c ****  */
 696:../MQXLITE/kernel/task.c **** _task_id _task_create_at
 697:../MQXLITE/kernel/task.c **** (
 698:../MQXLITE/kernel/task.c ****     _processor_number   processor_number,
 699:../MQXLITE/kernel/task.c ****     _mqx_uint           template_index,
 700:../MQXLITE/kernel/task.c ****     uint_32             parameter,
 701:../MQXLITE/kernel/task.c ****     pointer             stack_ptr,
 702:../MQXLITE/kernel/task.c ****     _mem_size           stack_size
 703:../MQXLITE/kernel/task.c **** )
 704:../MQXLITE/kernel/task.c **** { /* Body */
 319              		.loc 1 704 0
 320              		.cfi_startproc
 321 0000 90B5     		push	{r4, r7, lr}
 322              	.LCFI6:
 323              		.cfi_def_cfa_offset 12
 324              		.cfi_offset 4, -12
 325              		.cfi_offset 7, -8
 326              		.cfi_offset 14, -4
 327 0002 8BB0     		sub	sp, sp, #44
 328              	.LCFI7:
 329              		.cfi_def_cfa_offset 56
 330 0004 02AF     		add	r7, sp, #8
 331              	.LCFI8:
 332              		.cfi_def_cfa 7, 48
 333 0006 B960     		str	r1, [r7, #8]
 334 0008 7A60     		str	r2, [r7, #4]
 335 000a 3B60     		str	r3, [r7]
 336 000c 3B1C     		mov	r3, r7
 337 000e 0E33     		add	r3, r3, #14
 338 0010 021C     		add	r2, r0, #0
 339 0012 1A80     		strh	r2, [r3]
 705:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR kernel_data;
 706:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR          td_ptr;
 707:../MQXLITE/kernel/task.c ****     _task_id               result;
 708:../MQXLITE/kernel/task.c **** 
 709:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 340              		.loc 1 709 0
 341 0014 2B4B     		ldr	r3, .L26
 342 0016 1B68     		ldr	r3, [r3]
 343 0018 BB61     		str	r3, [r7, #24]
 710:../MQXLITE/kernel/task.c ****     _KLOGE5(KLOG_task_create_at, processor_number, template_index, parameter,
 711:../MQXLITE/kernel/task.c ****                     stack_ptr);
 712:../MQXLITE/kernel/task.c **** 
 713:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
 714:../MQXLITE/kernel/task.c ****     if (template_index & SYSTEM_TASK_FLAG)
 344              		.loc 1 714 0
 345 001a BB68     		ldr	r3, [r7, #8]
 346 001c 002B     		cmp	r3, #0
 347 001e 04DA     		bge	.L18
 715:../MQXLITE/kernel/task.c ****     {
 716:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TEMPLATE_INDEX);
 348              		.loc 1 716 0
 349 0020 1520     		mov	r0, #21
 350 0022 FFF7FEFF 		bl	_task_set_error
 717:../MQXLITE/kernel/task.c ****         _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID,
 718:../MQXLITE/kernel/task.c ****                         MQX_INVALID_TEMPLATE_INDEX);
 719:../MQXLITE/kernel/task.c ****         return MQX_NULL_TASK_ID;
 351              		.loc 1 719 0
 352 0026 0023     		mov	r3, #0
 353 0028 47E0     		b	.L19
 354              	.L18:
 720:../MQXLITE/kernel/task.c ****     } /* Endif */
 721:../MQXLITE/kernel/task.c **** #endif
 722:../MQXLITE/kernel/task.c **** 
 723:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
 724:../MQXLITE/kernel/task.c ****     if (processor_number != 0)
 355              		.loc 1 724 0
 356 002a 3B1C     		mov	r3, r7
 357 002c 0E33     		add	r3, r3, #14
 358 002e 1B88     		ldrh	r3, [r3]
 359 0030 002B     		cmp	r3, #0
 360 0032 04D0     		beq	.L20
 725:../MQXLITE/kernel/task.c ****     {
 726:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_PROCESSOR_NUMBER);
 361              		.loc 1 726 0
 362 0034 1320     		mov	r0, #19
 363 0036 FFF7FEFF 		bl	_task_set_error
 727:../MQXLITE/kernel/task.c ****         _KLOGX3(KLOG_task_create_at, MQX_NULL_TASK_ID,
 728:../MQXLITE/kernel/task.c ****                         MQX_INVALID_PROCESSOR_NUMBER);
 729:../MQXLITE/kernel/task.c ****         return MQX_NULL_TASK_ID;
 364              		.loc 1 729 0
 365 003a 0023     		mov	r3, #0
 366 003c 3DE0     		b	.L19
 367              	.L20:
 730:../MQXLITE/kernel/task.c ****     } /* Endif */
 731:../MQXLITE/kernel/task.c **** #endif
 732:../MQXLITE/kernel/task.c **** 
 733:../MQXLITE/kernel/task.c ****     td_ptr = _task_build_internal(template_index, parameter, stack_ptr, stack_size, FALSE);
 368              		.loc 1 733 0
 369 003e B868     		ldr	r0, [r7, #8]
 370 0040 7968     		ldr	r1, [r7, #4]
 371 0042 3A68     		ldr	r2, [r7]
 372 0044 3B6B     		ldr	r3, [r7, #48]
 373 0046 0024     		mov	r4, #0
 374 0048 0094     		str	r4, [sp]
 375 004a FFF7FEFF 		bl	_task_build_internal
 376 004e 031C     		mov	r3, r0
 377 0050 7B61     		str	r3, [r7, #20]
 734:../MQXLITE/kernel/task.c ****     if (td_ptr != NULL)
 378              		.loc 1 734 0
 379 0052 7B69     		ldr	r3, [r7, #20]
 380 0054 002B     		cmp	r3, #0
 381 0056 28D0     		beq	.L21
 735:../MQXLITE/kernel/task.c ****     {
 736:../MQXLITE/kernel/task.c ****         result = td_ptr->TASK_ID;
 382              		.loc 1 736 0
 383 0058 7B69     		ldr	r3, [r7, #20]
 384 005a DB68     		ldr	r3, [r3, #12]
 385 005c FB61     		str	r3, [r7, #28]
 737:../MQXLITE/kernel/task.c ****         _INT_DISABLE();
 386              		.loc 1 737 0
 387 005e BB69     		ldr	r3, [r7, #24]
 388 0060 DB69     		ldr	r3, [r3, #28]
 389 0062 9B6C     		ldr	r3, [r3, #72]
 390 0064 002B     		cmp	r3, #0
 391 0066 00D1     		bne	.L22
 392              		.loc 1 737 0 is_stmt 0
 393              	@ 737 "../MQXLITE/kernel/task.c" 1
 394 0068 72B6     		cpsid i
 395              	@ 0 "" 2
 396              		.code	16
 397              	.L22:
 398              		.loc 1 737 0
 399 006a BB69     		ldr	r3, [r7, #24]
 400 006c DB69     		ldr	r3, [r3, #28]
 401 006e 9A6C     		ldr	r2, [r3, #72]
 402 0070 0132     		add	r2, r2, #1
 403 0072 9A64     		str	r2, [r3, #72]
 738:../MQXLITE/kernel/task.c ****         _task_ready_internal(td_ptr);
 404              		.loc 1 738 0 is_stmt 1
 405 0074 7B69     		ldr	r3, [r7, #20]
 406 0076 181C     		mov	r0, r3
 407 0078 FFF7FEFF 		bl	_task_ready_internal
 739:../MQXLITE/kernel/task.c ****         _INT_ENABLE();
 408              		.loc 1 739 0
 409 007c BB69     		ldr	r3, [r7, #24]
 410 007e DB69     		ldr	r3, [r3, #28]
 411 0080 9B6C     		ldr	r3, [r3, #72]
 412 0082 002B     		cmp	r3, #0
 413 0084 0ED0     		beq	.L23
 414              		.loc 1 739 0 is_stmt 0
 415 0086 BB69     		ldr	r3, [r7, #24]
 416 0088 DB69     		ldr	r3, [r3, #28]
 417 008a 9A6C     		ldr	r2, [r3, #72]
 418 008c 013A     		sub	r2, r2, #1
 419 008e 9A64     		str	r2, [r3, #72]
 420 0090 9B6C     		ldr	r3, [r3, #72]
 421 0092 002B     		cmp	r3, #0
 422 0094 06D1     		bne	.L23
 423              		.loc 1 739 0
 424 0096 BB69     		ldr	r3, [r7, #24]
 425 0098 1B8B     		ldrh	r3, [r3, #24]
 426 009a 002B     		cmp	r3, #0
 427 009c 01D0     		beq	.L24
 428              		.loc 1 739 0
 429              	@ 739 "../MQXLITE/kernel/task.c" 1
 430 009e 62B6     		cpsie i
 431              	@ 0 "" 2
 432              		.code	16
 433 00a0 00E0     		b	.L23
 434              	.L24:
 435              		.loc 1 739 0
 436              	@ 739 "../MQXLITE/kernel/task.c" 1
 437 00a2 62B6     		cpsie i
 438              	@ 0 "" 2
 439              		.code	16
 440              	.L23:
 740:../MQXLITE/kernel/task.c ****         _CHECK_RUN_SCHEDULER(); /* Let a higher priority task run */
 441              		.loc 1 740 0 is_stmt 1
 442 00a4 FFF7FEFF 		bl	_sched_check_scheduler_internal
 443 00a8 01E0     		b	.L25
 444              	.L21:
 741:../MQXLITE/kernel/task.c ****     }
 742:../MQXLITE/kernel/task.c ****     else
 743:../MQXLITE/kernel/task.c ****     {
 744:../MQXLITE/kernel/task.c ****         result = MQX_NULL_TASK_ID;
 445              		.loc 1 744 0
 446 00aa 0023     		mov	r3, #0
 447 00ac FB61     		str	r3, [r7, #28]
 448              	.L25:
 745:../MQXLITE/kernel/task.c ****     }/* Endif */
 746:../MQXLITE/kernel/task.c **** 
 747:../MQXLITE/kernel/task.c ****     _KLOGX3(KLOG_task_create_at, result,
 748:../MQXLITE/kernel/task.c ****                     kernel_data->ACTIVE_PTR->TASK_ERROR_CODE);
 749:../MQXLITE/kernel/task.c **** 
 750:../MQXLITE/kernel/task.c ****     _tad_task_at_flag++;
 449              		.loc 1 750 0
 450 00ae 064B     		ldr	r3, .L26+4
 451 00b0 1B68     		ldr	r3, [r3]
 452 00b2 5A1C     		add	r2, r3, #1
 453 00b4 044B     		ldr	r3, .L26+4
 454 00b6 1A60     		str	r2, [r3]
 751:../MQXLITE/kernel/task.c **** 
 752:../MQXLITE/kernel/task.c ****     return (result);
 455              		.loc 1 752 0
 456 00b8 FB69     		ldr	r3, [r7, #28]
 457              	.L19:
 753:../MQXLITE/kernel/task.c **** 
 754:../MQXLITE/kernel/task.c **** } /* Endbody */
 458              		.loc 1 754 0
 459 00ba 181C     		mov	r0, r3
 460 00bc BD46     		mov	sp, r7
 461 00be 09B0     		add	sp, sp, #36
 462              		@ sp needed for prologue
 463 00c0 90BD     		pop	{r4, r7, pc}
 464              	.L27:
 465 00c2 C046     		.align	2
 466              	.L26:
 467 00c4 00000000 		.word	_mqx_kernel_data
 468 00c8 00000000 		.word	_tad_task_at_flag
 469              		.cfi_endproc
 470              	.LFE2:
 472              		.section	.text._task_destroy_internal,"ax",%progbits
 473              		.align	2
 474              		.global	_task_destroy_internal
 475              		.code	16
 476              		.thumb_func
 478              	_task_destroy_internal:
 479              	.LFB3:
 755:../MQXLITE/kernel/task.c **** 
 756:../MQXLITE/kernel/task.c **** /*!
 757:../MQXLITE/kernel/task.c ****  * \private
 758:../MQXLITE/kernel/task.c ****  *
 759:../MQXLITE/kernel/task.c ****  * \brief Destroys the task.
 760:../MQXLITE/kernel/task.c ****  *
 761:../MQXLITE/kernel/task.c ****  * \param[in] task_id One of the following:
 762:../MQXLITE/kernel/task.c ****  * \n - Task ID of the task to be destroyed.
 763:../MQXLITE/kernel/task.c ****  * \n - MQX_NULL_TASK_ID (Destroy the calling task.)
 764:../MQXLITE/kernel/task.c ****  * \param[in] user    User mode functionality.
 765:../MQXLITE/kernel/task.c ****  *
 766:../MQXLITE/kernel/task.c ****  * \return MQX_OK
 767:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_TASK_ID
 768:../MQXLITE/kernel/task.c ****  *
 769:../MQXLITE/kernel/task.c ****  * \see _task_destroy
 770:../MQXLITE/kernel/task.c ****  * \see _usr_task_destroy
 771:../MQXLITE/kernel/task.c ****  */
 772:../MQXLITE/kernel/task.c **** _mqx_uint _task_destroy_internal
 773:../MQXLITE/kernel/task.c **** (
 774:../MQXLITE/kernel/task.c ****     _task_id task_id,
 775:../MQXLITE/kernel/task.c ****     boolean  user
 776:../MQXLITE/kernel/task.c **** )
 777:../MQXLITE/kernel/task.c **** {
 480              		.loc 1 777 0
 481              		.cfi_startproc
 482 0000 80B5     		push	{r7, lr}
 483              	.LCFI9:
 484              		.cfi_def_cfa_offset 8
 485              		.cfi_offset 7, -8
 486              		.cfi_offset 14, -4
 487 0002 94B0     		sub	sp, sp, #80
 488              	.LCFI10:
 489              		.cfi_def_cfa_offset 88
 490 0004 00AF     		add	r7, sp, #0
 491              	.LCFI11:
 492              		.cfi_def_cfa_register 7
 493 0006 7860     		str	r0, [r7, #4]
 494 0008 3960     		str	r1, [r7]
 778:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR   kernel_data;
 779:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR            victim_ptr;
 780:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR            td_ptr;
 781:../MQXLITE/kernel/task.c ****     _processor_number        processor;
 782:../MQXLITE/kernel/task.c ****     uint_16                  task_num;
 783:../MQXLITE/kernel/task.c **** 
 784:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 495              		.loc 1 784 0
 496 000a 9B4B     		ldr	r3, .L44
 497 000c 1B68     		ldr	r3, [r3]
 498 000e BB64     		str	r3, [r7, #72]
 785:../MQXLITE/kernel/task.c ****     _KLOGE2(KLOG_task_destroy, task_id);
 786:../MQXLITE/kernel/task.c **** 
 787:../MQXLITE/kernel/task.c ****     if (task_id != MQX_NULL_TASK_ID) {
 499              		.loc 1 787 0
 500 0010 7B68     		ldr	r3, [r7, #4]
 501 0012 002B     		cmp	r3, #0
 502 0014 10D0     		beq	.L29
 788:../MQXLITE/kernel/task.c ****         processor = PROC_NUMBER_FROM_TASKID(task_id);
 503              		.loc 1 788 0
 504 0016 7B68     		ldr	r3, [r7, #4]
 505 0018 1A0C     		lsr	r2, r3, #16
 506 001a 3B1C     		mov	r3, r7
 507 001c 4633     		add	r3, r3, #70
 508 001e 1A80     		strh	r2, [r3]
 789:../MQXLITE/kernel/task.c ****         if (processor != (_processor_number)kernel_data->INIT.PROCESSOR_NUMBER ) {
 509              		.loc 1 789 0
 510 0020 BA6C     		ldr	r2, [r7, #72]
 511 0022 A823     		mov	r3, #168
 512 0024 5B00     		lsl	r3, r3, #1
 513 0026 D358     		ldr	r3, [r2, r3]
 514 0028 9BB2     		uxth	r3, r3
 515 002a 3A1C     		mov	r2, r7
 516 002c 4632     		add	r2, r2, #70
 517 002e 1288     		ldrh	r2, [r2]
 518 0030 9A42     		cmp	r2, r3
 519 0032 01D0     		beq	.L29
 790:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
 791:../MQXLITE/kernel/task.c ****             if ( kernel_data->IPC != NULL ) {
 792:../MQXLITE/kernel/task.c ****                 _KLOGX2(KLOG_task_destroy, MQX_OK);
 793:../MQXLITE/kernel/task.c ****                 return( (*kernel_data->IPC)(FALSE, processor,
 794:../MQXLITE/kernel/task.c ****                                 KERNEL_MESSAGES, IPC_TASK_DESTROY, 1, (_mqx_uint)task_id) );
 795:../MQXLITE/kernel/task.c ****             } else {
 796:../MQXLITE/kernel/task.c **** #endif
 797:../MQXLITE/kernel/task.c ****                 _KLOGX2(KLOG_task_destroy, MQX_INVALID_TASK_ID);
 798:../MQXLITE/kernel/task.c ****                 return(MQX_INVALID_TASK_ID);
 520              		.loc 1 798 0
 521 0034 1223     		mov	r3, #18
 522 0036 1AE1     		b	.L30
 523              	.L29:
 799:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
 800:../MQXLITE/kernel/task.c ****             } /* Endif */
 801:../MQXLITE/kernel/task.c **** #endif
 802:../MQXLITE/kernel/task.c ****         }/* Endif */
 803:../MQXLITE/kernel/task.c ****     }/* Endif */
 804:../MQXLITE/kernel/task.c **** 
 805:../MQXLITE/kernel/task.c ****     victim_ptr = (TD_STRUCT_PTR)_task_get_td(task_id);
 524              		.loc 1 805 0
 525 0038 7B68     		ldr	r3, [r7, #4]
 526 003a 181C     		mov	r0, r3
 527 003c FFF7FEFF 		bl	_task_get_td
 528 0040 031C     		mov	r3, r0
 529 0042 3B64     		str	r3, [r7, #64]
 806:../MQXLITE/kernel/task.c **** 
 807:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
 808:../MQXLITE/kernel/task.c ****     /* check template for correct user task parameters */
 809:../MQXLITE/kernel/task.c ****     if (user) {
 810:../MQXLITE/kernel/task.c ****         if (!(victim_ptr->FLAGS & MQX_USER_TASK)) {
 811:../MQXLITE/kernel/task.c ****             return MQX_INVALID_TASK_ID;
 812:../MQXLITE/kernel/task.c ****         }
 813:../MQXLITE/kernel/task.c ****     }
 814:../MQXLITE/kernel/task.c **** #endif
 815:../MQXLITE/kernel/task.c **** 
 816:../MQXLITE/kernel/task.c ****     /* Make sure we are not trying to destroy the system task */
 817:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
 818:../MQXLITE/kernel/task.c ****     if ((victim_ptr == NULL) || (victim_ptr == SYSTEM_TD_PTR(kernel_data))) {
 530              		.loc 1 818 0
 531 0044 3B6C     		ldr	r3, [r7, #64]
 532 0046 002B     		cmp	r3, #0
 533 0048 05D0     		beq	.L31
 534              		.loc 1 818 0 is_stmt 0
 535 004a BB6C     		ldr	r3, [r7, #72]
 536 004c 1A1C     		mov	r2, r3
 537 004e 4832     		add	r2, r2, #72
 538 0050 3B6C     		ldr	r3, [r7, #64]
 539 0052 9A42     		cmp	r2, r3
 540 0054 01D1     		bne	.L32
 541              	.L31:
 819:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_destroy, MQX_INVALID_TASK_ID);
 820:../MQXLITE/kernel/task.c ****         return MQX_INVALID_TASK_ID;
 542              		.loc 1 820 0 is_stmt 1
 543 0056 1223     		mov	r3, #18
 544 0058 09E1     		b	.L30
 545              	.L32:
 821:../MQXLITE/kernel/task.c ****     } /* Endif */
 822:../MQXLITE/kernel/task.c **** #endif
 823:../MQXLITE/kernel/task.c **** 
 824:../MQXLITE/kernel/task.c ****     /* First, serialize task creation/destruction */
 825:../MQXLITE/kernel/task.c ****     _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 546              		.loc 1 825 0
 547 005a BB6C     		ldr	r3, [r7, #72]
 548 005c F433     		add	r3, r3, #244
 549 005e 181C     		mov	r0, r3
 550 0060 FFF7FEFF 		bl	_lwsem_wait
 826:../MQXLITE/kernel/task.c **** 
 827:../MQXLITE/kernel/task.c ****     _int_disable();
 551              		.loc 1 827 0
 552 0064 FFF7FEFF 		bl	_int_disable
 828:../MQXLITE/kernel/task.c **** 
 829:../MQXLITE/kernel/task.c ****     if (victim_ptr->STATE == DYING) {
 553              		.loc 1 829 0
 554 0068 3B6C     		ldr	r3, [r7, #64]
 555 006a 9B68     		ldr	r3, [r3, #8]
 556 006c 092B     		cmp	r3, #9
 557 006e 08D1     		bne	.L33
 830:../MQXLITE/kernel/task.c ****         /* Task is already being destroyed */
 831:../MQXLITE/kernel/task.c ****         /* SPR P171-0021-01 re-enable interrupts */
 832:../MQXLITE/kernel/task.c ****         _int_enable();
 558              		.loc 1 832 0
 559 0070 FFF7FEFF 		bl	_int_enable
 833:../MQXLITE/kernel/task.c ****         /* END SPR */
 834:../MQXLITE/kernel/task.c ****         _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 560              		.loc 1 834 0
 561 0074 BB6C     		ldr	r3, [r7, #72]
 562 0076 F433     		add	r3, r3, #244
 563 0078 181C     		mov	r0, r3
 564 007a FFF7FEFF 		bl	_lwsem_post
 835:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_destroy, MQX_OK);
 836:../MQXLITE/kernel/task.c ****         return MQX_OK;
 565              		.loc 1 836 0
 566 007e 0023     		mov	r3, #0
 567 0080 F5E0     		b	.L30
 568              	.L33:
 837:../MQXLITE/kernel/task.c ****     } /* Endif */
 838:../MQXLITE/kernel/task.c **** 
 839:../MQXLITE/kernel/task.c ****     /* remove the victim from any queues it may be in. */
 840:../MQXLITE/kernel/task.c ****     if (victim_ptr->STATE == READY) {
 569              		.loc 1 840 0
 570 0082 3B6C     		ldr	r3, [r7, #64]
 571 0084 9B68     		ldr	r3, [r3, #8]
 572 0086 022B     		cmp	r3, #2
 573 0088 11D1     		bne	.L34
 841:../MQXLITE/kernel/task.c ****         if (victim_ptr != kernel_data->ACTIVE_PTR) {
 574              		.loc 1 841 0
 575 008a BB6C     		ldr	r3, [r7, #72]
 576 008c DA69     		ldr	r2, [r3, #28]
 577 008e 3B6C     		ldr	r3, [r7, #64]
 578 0090 9A42     		cmp	r2, r3
 579 0092 50D0     		beq	.L35
 580              	.LBB5:
 842:../MQXLITE/kernel/task.c ****             /* Remove other task from ready queue */
 843:../MQXLITE/kernel/task.c ****             _QUEUE_UNLINK(victim_ptr);
 581              		.loc 1 843 0
 582 0094 3B6C     		ldr	r3, [r7, #64]
 583 0096 5B68     		ldr	r3, [r3, #4]
 584 0098 FB63     		str	r3, [r7, #60]
 585 009a 3B6C     		ldr	r3, [r7, #64]
 586 009c 1B68     		ldr	r3, [r3]
 587 009e BB63     		str	r3, [r7, #56]
 588 00a0 FB6B     		ldr	r3, [r7, #60]
 589 00a2 BA6B     		ldr	r2, [r7, #56]
 590 00a4 1A60     		str	r2, [r3]
 591 00a6 BB6B     		ldr	r3, [r7, #56]
 592 00a8 FA6B     		ldr	r2, [r7, #60]
 593 00aa 5A60     		str	r2, [r3, #4]
 594 00ac 43E0     		b	.L35
 595              	.L34:
 596              	.LBE5:
 844:../MQXLITE/kernel/task.c ****         } /* Endif */
 845:../MQXLITE/kernel/task.c ****     } else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q) {
 597              		.loc 1 845 0
 598 00ae 3B6C     		ldr	r3, [r7, #64]
 599 00b0 9A68     		ldr	r2, [r3, #8]
 600 00b2 8023     		mov	r3, #128
 601 00b4 5B00     		lsl	r3, r3, #1
 602 00b6 1340     		and	r3, r2
 603 00b8 25D0     		beq	.L36
 846:../MQXLITE/kernel/task.c ****         /* Remove from time queue (uses NEXT, PREV field) */
 847:../MQXLITE/kernel/task.c ****         _TIME_DEQUEUE(victim_ptr, kernel_data);
 604              		.loc 1 847 0
 605 00ba 3B6C     		ldr	r3, [r7, #64]
 606 00bc 9A68     		ldr	r2, [r3, #8]
 607 00be 8023     		mov	r3, #128
 608 00c0 5B00     		lsl	r3, r3, #1
 609 00c2 1340     		and	r3, r2
 610 00c4 37D0     		beq	.L35
 611              	.LBB6:
 612              		.loc 1 847 0 is_stmt 0
 613 00c6 3B6C     		ldr	r3, [r7, #64]
 614 00c8 5B68     		ldr	r3, [r3, #4]
 615 00ca 7B63     		str	r3, [r7, #52]
 616 00cc 3B6C     		ldr	r3, [r7, #64]
 617 00ce 1B68     		ldr	r3, [r3]
 618 00d0 3B63     		str	r3, [r7, #48]
 619 00d2 7B6B     		ldr	r3, [r7, #52]
 620 00d4 3A6B     		ldr	r2, [r7, #48]
 621 00d6 1A60     		str	r2, [r3]
 622 00d8 3B6B     		ldr	r3, [r7, #48]
 623 00da 7A6B     		ldr	r2, [r7, #52]
 624 00dc 5A60     		str	r2, [r3, #4]
 625              	.LBE6:
 626 00de BB6C     		ldr	r3, [r7, #72]
 627 00e0 2933     		add	r3, r3, #41
 628 00e2 FF33     		add	r3, r3, #255
 629 00e4 1A89     		ldrh	r2, [r3, #8]
 630 00e6 013A     		sub	r2, r2, #1
 631 00e8 92B2     		uxth	r2, r2
 632 00ea 1A81     		strh	r2, [r3, #8]
 633 00ec 3B6C     		ldr	r3, [r7, #64]
 634 00ee 9A68     		ldr	r2, [r3, #8]
 635 00f0 624B     		ldr	r3, .L44+4
 636 00f2 1A40     		and	r2, r3
 637 00f4 3B6C     		ldr	r3, [r7, #64]
 638 00f6 9A60     		str	r2, [r3, #8]
 639 00f8 3B6C     		ldr	r3, [r7, #64]
 640 00fa 9B68     		ldr	r3, [r3, #8]
 641 00fc 0322     		mov	r2, #3
 642 00fe 1A43     		orr	r2, r3
 643 0100 3B6C     		ldr	r3, [r7, #64]
 644 0102 9A60     		str	r2, [r3, #8]
 645 0104 17E0     		b	.L35
 646              	.L36:
 848:../MQXLITE/kernel/task.c ****     } else if (victim_ptr->STATE & TD_IS_ON_QUEUE) {
 647              		.loc 1 848 0 is_stmt 1
 648 0106 3B6C     		ldr	r3, [r7, #64]
 649 0108 9A68     		ldr	r2, [r3, #8]
 650 010a 8023     		mov	r3, #128
 651 010c 9B00     		lsl	r3, r3, #2
 652 010e 1340     		and	r3, r2
 653 0110 11D0     		beq	.L35
 654              	.LBB7:
 849:../MQXLITE/kernel/task.c ****         /*
 850:../MQXLITE/kernel/task.c ****          * Remove from queue, where suspended
 851:../MQXLITE/kernel/task.c ****          * eg, MUTEX_BLOCKED, IO_BLOCKED, TASKQ_BLOCKED
 852:../MQXLITE/kernel/task.c ****          * (uses NEXT, PREV field)
 853:../MQXLITE/kernel/task.c ****          */
 854:../MQXLITE/kernel/task.c ****         _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
 655              		.loc 1 854 0
 656 0112 3B6C     		ldr	r3, [r7, #64]
 657 0114 5B68     		ldr	r3, [r3, #4]
 658 0116 FB62     		str	r3, [r7, #44]
 659 0118 3B6C     		ldr	r3, [r7, #64]
 660 011a 1B68     		ldr	r3, [r3]
 661 011c BB62     		str	r3, [r7, #40]
 662 011e FB6A     		ldr	r3, [r7, #44]
 663 0120 BA6A     		ldr	r2, [r7, #40]
 664 0122 1A60     		str	r2, [r3]
 665 0124 BB6A     		ldr	r3, [r7, #40]
 666 0126 FA6A     		ldr	r2, [r7, #44]
 667 0128 5A60     		str	r2, [r3, #4]
 668              	.LBE7:
 669 012a 3B6C     		ldr	r3, [r7, #64]
 670 012c DB6A     		ldr	r3, [r3, #44]
 671 012e 1A89     		ldrh	r2, [r3, #8]
 672 0130 013A     		sub	r2, r2, #1
 673 0132 92B2     		uxth	r2, r2
 674 0134 1A81     		strh	r2, [r3, #8]
 675              	.L35:
 855:../MQXLITE/kernel/task.c ****     } /* Endif */
 856:../MQXLITE/kernel/task.c **** 
 857:../MQXLITE/kernel/task.c ****     if (victim_ptr->STATE & TD_IS_ON_AUX_QUEUE) {
 676              		.loc 1 857 0
 677 0136 3B6C     		ldr	r3, [r7, #64]
 678 0138 9A68     		ldr	r2, [r3, #8]
 679 013a 8023     		mov	r3, #128
 680 013c DB00     		lsl	r3, r3, #3
 681 013e 1340     		and	r3, r2
 682 0140 13D0     		beq	.L37
 683              	.LBB8:
 858:../MQXLITE/kernel/task.c ****         /*
 859:../MQXLITE/kernel/task.c ****          * Remove from queue, where suspended
 860:../MQXLITE/kernel/task.c ****          * eg, LWSEM_BLOCKED
 861:../MQXLITE/kernel/task.c ****          * (uses AUX_QUEUE field)
 862:../MQXLITE/kernel/task.c ****          */
 863:../MQXLITE/kernel/task.c ****         _QUEUE_REMOVE(victim_ptr->INFO, &victim_ptr->AUX_QUEUE);
 684              		.loc 1 863 0
 685 0142 3B6C     		ldr	r3, [r7, #64]
 686 0144 3033     		add	r3, r3, #48
 687 0146 5B68     		ldr	r3, [r3, #4]
 688 0148 7B62     		str	r3, [r7, #36]
 689 014a 3B6C     		ldr	r3, [r7, #64]
 690 014c 3033     		add	r3, r3, #48
 691 014e 1B68     		ldr	r3, [r3]
 692 0150 3B62     		str	r3, [r7, #32]
 693 0152 7B6A     		ldr	r3, [r7, #36]
 694 0154 3A6A     		ldr	r2, [r7, #32]
 695 0156 1A60     		str	r2, [r3]
 696 0158 3B6A     		ldr	r3, [r7, #32]
 697 015a 7A6A     		ldr	r2, [r7, #36]
 698 015c 5A60     		str	r2, [r3, #4]
 699              	.LBE8:
 700 015e 3B6C     		ldr	r3, [r7, #64]
 701 0160 DB6A     		ldr	r3, [r3, #44]
 702 0162 1A89     		ldrh	r2, [r3, #8]
 703 0164 013A     		sub	r2, r2, #1
 704 0166 92B2     		uxth	r2, r2
 705 0168 1A81     		strh	r2, [r3, #8]
 706              	.L37:
 864:../MQXLITE/kernel/task.c ****     } /* Endif */
 865:../MQXLITE/kernel/task.c **** 
 866:../MQXLITE/kernel/task.c ****     victim_ptr->STATE   = DYING;
 707              		.loc 1 866 0
 708 016a 3B6C     		ldr	r3, [r7, #64]
 709 016c 0922     		mov	r2, #9
 710 016e 9A60     		str	r2, [r3, #8]
 867:../MQXLITE/kernel/task.c **** 
 868:../MQXLITE/kernel/task.c **** #if MQXCFG_ENABLE_FP && PSP_HAS_FPU
 869:../MQXLITE/kernel/task.c ****     /* Stop Floating point context monitoring */
 870:../MQXLITE/kernel/task.c ****     if (kernel_data->FP_ACTIVE_PTR == victim_ptr) {
 871:../MQXLITE/kernel/task.c ****         kernel_data->FP_ACTIVE_PTR = NULL;
 872:../MQXLITE/kernel/task.c ****     }/* Endif */
 873:../MQXLITE/kernel/task.c **** #endif
 874:../MQXLITE/kernel/task.c **** 
 875:../MQXLITE/kernel/task.c **** #if MQXCFG_ENABLE_DSP && PSP_HAS_DSP
 876:../MQXLITE/kernel/task.c ****     /* Stop DSP context monitoring */
 877:../MQXLITE/kernel/task.c ****     if (kernel_data->DSP_ACTIVE_PTR == victim_ptr) {
 878:../MQXLITE/kernel/task.c ****         kernel_data->DSP_ACTIVE_PTR = NULL;
 879:../MQXLITE/kernel/task.c ****     }/* Endif */
 880:../MQXLITE/kernel/task.c **** #endif
 881:../MQXLITE/kernel/task.c **** 
 882:../MQXLITE/kernel/task.c ****     _int_enable();
 711              		.loc 1 882 0
 712 0170 FFF7FEFF 		bl	_int_enable
 713              	.LBB9:
 883:../MQXLITE/kernel/task.c **** 
 884:../MQXLITE/kernel/task.c **** #if MQX_COMPONENT_DESTRUCTION
 885:../MQXLITE/kernel/task.c ****     {
 886:../MQXLITE/kernel/task.c ****         _mqx_uint i;
 887:../MQXLITE/kernel/task.c ****         for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
 714              		.loc 1 887 0
 715 0174 0023     		mov	r3, #0
 716 0176 FB64     		str	r3, [r7, #76]
 717 0178 11E0     		b	.L38
 718              	.L40:
 888:../MQXLITE/kernel/task.c ****             if (kernel_data->COMPONENT_CLEANUP[i] != NULL) {
 719              		.loc 1 888 0
 720 017a BB6C     		ldr	r3, [r7, #72]
 721 017c FA6C     		ldr	r2, [r7, #76]
 722 017e 7432     		add	r2, r2, #116
 723 0180 9200     		lsl	r2, r2, #2
 724 0182 D358     		ldr	r3, [r2, r3]
 725 0184 002B     		cmp	r3, #0
 726 0186 07D0     		beq	.L39
 889:../MQXLITE/kernel/task.c ****                 (*kernel_data->COMPONENT_CLEANUP[i])(victim_ptr);
 727              		.loc 1 889 0
 728 0188 BB6C     		ldr	r3, [r7, #72]
 729 018a FA6C     		ldr	r2, [r7, #76]
 730 018c 7432     		add	r2, r2, #116
 731 018e 9200     		lsl	r2, r2, #2
 732 0190 D358     		ldr	r3, [r2, r3]
 733 0192 3A6C     		ldr	r2, [r7, #64]
 734 0194 101C     		mov	r0, r2
 735 0196 9847     		blx	r3
 736              	.L39:
 887:../MQXLITE/kernel/task.c ****         for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
 737              		.loc 1 887 0
 738 0198 FB6C     		ldr	r3, [r7, #76]
 739 019a 0133     		add	r3, r3, #1
 740 019c FB64     		str	r3, [r7, #76]
 741              	.L38:
 887:../MQXLITE/kernel/task.c ****         for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i) {
 742              		.loc 1 887 0 is_stmt 0
 743 019e FB6C     		ldr	r3, [r7, #76]
 744 01a0 0F2B     		cmp	r3, #15
 745 01a2 EAD9     		bls	.L40
 746              	.LBE9:
 890:../MQXLITE/kernel/task.c ****             } /* Endif */
 891:../MQXLITE/kernel/task.c ****         } /* Endfor */
 892:../MQXLITE/kernel/task.c ****     }
 893:../MQXLITE/kernel/task.c **** #endif
 894:../MQXLITE/kernel/task.c **** 
 895:../MQXLITE/kernel/task.c **** 
 896:../MQXLITE/kernel/task.c ****     /* Save the task number */
 897:../MQXLITE/kernel/task.c ****     task_num = TASK_NUMBER_FROM_TASKID(victim_ptr->TASK_ID);
 747              		.loc 1 897 0 is_stmt 1
 748 01a4 3B6C     		ldr	r3, [r7, #64]
 749 01a6 DA68     		ldr	r2, [r3, #12]
 750 01a8 3B1C     		mov	r3, r7
 751 01aa 1E33     		add	r3, r3, #30
 752 01ac 1A80     		strh	r2, [r3]
 898:../MQXLITE/kernel/task.c **** 
 899:../MQXLITE/kernel/task.c ****     td_ptr = kernel_data->ACTIVE_PTR;
 753              		.loc 1 899 0
 754 01ae BB6C     		ldr	r3, [r7, #72]
 755 01b0 DB69     		ldr	r3, [r3, #28]
 756 01b2 BB61     		str	r3, [r7, #24]
 900:../MQXLITE/kernel/task.c **** 
 901:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
 902:../MQXLITE/kernel/task.c ****     if ((victim_ptr->FLAGS & TASK_STACK_PREALLOCATED) == 0) {
 903:../MQXLITE/kernel/task.c ****         pointer block_ptr = _mem_get_next_block_internal(victim_ptr, NULL);
 904:../MQXLITE/kernel/task.c ****         while (block_ptr != NULL) {
 905:../MQXLITE/kernel/task.c ****             pointer next_block_ptr = _mem_get_next_block_internal(victim_ptr, block_ptr);
 906:../MQXLITE/kernel/task.c ****             if (td_ptr != victim_ptr) {
 907:../MQXLITE/kernel/task.c ****                 _mem_transfer_internal(block_ptr, SYSTEM_TD_PTR(kernel_data));
 908:../MQXLITE/kernel/task.c ****             } /* Endif */
 909:../MQXLITE/kernel/task.c ****             if (block_ptr != victim_ptr) {
 910:../MQXLITE/kernel/task.c ****                 _mem_free(block_ptr);
 911:../MQXLITE/kernel/task.c ****             } /* Endif */
 912:../MQXLITE/kernel/task.c ****             block_ptr = next_block_ptr;
 913:../MQXLITE/kernel/task.c ****         } /* Endwhile */
 914:../MQXLITE/kernel/task.c ****     } /* Endif */
 915:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
 916:../MQXLITE/kernel/task.c **** 
 917:../MQXLITE/kernel/task.c ****     victim_ptr->TASK_ID = TASK_ID_DYING;
 757              		.loc 1 917 0
 758 01b4 3B6C     		ldr	r3, [r7, #64]
 759 01b6 8022     		mov	r2, #128
 760 01b8 1206     		lsl	r2, r2, #24
 761 01ba DA60     		str	r2, [r3, #12]
 918:../MQXLITE/kernel/task.c **** 
 919:../MQXLITE/kernel/task.c ****     /* Start SPR P171-0017-01                */
 920:../MQXLITE/kernel/task.c ****     /* Remove td from linked list of all tds */
 921:../MQXLITE/kernel/task.c ****     if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) == 1) {
 762              		.loc 1 921 0
 763 01bc BB6C     		ldr	r3, [r7, #72]
 764 01be C833     		add	r3, r3, #200
 765 01c0 1B89     		ldrh	r3, [r3, #8]
 766 01c2 012B     		cmp	r3, #1
 767 01c4 08D1     		bne	.L41
 922:../MQXLITE/kernel/task.c ****         /* Destroying the last task */
 923:../MQXLITE/kernel/task.c ****         kernel_data->TASK_NUMBER   = 1;
 768              		.loc 1 923 0
 769 01c6 BA6C     		ldr	r2, [r7, #72]
 770 01c8 D423     		mov	r3, #212
 771 01ca 0121     		mov	r1, #1
 772 01cc D150     		str	r1, [r2, r3]
 924:../MQXLITE/kernel/task.c ****         kernel_data->INSERT_TD_PTR = NULL;
 773              		.loc 1 924 0
 774 01ce BA6C     		ldr	r2, [r7, #72]
 775 01d0 D823     		mov	r3, #216
 776 01d2 0021     		mov	r1, #0
 777 01d4 D150     		str	r1, [r2, r3]
 778 01d6 14E0     		b	.L42
 779              	.L41:
 925:../MQXLITE/kernel/task.c ****     } else if (kernel_data->TASK_NUMBER > task_num) {
 780              		.loc 1 925 0
 781 01d8 BA6C     		ldr	r2, [r7, #72]
 782 01da D423     		mov	r3, #212
 783 01dc D258     		ldr	r2, [r2, r3]
 784 01de 3B1C     		mov	r3, r7
 785 01e0 1E33     		add	r3, r3, #30
 786 01e2 1B88     		ldrh	r3, [r3]
 787 01e4 9A42     		cmp	r2, r3
 788 01e6 0CD9     		bls	.L42
 926:../MQXLITE/kernel/task.c ****         kernel_data->TASK_NUMBER   = task_num;
 789              		.loc 1 926 0
 790 01e8 3B1C     		mov	r3, r7
 791 01ea 1E33     		add	r3, r3, #30
 792 01ec 1988     		ldrh	r1, [r3]
 793 01ee BA6C     		ldr	r2, [r7, #72]
 794 01f0 D423     		mov	r3, #212
 795 01f2 D150     		str	r1, [r2, r3]
 927:../MQXLITE/kernel/task.c ****         kernel_data->INSERT_TD_PTR =
 928:../MQXLITE/kernel/task.c ****                         (TD_STRUCT_PTR)((uchar_ptr)victim_ptr->TD_LIST_INFO.PREV -
 796              		.loc 1 928 0
 797 01f4 3B6C     		ldr	r3, [r7, #64]
 798 01f6 1B6E     		ldr	r3, [r3, #96]
 799 01f8 191C     		mov	r1, r3
 800 01fa 5C39     		sub	r1, r1, #92
 927:../MQXLITE/kernel/task.c ****         kernel_data->INSERT_TD_PTR =
 801              		.loc 1 927 0
 802 01fc BA6C     		ldr	r2, [r7, #72]
 803 01fe D823     		mov	r3, #216
 804 0200 D150     		str	r1, [r2, r3]
 805              	.L42:
 806              	.LBB10:
 929:../MQXLITE/kernel/task.c ****                                         FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
 930:../MQXLITE/kernel/task.c ****     } /* Endif */
 931:../MQXLITE/kernel/task.c ****     _QUEUE_REMOVE(&kernel_data->TD_LIST, &victim_ptr->TD_LIST_INFO);
 807              		.loc 1 931 0
 808 0202 3B6C     		ldr	r3, [r7, #64]
 809 0204 5C33     		add	r3, r3, #92
 810 0206 5B68     		ldr	r3, [r3, #4]
 811 0208 7B61     		str	r3, [r7, #20]
 812 020a 3B6C     		ldr	r3, [r7, #64]
 813 020c 5C33     		add	r3, r3, #92
 814 020e 1B68     		ldr	r3, [r3]
 815 0210 3B61     		str	r3, [r7, #16]
 816 0212 7B69     		ldr	r3, [r7, #20]
 817 0214 3A69     		ldr	r2, [r7, #16]
 818 0216 1A60     		str	r2, [r3]
 819 0218 3B69     		ldr	r3, [r7, #16]
 820 021a 7A69     		ldr	r2, [r7, #20]
 821 021c 5A60     		str	r2, [r3, #4]
 822              	.LBE10:
 823 021e BB6C     		ldr	r3, [r7, #72]
 824 0220 C833     		add	r3, r3, #200
 825 0222 1A89     		ldrh	r2, [r3, #8]
 826 0224 013A     		sub	r2, r2, #1
 827 0226 92B2     		uxth	r2, r2
 828 0228 1A81     		strh	r2, [r3, #8]
 932:../MQXLITE/kernel/task.c ****     /* End SPR P171-0017-01                  */
 933:../MQXLITE/kernel/task.c **** 
 934:../MQXLITE/kernel/task.c ****     /* Free up create/destroy for other tasks */
 935:../MQXLITE/kernel/task.c ****     _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 829              		.loc 1 935 0
 830 022a BB6C     		ldr	r3, [r7, #72]
 831 022c F433     		add	r3, r3, #244
 832 022e 181C     		mov	r0, r3
 833 0230 FFF7FEFF 		bl	_lwsem_post
 936:../MQXLITE/kernel/task.c **** 
 937:../MQXLITE/kernel/task.c ****     if (victim_ptr == td_ptr) {
 834              		.loc 1 937 0
 835 0234 3A6C     		ldr	r2, [r7, #64]
 836 0236 BB69     		ldr	r3, [r7, #24]
 837 0238 9A42     		cmp	r2, r3
 838 023a 13D1     		bne	.L43
 938:../MQXLITE/kernel/task.c ****         /* We are destroying the current task */
 939:../MQXLITE/kernel/task.c ****         _int_disable();
 839              		.loc 1 939 0
 840 023c FFF7FEFF 		bl	_int_disable
 841              	.LBB11:
 940:../MQXLITE/kernel/task.c ****         _QUEUE_UNLINK(victim_ptr);  /* Remove myself from the ready queue */
 842              		.loc 1 940 0
 843 0240 3B6C     		ldr	r3, [r7, #64]
 844 0242 5B68     		ldr	r3, [r3, #4]
 845 0244 FB60     		str	r3, [r7, #12]
 846 0246 3B6C     		ldr	r3, [r7, #64]
 847 0248 1B68     		ldr	r3, [r3]
 848 024a BB60     		str	r3, [r7, #8]
 849 024c FB68     		ldr	r3, [r7, #12]
 850 024e BA68     		ldr	r2, [r7, #8]
 851 0250 1A60     		str	r2, [r3]
 852 0252 BB68     		ldr	r3, [r7, #8]
 853 0254 FA68     		ldr	r2, [r7, #12]
 854 0256 5A60     		str	r2, [r3, #4]
 855              	.LBE11:
 941:../MQXLITE/kernel/task.c ****         _psp_destroy_stack_frame(victim_ptr);
 856              		.loc 1 941 0
 857 0258 3B6C     		ldr	r3, [r7, #64]
 858 025a 181C     		mov	r0, r3
 859 025c FFF7FEFF 		bl	_psp_destroy_stack_frame
 942:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
 943:../MQXLITE/kernel/task.c ****         if ((victim_ptr->FLAGS & TASK_STACK_PREALLOCATED) == 0) {
 944:../MQXLITE/kernel/task.c ****             _mem_transfer_internal(victim_ptr, SYSTEM_TD_PTR(kernel_data));
 945:../MQXLITE/kernel/task.c ****             _mem_free(victim_ptr);   /* Free the td which includes task's stack! */
 946:../MQXLITE/kernel/task.c ****         } /* Endif */
 947:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
 948:../MQXLITE/kernel/task.c ****         /* Now we must jump to the scheduler */
 949:../MQXLITE/kernel/task.c ****         _sched_run_internal();   /* WILL NEVER RETURN FROM HERE */
 860              		.loc 1 949 0
 861 0260 FFF7FEFF 		bl	_sched_run_internal
 862              	.L43:
 950:../MQXLITE/kernel/task.c ****     }/* Endif */
 951:../MQXLITE/kernel/task.c **** 
 952:../MQXLITE/kernel/task.c ****     _psp_destroy_stack_frame(victim_ptr);
 863              		.loc 1 952 0
 864 0264 3B6C     		ldr	r3, [r7, #64]
 865 0266 181C     		mov	r0, r3
 866 0268 FFF7FEFF 		bl	_psp_destroy_stack_frame
 953:../MQXLITE/kernel/task.c **** 
 954:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
 955:../MQXLITE/kernel/task.c ****     /* Free the task descriptor. */
 956:../MQXLITE/kernel/task.c ****     if ((victim_ptr->FLAGS & TASK_STACK_PREALLOCATED) == 0) {
 957:../MQXLITE/kernel/task.c ****         _mem_free(victim_ptr);
 958:../MQXLITE/kernel/task.c ****     } /* Endif */
 959:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
 960:../MQXLITE/kernel/task.c **** 
 961:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
 962:../MQXLITE/kernel/task.c ****     if (victim_ptr->FLAGS & MQX_USER_TASK) {
 963:../MQXLITE/kernel/task.c ****         _int_disable();
 964:../MQXLITE/kernel/task.c ****         kernel_data->USR_TASK_RUN_COUNT--;
 965:../MQXLITE/kernel/task.c ****         _int_enable();
 966:../MQXLITE/kernel/task.c ****     }
 967:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
 968:../MQXLITE/kernel/task.c **** 
 969:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_destroy, MQX_OK);
 970:../MQXLITE/kernel/task.c ****     return(MQX_OK);
 867              		.loc 1 970 0
 868 026c 0023     		mov	r3, #0
 869              	.L30:
 971:../MQXLITE/kernel/task.c **** 
 972:../MQXLITE/kernel/task.c **** }
 870              		.loc 1 972 0
 871 026e 181C     		mov	r0, r3
 872 0270 BD46     		mov	sp, r7
 873 0272 14B0     		add	sp, sp, #80
 874              		@ sp needed for prologue
 875 0274 80BD     		pop	{r7, pc}
 876              	.L45:
 877 0276 C046     		.align	2
 878              	.L44:
 879 0278 00000000 		.word	_mqx_kernel_data
 880 027c FFFEFFFF 		.word	-257
 881              		.cfi_endproc
 882              	.LFE3:
 884              		.section	.text._task_destroy,"ax",%progbits
 885              		.align	2
 886              		.global	_task_destroy
 887              		.code	16
 888              		.thumb_func
 890              	_task_destroy:
 891              	.LFB4:
 973:../MQXLITE/kernel/task.c **** 
 974:../MQXLITE/kernel/task.c **** /*!
 975:../MQXLITE/kernel/task.c ****  * \brief Destroys the task.
 976:../MQXLITE/kernel/task.c ****  *
 977:../MQXLITE/kernel/task.c ****  * This function does the following for the task being destroyed:
 978:../MQXLITE/kernel/task.c ****  * \n - Frees memory resources that the task allocated with functions from the
 979:../MQXLITE/kernel/task.c ****  * _mem and _partition families.
 980:../MQXLITE/kernel/task.c ****  * \n - Closes all queues that the task owns and frees all the queue elements.
 981:../MQXLITE/kernel/task.c ****  * \n - Frees any other component resources that the task owns.
 982:../MQXLITE/kernel/task.c ****  *
 983:../MQXLITE/kernel/task.c ****  * \param[in] task_id One of the following:
 984:../MQXLITE/kernel/task.c ****  * \n - Task ID of the task to be destroyed.
 985:../MQXLITE/kernel/task.c ****  * \n - MQX_NULL_TASK_ID (Destroy the calling task.)
 986:../MQXLITE/kernel/task.c ****  *
 987:../MQXLITE/kernel/task.c ****  * \return MQX_OK
 988:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_TASK_ID
 989:../MQXLITE/kernel/task.c ****  *
 990:../MQXLITE/kernel/task.c ****  * \warning If the task being destroyed is remote, blocks the calling task until
 991:../MQXLITE/kernel/task.c ****  * the task is destroyed.
 992:../MQXLITE/kernel/task.c ****  * \warning If the task being destroyed is local, does not block the calling task.
 993:../MQXLITE/kernel/task.c ****  * \warning If the task being destroyed is the active task, blocks it.
 994:../MQXLITE/kernel/task.c ****  *
 995:../MQXLITE/kernel/task.c ****  * \see _task_create
 996:../MQXLITE/kernel/task.c ****  * \see _task_create_blocked
 997:../MQXLITE/kernel/task.c ****  * \see _task_create_at
 998:../MQXLITE/kernel/task.c ****  * \see _task_get_creator
 999:../MQXLITE/kernel/task.c ****  * \see _task_get_id
1000:../MQXLITE/kernel/task.c ****  * \see _task_abort
1001:../MQXLITE/kernel/task.c ****  */
1002:../MQXLITE/kernel/task.c **** _mqx_uint _task_destroy
1003:../MQXLITE/kernel/task.c **** (
1004:../MQXLITE/kernel/task.c ****     _task_id task_id
1005:../MQXLITE/kernel/task.c **** )
1006:../MQXLITE/kernel/task.c **** {
 892              		.loc 1 1006 0
 893              		.cfi_startproc
 894 0000 80B5     		push	{r7, lr}
 895              	.LCFI12:
 896              		.cfi_def_cfa_offset 8
 897              		.cfi_offset 7, -8
 898              		.cfi_offset 14, -4
 899 0002 82B0     		sub	sp, sp, #8
 900              	.LCFI13:
 901              		.cfi_def_cfa_offset 16
 902 0004 00AF     		add	r7, sp, #0
 903              	.LCFI14:
 904              		.cfi_def_cfa_register 7
 905 0006 7860     		str	r0, [r7, #4]
1007:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE && MQX_ENABLE_USER_STDAPI
1008:../MQXLITE/kernel/task.c ****     if (MQX_RUN_IN_USER_MODE)
1009:../MQXLITE/kernel/task.c ****     {
1010:../MQXLITE/kernel/task.c ****         return _usr_task_destroy(task_id);
1011:../MQXLITE/kernel/task.c ****     }
1012:../MQXLITE/kernel/task.c **** #endif
1013:../MQXLITE/kernel/task.c **** 
1014:../MQXLITE/kernel/task.c ****     return _task_destroy_internal(task_id, FALSE);
 906              		.loc 1 1014 0
 907 0008 7B68     		ldr	r3, [r7, #4]
 908 000a 181C     		mov	r0, r3
 909 000c 0021     		mov	r1, #0
 910 000e FFF7FEFF 		bl	_task_destroy_internal
 911 0012 031C     		mov	r3, r0
1015:../MQXLITE/kernel/task.c **** }
 912              		.loc 1 1015 0
 913 0014 181C     		mov	r0, r3
 914 0016 BD46     		mov	sp, r7
 915 0018 02B0     		add	sp, sp, #8
 916              		@ sp needed for prologue
 917 001a 80BD     		pop	{r7, pc}
 918              		.cfi_endproc
 919              	.LFE4:
 921              		.section	.text._task_get_exception_handler,"ax",%progbits
 922              		.align	2
 923              		.global	_task_get_exception_handler
 924              		.code	16
 925              		.thumb_func
 927              	_task_get_exception_handler:
 928              	.LFB5:
1016:../MQXLITE/kernel/task.c **** 
1017:../MQXLITE/kernel/task.c **** 
1018:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
1019:../MQXLITE/kernel/task.c **** /*!
1020:../MQXLITE/kernel/task.c ****  * \brief Destroys the task.
1021:../MQXLITE/kernel/task.c ****  *
1022:../MQXLITE/kernel/task.c ****  * This function is an equivalent to the _task_destroy() API call but it can be
1023:../MQXLITE/kernel/task.c ****  * executed from within the User task or other code running in the CPU User mode.
1024:../MQXLITE/kernel/task.c ****  * Parameters passed to this function by pointer are required to meet the memory
1025:../MQXLITE/kernel/task.c ****  * protection requirements as described in the parameter list below.
1026:../MQXLITE/kernel/task.c ****  *
1027:../MQXLITE/kernel/task.c ****  * \param[in] task_id One of the following:
1028:../MQXLITE/kernel/task.c ****  * \n - Task ID of the task to be destroyed.
1029:../MQXLITE/kernel/task.c ****  * \n - MQX_NULL_TASK_ID (Destroy the calling task.)
1030:../MQXLITE/kernel/task.c ****  *
1031:../MQXLITE/kernel/task.c ****  * \return MQX_OK
1032:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_TASK_ID
1033:../MQXLITE/kernel/task.c ****  *
1034:../MQXLITE/kernel/task.c ****  * \warning If the task being destroyed is remote, blocks the calling task until
1035:../MQXLITE/kernel/task.c ****  * the task is destroyed.
1036:../MQXLITE/kernel/task.c ****  * \warning If the task being destroyed is local, does not block the calling task.
1037:../MQXLITE/kernel/task.c ****  * \warning If the task being destroyed is the active task, blocks it.
1038:../MQXLITE/kernel/task.c ****  *
1039:../MQXLITE/kernel/task.c ****  * \see _task_destroy
1040:../MQXLITE/kernel/task.c ****  * \see _usr_task_create
1041:../MQXLITE/kernel/task.c ****  * \see _usr_task_abort
1042:../MQXLITE/kernel/task.c ****  */
1043:../MQXLITE/kernel/task.c **** _mqx_uint _usr_task_destroy
1044:../MQXLITE/kernel/task.c **** (
1045:../MQXLITE/kernel/task.c ****     _task_id task_id
1046:../MQXLITE/kernel/task.c **** )
1047:../MQXLITE/kernel/task.c **** {
1048:../MQXLITE/kernel/task.c ****     MQX_API_CALL_PARAMS params = {(uint_32)task_id, 0, 0, 0, 0};
1049:../MQXLITE/kernel/task.c ****     return _mqx_api_call(MQX_API_TASK_DESTROY, &params);
1050:../MQXLITE/kernel/task.c **** }
1051:../MQXLITE/kernel/task.c **** 
1052:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
1053:../MQXLITE/kernel/task.c **** 
1054:../MQXLITE/kernel/task.c **** #if MQXCFG_ENABLE_FP && PSP_HAS_FPU
1055:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
1056:../MQXLITE/kernel/task.c **** 
1057:../MQXLITE/kernel/task.c **** /*!
1058:../MQXLITE/kernel/task.c ****  * \brief Enables floating-point context switching for the active task.
1059:../MQXLITE/kernel/task.c ****  *
1060:../MQXLITE/kernel/task.c ****  * When MQX performs a context switch (due to _task_enable_fp call), floating-point
1061:../MQXLITE/kernel/task.c ****  * registers are saved and restored. Otherwise ( _task_disable_fp call) floating-point
1062:../MQXLITE/kernel/task.c ****  * registers are not saved and restored.
1063:../MQXLITE/kernel/task.c ****  *
1064:../MQXLITE/kernel/task.c ****  * \warning Changes context information that MQX stores.
1065:../MQXLITE/kernel/task.c ****  *
1066:../MQXLITE/kernel/task.c ****  * \see _task_disable_fp
1067:../MQXLITE/kernel/task.c ****  */
1068:../MQXLITE/kernel/task.c **** boolean _task_enable_fp(void)
1069:../MQXLITE/kernel/task.c **** {
1070:../MQXLITE/kernel/task.c ****     register KERNEL_DATA_STRUCT_PTR kernel_data;
1071:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR td_ptr;
1072:../MQXLITE/kernel/task.c ****     boolean res = TRUE;
1073:../MQXLITE/kernel/task.c **** 
1074:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
1075:../MQXLITE/kernel/task.c ****     _KLOGE1(KLOG_task_enable_fp);
1076:../MQXLITE/kernel/task.c **** 
1077:../MQXLITE/kernel/task.c ****     td_ptr = kernel_data->ACTIVE_PTR;
1078:../MQXLITE/kernel/task.c ****     _int_disable();
1079:../MQXLITE/kernel/task.c **** 
1080:../MQXLITE/kernel/task.c ****     if (NULL == td_ptr->FLOAT_CONTEXT_PTR)
1081:../MQXLITE/kernel/task.c ****     {
1082:../MQXLITE/kernel/task.c ****         /* we dont have allocated space for fp context... try allocate it */
1083:../MQXLITE/kernel/task.c ****         _psp_build_float_context(td_ptr);
1084:../MQXLITE/kernel/task.c ****     }
1085:../MQXLITE/kernel/task.c **** 
1086:../MQXLITE/kernel/task.c ****     if (NULL != td_ptr->FLOAT_CONTEXT_PTR)
1087:../MQXLITE/kernel/task.c ****     {
1088:../MQXLITE/kernel/task.c ****         /* we have allocated space for fp context */
1089:../MQXLITE/kernel/task.c ****         td_ptr->FLAGS |= MQX_FLOATING_POINT_TASK;
1090:../MQXLITE/kernel/task.c ****         if (kernel_data->FP_ACTIVE_PTR != NULL)
1091:../MQXLITE/kernel/task.c ****         {
1092:../MQXLITE/kernel/task.c ****             if (kernel_data->FP_ACTIVE_PTR != kernel_data->ACTIVE_PTR)
1093:../MQXLITE/kernel/task.c ****             {
1094:../MQXLITE/kernel/task.c ****                 _psp_save_fp_context_internal();
1095:../MQXLITE/kernel/task.c ****             }
1096:../MQXLITE/kernel/task.c ****         }
1097:../MQXLITE/kernel/task.c ****         kernel_data->FP_ACTIVE_PTR = kernel_data->ACTIVE_PTR;
1098:../MQXLITE/kernel/task.c ****     }
1099:../MQXLITE/kernel/task.c ****     else
1100:../MQXLITE/kernel/task.c ****     {
1101:../MQXLITE/kernel/task.c ****         /* some problem - TD dont have allocated space for fp context */
1102:../MQXLITE/kernel/task.c ****         res = FALSE;
1103:../MQXLITE/kernel/task.c ****     }
1104:../MQXLITE/kernel/task.c **** 
1105:../MQXLITE/kernel/task.c ****     _int_enable();
1106:../MQXLITE/kernel/task.c ****     _KLOGX1(KLOG_task_enable_fp);
1107:../MQXLITE/kernel/task.c **** 
1108:../MQXLITE/kernel/task.c ****     return res;
1109:../MQXLITE/kernel/task.c **** }
1110:../MQXLITE/kernel/task.c **** 
1111:../MQXLITE/kernel/task.c **** /*!
1112:../MQXLITE/kernel/task.c ****  * \brief Disables floating-point context switching for the active task if the
1113:../MQXLITE/kernel/task.c ****  * task is a floating-point task.
1114:../MQXLITE/kernel/task.c ****  *
1115:../MQXLITE/kernel/task.c ****  * When MQX performs a context switch (due to _task_enable_fp call), floating-point
1116:../MQXLITE/kernel/task.c ****  * registers are saved and restored. Otherwise ( _task_disable_fp call) floating-point
1117:../MQXLITE/kernel/task.c ****  * registers are not saved and restored.
1118:../MQXLITE/kernel/task.c ****  *
1119:../MQXLITE/kernel/task.c ****  * \warning Changes context information that MQX stores.
1120:../MQXLITE/kernel/task.c ****  *
1121:../MQXLITE/kernel/task.c ****  * \see _task_enable_fp
1122:../MQXLITE/kernel/task.c ****  */
1123:../MQXLITE/kernel/task.c **** void _task_disable_fp(void)
1124:../MQXLITE/kernel/task.c **** { /* Body */
1125:../MQXLITE/kernel/task.c ****     register KERNEL_DATA_STRUCT_PTR kernel_data;
1126:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR                   td_ptr;
1127:../MQXLITE/kernel/task.c **** 
1128:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
1129:../MQXLITE/kernel/task.c ****     _KLOGE1(KLOG_task_disable_fp);
1130:../MQXLITE/kernel/task.c **** 
1131:../MQXLITE/kernel/task.c ****     td_ptr = kernel_data->ACTIVE_PTR;
1132:../MQXLITE/kernel/task.c ****     _int_disable();
1133:../MQXLITE/kernel/task.c ****     if (td_ptr->FLAGS & MQX_FLOATING_POINT_TASK)
1134:../MQXLITE/kernel/task.c ****     {
1135:../MQXLITE/kernel/task.c ****         td_ptr->FLAGS &= ~MQX_FLOATING_POINT_TASK;
1136:../MQXLITE/kernel/task.c ****         kernel_data->FP_ACTIVE_PTR = NULL;
1137:../MQXLITE/kernel/task.c ****     }
1138:../MQXLITE/kernel/task.c **** 
1139:../MQXLITE/kernel/task.c ****     if (NULL != td_ptr->FLOAT_CONTEXT_PTR)
1140:../MQXLITE/kernel/task.c ****     {
1141:../MQXLITE/kernel/task.c ****         /* deallocate fp context area */
1142:../MQXLITE/kernel/task.c ****         _mem_free(td_ptr->FLOAT_CONTEXT_PTR);
1143:../MQXLITE/kernel/task.c ****         td_ptr->FLOAT_CONTEXT_PTR = NULL;
1144:../MQXLITE/kernel/task.c ****     }
1145:../MQXLITE/kernel/task.c **** 
1146:../MQXLITE/kernel/task.c ****     _int_enable();
1147:../MQXLITE/kernel/task.c ****     _KLOGX1(KLOG_task_disable_fp);
1148:../MQXLITE/kernel/task.c **** 
1149:../MQXLITE/kernel/task.c **** } /* Endbody */
1150:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
1151:../MQXLITE/kernel/task.c **** #endif /* MQXCFG_ENABLE_FP && PSP_HAS_FPU */
1152:../MQXLITE/kernel/task.c **** 
1153:../MQXLITE/kernel/task.c **** #if MQX_HAS_TASK_ENVIRONMENT
1154:../MQXLITE/kernel/task.c **** 
1155:../MQXLITE/kernel/task.c **** /*!
1156:../MQXLITE/kernel/task.c ****  * \brief Sets the address of the application-specific environment data for the task.
1157:../MQXLITE/kernel/task.c ****  *
1158:../MQXLITE/kernel/task.c ****  * \param[in] task_id         Task ID of the task whose environment is to be set.
1159:../MQXLITE/kernel/task.c ****  * \param[in] environment_ptr Pointer to the environment data.
1160:../MQXLITE/kernel/task.c ****  *
1161:../MQXLITE/kernel/task.c ****  * \return Previous environment data (Success.)
1162:../MQXLITE/kernel/task.c ****  * \return NULL (Failure.)
1163:../MQXLITE/kernel/task.c ****  *
1164:../MQXLITE/kernel/task.c ****  * \warning On failure, calls _task_set_error() to set the task error code to
1165:../MQXLITE/kernel/task.c ****  * MQX_INVALID_TASK_ID.
1166:../MQXLITE/kernel/task.c ****  *
1167:../MQXLITE/kernel/task.c ****  * \see _task_get_environment
1168:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter
1169:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter_for
1170:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter
1171:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter_for
1172:../MQXLITE/kernel/task.c ****  * \see _task_set_error
1173:../MQXLITE/kernel/task.c ****  */
1174:../MQXLITE/kernel/task.c **** pointer _task_set_environment
1175:../MQXLITE/kernel/task.c **** (
1176:../MQXLITE/kernel/task.c ****     _task_id    task_id,
1177:../MQXLITE/kernel/task.c ****     pointer     environment_ptr
1178:../MQXLITE/kernel/task.c **** )
1179:../MQXLITE/kernel/task.c **** { /* Body */
1180:../MQXLITE/kernel/task.c ****     _KLOGM(KERNEL_DATA_STRUCT_PTR kernel_data;)
1181:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR td_ptr;
1182:../MQXLITE/kernel/task.c ****     pointer       old_env_ptr;
1183:../MQXLITE/kernel/task.c **** 
1184:../MQXLITE/kernel/task.c ****     _KLOGM(_GET_KERNEL_DATA(kernel_data);)
1185:../MQXLITE/kernel/task.c ****     _KLOGE3(KLOG_task_set_environment, task_id, environment_ptr);
1186:../MQXLITE/kernel/task.c **** 
1187:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR) _task_get_td(task_id);
1188:../MQXLITE/kernel/task.c ****     if (td_ptr == NULL)
1189:../MQXLITE/kernel/task.c ****     {
1190:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TASK_ID);
1191:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_set_environment, NULL);
1192:../MQXLITE/kernel/task.c ****         return (NULL);
1193:../MQXLITE/kernel/task.c ****     }/* Endif */
1194:../MQXLITE/kernel/task.c **** 
1195:../MQXLITE/kernel/task.c ****     old_env_ptr = td_ptr->ENVIRONMENT_PTR;
1196:../MQXLITE/kernel/task.c ****     td_ptr->ENVIRONMENT_PTR = environment_ptr;
1197:../MQXLITE/kernel/task.c **** 
1198:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_set_environment, old_env_ptr);
1199:../MQXLITE/kernel/task.c ****     return (old_env_ptr);
1200:../MQXLITE/kernel/task.c **** 
1201:../MQXLITE/kernel/task.c **** } /* Endbody */
1202:../MQXLITE/kernel/task.c **** 
1203:../MQXLITE/kernel/task.c **** /*!
1204:../MQXLITE/kernel/task.c ****  * \brief Gets a pointer to the application-specific environment data for the task.
1205:../MQXLITE/kernel/task.c ****  *
1206:../MQXLITE/kernel/task.c ****  * \param[in] task_id Task ID of the task whose environment is to be obtained.
1207:../MQXLITE/kernel/task.c ****  *
1208:../MQXLITE/kernel/task.c ****  * \return Environment data (Success.)
1209:../MQXLITE/kernel/task.c ****  * \return NULL (Failure.)
1210:../MQXLITE/kernel/task.c ****  *
1211:../MQXLITE/kernel/task.c ****  * \warning On failure, calls _task_set_error() to set the task error code to
1212:../MQXLITE/kernel/task.c ****  * MQX_INVALID_TASK_ID.
1213:../MQXLITE/kernel/task.c ****  *
1214:../MQXLITE/kernel/task.c ****  * \see _task_set_environment
1215:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter
1216:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter_for
1217:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter
1218:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter_for
1219:../MQXLITE/kernel/task.c ****  * \see _task_set_error
1220:../MQXLITE/kernel/task.c ****  */
1221:../MQXLITE/kernel/task.c **** pointer _task_get_environment
1222:../MQXLITE/kernel/task.c **** (
1223:../MQXLITE/kernel/task.c ****     _task_id task_id
1224:../MQXLITE/kernel/task.c **** )
1225:../MQXLITE/kernel/task.c **** { /* Body */
1226:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR td_ptr;
1227:../MQXLITE/kernel/task.c **** 
1228:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR) _task_get_td(task_id);
1229:../MQXLITE/kernel/task.c ****     if (td_ptr == NULL)
1230:../MQXLITE/kernel/task.c ****     {
1231:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TASK_ID);
1232:../MQXLITE/kernel/task.c ****         return (NULL);
1233:../MQXLITE/kernel/task.c ****     }/* Endif */
1234:../MQXLITE/kernel/task.c **** 
1235:../MQXLITE/kernel/task.c ****     return (td_ptr->ENVIRONMENT_PTR);
1236:../MQXLITE/kernel/task.c **** 
1237:../MQXLITE/kernel/task.c **** } /* Endbody */
1238:../MQXLITE/kernel/task.c **** 
1239:../MQXLITE/kernel/task.c **** #endif /* MQX_HAS_TASK_ENVIRONMENT */
1240:../MQXLITE/kernel/task.c **** 
1241:../MQXLITE/kernel/task.c **** #if MQX_HAS_EXCEPTION_HANDLER
1242:../MQXLITE/kernel/task.c **** 
1243:../MQXLITE/kernel/task.c **** /*!
1244:../MQXLITE/kernel/task.c ****  * \brief Gets a pointer to the task exception handler.
1245:../MQXLITE/kernel/task.c ****  *
1246:../MQXLITE/kernel/task.c ****  * \param[in] task_id Task ID of the task whose exception handler is to be obtained.
1247:../MQXLITE/kernel/task.c ****  *
1248:../MQXLITE/kernel/task.c ****  * \return Pointer to the task exception handler for the task (might be NULL).
1249:../MQXLITE/kernel/task.c ****  * \return NULL (Task ID is not valid.)
1250:../MQXLITE/kernel/task.c ****  *
1251:../MQXLITE/kernel/task.c ****  * \warning On failure, calls _task_set_error() to set the task error code to
1252:../MQXLITE/kernel/task.c ****  * MQX_INVALID_TASK_ID.
1253:../MQXLITE/kernel/task.c ****  *
1254:../MQXLITE/kernel/task.c ****  * \see _task_set_exception_handler
1255:../MQXLITE/kernel/task.c ****  * \see _task_get_exit_handler
1256:../MQXLITE/kernel/task.c ****  * \see _task_set_exit_handler
1257:../MQXLITE/kernel/task.c ****  * \see _int_exception_isr
1258:../MQXLITE/kernel/task.c ****  * \see _task_set_error
1259:../MQXLITE/kernel/task.c ****  */
1260:../MQXLITE/kernel/task.c **** TASK_EXCEPTION_FPTR _task_get_exception_handler
1261:../MQXLITE/kernel/task.c **** (
1262:../MQXLITE/kernel/task.c ****     _task_id        task_id
1263:../MQXLITE/kernel/task.c **** )
1264:../MQXLITE/kernel/task.c **** { /* Body */
 929              		.loc 1 1264 0
 930              		.cfi_startproc
 931 0000 80B5     		push	{r7, lr}
 932              	.LCFI15:
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 7, -8
 935              		.cfi_offset 14, -4
 936 0002 84B0     		sub	sp, sp, #16
 937              	.LCFI16:
 938              		.cfi_def_cfa_offset 24
 939 0004 00AF     		add	r7, sp, #0
 940              	.LCFI17:
 941              		.cfi_def_cfa_register 7
 942 0006 7860     		str	r0, [r7, #4]
1265:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR       td_ptr;
1266:../MQXLITE/kernel/task.c ****     TASK_EXCEPTION_FPTR excpt_function;
1267:../MQXLITE/kernel/task.c **** 
1268:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR)_task_get_td(task_id);
 943              		.loc 1 1268 0
 944 0008 7B68     		ldr	r3, [r7, #4]
 945 000a 181C     		mov	r0, r3
 946 000c FFF7FEFF 		bl	_task_get_td
 947 0010 031C     		mov	r3, r0
 948 0012 FB60     		str	r3, [r7, #12]
1269:../MQXLITE/kernel/task.c ****     if ( td_ptr == NULL )
 949              		.loc 1 1269 0
 950 0014 FB68     		ldr	r3, [r7, #12]
 951 0016 002B     		cmp	r3, #0
 952 0018 04D1     		bne	.L49
1270:../MQXLITE/kernel/task.c ****     {
1271:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TASK_ID);
 953              		.loc 1 1271 0
 954 001a 1220     		mov	r0, #18
 955 001c FFF7FEFF 		bl	_task_set_error
1272:../MQXLITE/kernel/task.c ****         return( NULL );
 956              		.loc 1 1272 0
 957 0020 0023     		mov	r3, #0
 958 0022 03E0     		b	.L50
 959              	.L49:
1273:../MQXLITE/kernel/task.c ****     }/* Endif */
1274:../MQXLITE/kernel/task.c **** 
1275:../MQXLITE/kernel/task.c ****     excpt_function   = td_ptr->EXCEPTION_HANDLER_PTR;
 960              		.loc 1 1275 0
 961 0024 FB68     		ldr	r3, [r7, #12]
 962 0026 9B6E     		ldr	r3, [r3, #104]
 963 0028 BB60     		str	r3, [r7, #8]
1276:../MQXLITE/kernel/task.c **** 
1277:../MQXLITE/kernel/task.c ****     return(excpt_function);
 964              		.loc 1 1277 0
 965 002a BB68     		ldr	r3, [r7, #8]
 966              	.L50:
1278:../MQXLITE/kernel/task.c **** 
1279:../MQXLITE/kernel/task.c **** } /* Endbody */
 967              		.loc 1 1279 0
 968 002c 181C     		mov	r0, r3
 969 002e BD46     		mov	sp, r7
 970 0030 04B0     		add	sp, sp, #16
 971              		@ sp needed for prologue
 972 0032 80BD     		pop	{r7, pc}
 973              		.cfi_endproc
 974              	.LFE5:
 976              		.section	.text._task_set_exception_handler,"ax",%progbits
 977              		.align	2
 978              		.global	_task_set_exception_handler
 979              		.code	16
 980              		.thumb_func
 982              	_task_set_exception_handler:
 983              	.LFB6:
1280:../MQXLITE/kernel/task.c **** 
1281:../MQXLITE/kernel/task.c **** /*!
1282:../MQXLITE/kernel/task.c ****  * \brief Sets the address of the task exception handler.
1283:../MQXLITE/kernel/task.c ****  *
1284:../MQXLITE/kernel/task.c ****  * \param[in] task_id         Task ID of the task whose exception handler is to be set.
1285:../MQXLITE/kernel/task.c ****  * \param[in] handler_address Pointer to the task exception handler.
1286:../MQXLITE/kernel/task.c ****  *
1287:../MQXLITE/kernel/task.c ****  * \return Pointer to the previous task exception handler (might be NULL).
1288:../MQXLITE/kernel/task.c ****  * \return NULL (Task ID is not valid.)
1289:../MQXLITE/kernel/task.c ****  *
1290:../MQXLITE/kernel/task.c ****  * \warning On failure, calls _task_set_error() to set the task error code to
1291:../MQXLITE/kernel/task.c ****  * MQX_INVALID_TASK_ID.
1292:../MQXLITE/kernel/task.c ****  *
1293:../MQXLITE/kernel/task.c ****  * \see _task_get_exception_handler
1294:../MQXLITE/kernel/task.c ****  * \see _task_get_exit_handler
1295:../MQXLITE/kernel/task.c ****  * \see _task_set_exit_handler
1296:../MQXLITE/kernel/task.c ****  * \see _int_exception_isr
1297:../MQXLITE/kernel/task.c ****  * \see _task_set_error
1298:../MQXLITE/kernel/task.c ****  */
1299:../MQXLITE/kernel/task.c **** TASK_EXCEPTION_FPTR _task_set_exception_handler
1300:../MQXLITE/kernel/task.c **** (
1301:../MQXLITE/kernel/task.c ****     _task_id            task_id,
1302:../MQXLITE/kernel/task.c ****     TASK_EXCEPTION_FPTR handler_address
1303:../MQXLITE/kernel/task.c **** )
1304:../MQXLITE/kernel/task.c **** { /* Body */
 984              		.loc 1 1304 0
 985              		.cfi_startproc
 986 0000 80B5     		push	{r7, lr}
 987              	.LCFI18:
 988              		.cfi_def_cfa_offset 8
 989              		.cfi_offset 7, -8
 990              		.cfi_offset 14, -4
 991 0002 84B0     		sub	sp, sp, #16
 992              	.LCFI19:
 993              		.cfi_def_cfa_offset 24
 994 0004 00AF     		add	r7, sp, #0
 995              	.LCFI20:
 996              		.cfi_def_cfa_register 7
 997 0006 7860     		str	r0, [r7, #4]
 998 0008 3960     		str	r1, [r7]
1305:../MQXLITE/kernel/task.c ****     _KLOGM(KERNEL_DATA_STRUCT_PTR kernel_data;)
1306:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR       td_ptr;
1307:../MQXLITE/kernel/task.c ****     TASK_EXCEPTION_FPTR old_function;
1308:../MQXLITE/kernel/task.c **** 
1309:../MQXLITE/kernel/task.c ****     _KLOGM(_GET_KERNEL_DATA(kernel_data);)
1310:../MQXLITE/kernel/task.c ****     _KLOGE3(KLOG_task_set_exception_handler, task_id, handler_address);
1311:../MQXLITE/kernel/task.c **** 
1312:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR)_task_get_td(task_id);
 999              		.loc 1 1312 0
 1000 000a 7B68     		ldr	r3, [r7, #4]
 1001 000c 181C     		mov	r0, r3
 1002 000e FFF7FEFF 		bl	_task_get_td
 1003 0012 031C     		mov	r3, r0
 1004 0014 FB60     		str	r3, [r7, #12]
1313:../MQXLITE/kernel/task.c ****     if ( td_ptr == NULL )
 1005              		.loc 1 1313 0
 1006 0016 FB68     		ldr	r3, [r7, #12]
 1007 0018 002B     		cmp	r3, #0
 1008 001a 04D1     		bne	.L52
1314:../MQXLITE/kernel/task.c ****     {
1315:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TASK_ID);
 1009              		.loc 1 1315 0
 1010 001c 1220     		mov	r0, #18
 1011 001e FFF7FEFF 		bl	_task_set_error
1316:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_set_exception_handler, NULL);
1317:../MQXLITE/kernel/task.c ****         return( NULL );
 1012              		.loc 1 1317 0
 1013 0022 0023     		mov	r3, #0
 1014 0024 06E0     		b	.L53
 1015              	.L52:
1318:../MQXLITE/kernel/task.c ****     } /* Endif */
1319:../MQXLITE/kernel/task.c **** 
1320:../MQXLITE/kernel/task.c ****     old_function = td_ptr->EXCEPTION_HANDLER_PTR;
 1016              		.loc 1 1320 0
 1017 0026 FB68     		ldr	r3, [r7, #12]
 1018 0028 9B6E     		ldr	r3, [r3, #104]
 1019 002a BB60     		str	r3, [r7, #8]
1321:../MQXLITE/kernel/task.c ****     td_ptr->EXCEPTION_HANDLER_PTR = handler_address;
 1020              		.loc 1 1321 0
 1021 002c FB68     		ldr	r3, [r7, #12]
 1022 002e 3A68     		ldr	r2, [r7]
 1023 0030 9A66     		str	r2, [r3, #104]
1322:../MQXLITE/kernel/task.c **** 
1323:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_set_exception_handler, old_function);
1324:../MQXLITE/kernel/task.c ****     return(old_function);
 1024              		.loc 1 1324 0
 1025 0032 BB68     		ldr	r3, [r7, #8]
 1026              	.L53:
1325:../MQXLITE/kernel/task.c **** 
1326:../MQXLITE/kernel/task.c **** } /* Endbody */
 1027              		.loc 1 1326 0
 1028 0034 181C     		mov	r0, r3
 1029 0036 BD46     		mov	sp, r7
 1030 0038 04B0     		add	sp, sp, #16
 1031              		@ sp needed for prologue
 1032 003a 80BD     		pop	{r7, pc}
 1033              		.cfi_endproc
 1034              	.LFE6:
 1036              		.section	.text._task_get_exit_handler,"ax",%progbits
 1037              		.align	2
 1038              		.global	_task_get_exit_handler
 1039              		.code	16
 1040              		.thumb_func
 1042              	_task_get_exit_handler:
 1043              	.LFB7:
1327:../MQXLITE/kernel/task.c **** 
1328:../MQXLITE/kernel/task.c **** #endif /* MQX_HAS_EXCEPTION_HANDLER */
1329:../MQXLITE/kernel/task.c **** 
1330:../MQXLITE/kernel/task.c **** #if MQX_HAS_EXIT_HANDLER
1331:../MQXLITE/kernel/task.c **** /*!
1332:../MQXLITE/kernel/task.c ****  * \brief Gets a pointer to the task exit handler for the task.
1333:../MQXLITE/kernel/task.c ****  *
1334:../MQXLITE/kernel/task.c ****  * MQX calls a task's task exit handler if either of these conditions is true:
1335:../MQXLITE/kernel/task.c ****  * \n - Task is terminated with _task_abort().
1336:../MQXLITE/kernel/task.c ****  * \n - Task returns from its function body (for example, if it calls _mqx_exit()).
1337:../MQXLITE/kernel/task.c ****  *
1338:../MQXLITE/kernel/task.c ****  * \param[in] task_id Task ID of the task whose exit handler is to be obtained.
1339:../MQXLITE/kernel/task.c ****  *
1340:../MQXLITE/kernel/task.c ****  * \return Pointer to the exit handler (might be NULL).
1341:../MQXLITE/kernel/task.c ****  * \return NULL (Task_id is not valid.)
1342:../MQXLITE/kernel/task.c ****  *
1343:../MQXLITE/kernel/task.c ****  * \warning On failure, calls _task_set_error() to set the task error code to
1344:../MQXLITE/kernel/task.c ****  * MQX_INVALID_TASK_ID.
1345:../MQXLITE/kernel/task.c ****  *
1346:../MQXLITE/kernel/task.c ****  * \see _task_set_exit_handler
1347:../MQXLITE/kernel/task.c ****  * \see _mqx_exit
1348:../MQXLITE/kernel/task.c ****  * \see _task_get_exception_handler
1349:../MQXLITE/kernel/task.c ****  * \see _task_set_exception_handler
1350:../MQXLITE/kernel/task.c ****  * \see _task_abort
1351:../MQXLITE/kernel/task.c ****  * \see _task_set_error
1352:../MQXLITE/kernel/task.c ****  */
1353:../MQXLITE/kernel/task.c **** TASK_EXIT_FPTR _task_get_exit_handler
1354:../MQXLITE/kernel/task.c **** (
1355:../MQXLITE/kernel/task.c ****     _task_id        task_id
1356:../MQXLITE/kernel/task.c **** )
1357:../MQXLITE/kernel/task.c **** { /* Body */
 1044              		.loc 1 1357 0
 1045              		.cfi_startproc
 1046 0000 80B5     		push	{r7, lr}
 1047              	.LCFI21:
 1048              		.cfi_def_cfa_offset 8
 1049              		.cfi_offset 7, -8
 1050              		.cfi_offset 14, -4
 1051 0002 84B0     		sub	sp, sp, #16
 1052              	.LCFI22:
 1053              		.cfi_def_cfa_offset 24
 1054 0004 00AF     		add	r7, sp, #0
 1055              	.LCFI23:
 1056              		.cfi_def_cfa_register 7
 1057 0006 7860     		str	r0, [r7, #4]
1358:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR  td_ptr;
1359:../MQXLITE/kernel/task.c ****     TASK_EXIT_FPTR exit_function;
1360:../MQXLITE/kernel/task.c **** 
1361:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR)_task_get_td(task_id);
 1058              		.loc 1 1361 0
 1059 0008 7B68     		ldr	r3, [r7, #4]
 1060 000a 181C     		mov	r0, r3
 1061 000c FFF7FEFF 		bl	_task_get_td
 1062 0010 031C     		mov	r3, r0
 1063 0012 FB60     		str	r3, [r7, #12]
1362:../MQXLITE/kernel/task.c ****     if ( td_ptr == NULL )
 1064              		.loc 1 1362 0
 1065 0014 FB68     		ldr	r3, [r7, #12]
 1066 0016 002B     		cmp	r3, #0
 1067 0018 04D1     		bne	.L55
1363:../MQXLITE/kernel/task.c ****     {
1364:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TASK_ID);
 1068              		.loc 1 1364 0
 1069 001a 1220     		mov	r0, #18
 1070 001c FFF7FEFF 		bl	_task_set_error
1365:../MQXLITE/kernel/task.c ****         return( NULL );
 1071              		.loc 1 1365 0
 1072 0020 0023     		mov	r3, #0
 1073 0022 03E0     		b	.L56
 1074              	.L55:
1366:../MQXLITE/kernel/task.c ****     }/* Endif */
1367:../MQXLITE/kernel/task.c **** 
1368:../MQXLITE/kernel/task.c ****     exit_function = td_ptr->EXIT_HANDLER_PTR;
 1075              		.loc 1 1368 0
 1076 0024 FB68     		ldr	r3, [r7, #12]
 1077 0026 5B6E     		ldr	r3, [r3, #100]
 1078 0028 BB60     		str	r3, [r7, #8]
1369:../MQXLITE/kernel/task.c **** 
1370:../MQXLITE/kernel/task.c ****     return(exit_function);
 1079              		.loc 1 1370 0
 1080 002a BB68     		ldr	r3, [r7, #8]
 1081              	.L56:
1371:../MQXLITE/kernel/task.c **** } /* Endbody */
 1082              		.loc 1 1371 0
 1083 002c 181C     		mov	r0, r3
 1084 002e BD46     		mov	sp, r7
 1085 0030 04B0     		add	sp, sp, #16
 1086              		@ sp needed for prologue
 1087 0032 80BD     		pop	{r7, pc}
 1088              		.cfi_endproc
 1089              	.LFE7:
 1091              		.section	.text._task_set_exit_handler,"ax",%progbits
 1092              		.align	2
 1093              		.global	_task_set_exit_handler
 1094              		.code	16
 1095              		.thumb_func
 1097              	_task_set_exit_handler:
 1098              	.LFB8:
1372:../MQXLITE/kernel/task.c **** 
1373:../MQXLITE/kernel/task.c **** /*!
1374:../MQXLITE/kernel/task.c ****  * \brief Sets the address of the task exit handler for the task.
1375:../MQXLITE/kernel/task.c ****  *
1376:../MQXLITE/kernel/task.c ****  * MQX calls a task's task exit handler if either of these conditions is true:
1377:../MQXLITE/kernel/task.c ****  * \n - Task is terminated with _task_abort().
1378:../MQXLITE/kernel/task.c ****  * \n - Task returns from its function body (for example, if it calls _mqx_exit()).
1379:../MQXLITE/kernel/task.c ****  *
1380:../MQXLITE/kernel/task.c ****  * \param[in] task_id              Task ID of the task whose exit handler is to be set.
1381:../MQXLITE/kernel/task.c ****  * \param[in] exit_handler_address Pointer to the exit handler for the task.
1382:../MQXLITE/kernel/task.c ****  *
1383:../MQXLITE/kernel/task.c ****  * \return Pointer to the previous exit handler (might be NULL).
1384:../MQXLITE/kernel/task.c ****  * \return NULL (Task_id is not valid.)
1385:../MQXLITE/kernel/task.c ****  *
1386:../MQXLITE/kernel/task.c ****  * \warning On failure, calls _task_set_error() to set the task error code to
1387:../MQXLITE/kernel/task.c ****  * MQX_INVALID_TASK_ID.
1388:../MQXLITE/kernel/task.c ****  *
1389:../MQXLITE/kernel/task.c ****  * \see _task_get_exit_handler
1390:../MQXLITE/kernel/task.c ****  * \see _mqx_exit
1391:../MQXLITE/kernel/task.c ****  * \see _task_get_exception_handler
1392:../MQXLITE/kernel/task.c ****  * \see _task_set_exception_handler
1393:../MQXLITE/kernel/task.c ****  * \see _task_abort
1394:../MQXLITE/kernel/task.c ****  * \see _task_set_error
1395:../MQXLITE/kernel/task.c ****  */
1396:../MQXLITE/kernel/task.c **** TASK_EXIT_FPTR _task_set_exit_handler
1397:../MQXLITE/kernel/task.c **** (
1398:../MQXLITE/kernel/task.c ****     _task_id       task_id,
1399:../MQXLITE/kernel/task.c ****     TASK_EXIT_FPTR exit_handler_address
1400:../MQXLITE/kernel/task.c **** )
1401:../MQXLITE/kernel/task.c **** { /* Body */
 1099              		.loc 1 1401 0
 1100              		.cfi_startproc
 1101 0000 80B5     		push	{r7, lr}
 1102              	.LCFI24:
 1103              		.cfi_def_cfa_offset 8
 1104              		.cfi_offset 7, -8
 1105              		.cfi_offset 14, -4
 1106 0002 84B0     		sub	sp, sp, #16
 1107              	.LCFI25:
 1108              		.cfi_def_cfa_offset 24
 1109 0004 00AF     		add	r7, sp, #0
 1110              	.LCFI26:
 1111              		.cfi_def_cfa_register 7
 1112 0006 7860     		str	r0, [r7, #4]
 1113 0008 3960     		str	r1, [r7]
1402:../MQXLITE/kernel/task.c ****     _KLOGM(KERNEL_DATA_STRUCT_PTR kernel_data;)
1403:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR  td_ptr;
1404:../MQXLITE/kernel/task.c ****     TASK_EXIT_FPTR old_function;
1405:../MQXLITE/kernel/task.c **** 
1406:../MQXLITE/kernel/task.c ****     _KLOGM(_GET_KERNEL_DATA(kernel_data);)
1407:../MQXLITE/kernel/task.c ****     _KLOGE3(KLOG_task_set_exit_handler, task_id, exit_handler_address);
1408:../MQXLITE/kernel/task.c **** 
1409:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR)_task_get_td(task_id);
 1114              		.loc 1 1409 0
 1115 000a 7B68     		ldr	r3, [r7, #4]
 1116 000c 181C     		mov	r0, r3
 1117 000e FFF7FEFF 		bl	_task_get_td
 1118 0012 031C     		mov	r3, r0
 1119 0014 FB60     		str	r3, [r7, #12]
1410:../MQXLITE/kernel/task.c ****     if ( td_ptr == NULL )
 1120              		.loc 1 1410 0
 1121 0016 FB68     		ldr	r3, [r7, #12]
 1122 0018 002B     		cmp	r3, #0
 1123 001a 04D1     		bne	.L58
1411:../MQXLITE/kernel/task.c ****     {
1412:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TASK_ID);
 1124              		.loc 1 1412 0
 1125 001c 1220     		mov	r0, #18
 1126 001e FFF7FEFF 		bl	_task_set_error
1413:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_set_exit_handler, NULL);
1414:../MQXLITE/kernel/task.c ****         return( NULL );
 1127              		.loc 1 1414 0
 1128 0022 0023     		mov	r3, #0
 1129 0024 06E0     		b	.L59
 1130              	.L58:
1415:../MQXLITE/kernel/task.c ****     }/* Endif */
1416:../MQXLITE/kernel/task.c **** 
1417:../MQXLITE/kernel/task.c ****     old_function = td_ptr->EXIT_HANDLER_PTR;
 1131              		.loc 1 1417 0
 1132 0026 FB68     		ldr	r3, [r7, #12]
 1133 0028 5B6E     		ldr	r3, [r3, #100]
 1134 002a BB60     		str	r3, [r7, #8]
1418:../MQXLITE/kernel/task.c ****     td_ptr->EXIT_HANDLER_PTR = exit_handler_address;
 1135              		.loc 1 1418 0
 1136 002c FB68     		ldr	r3, [r7, #12]
 1137 002e 3A68     		ldr	r2, [r7]
 1138 0030 5A66     		str	r2, [r3, #100]
1419:../MQXLITE/kernel/task.c **** 
1420:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_set_exit_handler, old_function);
1421:../MQXLITE/kernel/task.c ****     return(old_function);
 1139              		.loc 1 1421 0
 1140 0032 BB68     		ldr	r3, [r7, #8]
 1141              	.L59:
1422:../MQXLITE/kernel/task.c **** 
1423:../MQXLITE/kernel/task.c **** } /* Endbody */
 1142              		.loc 1 1423 0
 1143 0034 181C     		mov	r0, r3
 1144 0036 BD46     		mov	sp, r7
 1145 0038 04B0     		add	sp, sp, #16
 1146              		@ sp needed for prologue
 1147 003a 80BD     		pop	{r7, pc}
 1148              		.cfi_endproc
 1149              	.LFE8:
 1151              		.section	.text._task_get_id_from_name,"ax",%progbits
 1152              		.align	2
 1153              		.global	_task_get_id_from_name
 1154              		.code	16
 1155              		.thumb_func
 1157              	_task_get_id_from_name:
 1158              	.LFB9:
1424:../MQXLITE/kernel/task.c **** 
1425:../MQXLITE/kernel/task.c **** #endif /* MQX_HAS_EXIT_HANDLER */
1426:../MQXLITE/kernel/task.c **** 
1427:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_TASK_TEMPLATE_PTR
1428:../MQXLITE/kernel/task.c **** /*!
1429:../MQXLITE/kernel/task.c ****  * \brief Gets the task ID that is associated with the task name.
1430:../MQXLITE/kernel/task.c ****  *
1431:../MQXLITE/kernel/task.c ****  * This function uses a task name (from its task template) to find a task id. Only
1432:../MQXLITE/kernel/task.c ****  * the first task found with the provided name is found.
1433:../MQXLITE/kernel/task.c ****  *
1434:../MQXLITE/kernel/task.c ****  * \param[in] name_ptr Pointer to the name to find in the task template list.
1435:../MQXLITE/kernel/task.c ****  *
1436:../MQXLITE/kernel/task.c ****  * \return Task ID that is associated with the first match of name_ptr.
1437:../MQXLITE/kernel/task.c ****  * \return MQX_NULL_TASK_ID (Name is not in the task template list.)
1438:../MQXLITE/kernel/task.c ****  *
1439:../MQXLITE/kernel/task.c ****  * \see _task_get_creator
1440:../MQXLITE/kernel/task.c ****  * \see _task_get_processor
1441:../MQXLITE/kernel/task.c ****  * \see _task_get_id
1442:../MQXLITE/kernel/task.c ****  */
1443:../MQXLITE/kernel/task.c **** _task_id _task_get_id_from_name
1444:../MQXLITE/kernel/task.c **** (
1445:../MQXLITE/kernel/task.c ****     char_ptr name_ptr
1446:../MQXLITE/kernel/task.c **** )
1447:../MQXLITE/kernel/task.c **** { /* Body */
 1159              		.loc 1 1447 0
 1160              		.cfi_startproc
 1161 0000 80B5     		push	{r7, lr}
 1162              	.LCFI27:
 1163              		.cfi_def_cfa_offset 8
 1164              		.cfi_offset 7, -8
 1165              		.cfi_offset 14, -4
 1166 0002 86B0     		sub	sp, sp, #24
 1167              	.LCFI28:
 1168              		.cfi_def_cfa_offset 32
 1169 0004 00AF     		add	r7, sp, #0
 1170              	.LCFI29:
 1171              		.cfi_def_cfa_register 7
 1172 0006 7860     		str	r0, [r7, #4]
1448:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR  kernel_data;
1449:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR           td_ptr;
1450:../MQXLITE/kernel/task.c ****     _mqx_uint               size;
1451:../MQXLITE/kernel/task.c **** 
1452:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 1173              		.loc 1 1452 0
 1174 0008 1E4B     		ldr	r3, .L66
 1175 000a 1B68     		ldr	r3, [r3]
 1176 000c FB60     		str	r3, [r7, #12]
1453:../MQXLITE/kernel/task.c **** 
1454:../MQXLITE/kernel/task.c ****     _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 1177              		.loc 1 1454 0
 1178 000e FB68     		ldr	r3, [r7, #12]
 1179 0010 F433     		add	r3, r3, #244
 1180 0012 181C     		mov	r0, r3
 1181 0014 FFF7FEFF 		bl	_lwsem_wait
1455:../MQXLITE/kernel/task.c **** 
1456:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR)((uchar_ptr)kernel_data->TD_LIST.NEXT -
 1182              		.loc 1 1456 0
 1183 0018 FA68     		ldr	r2, [r7, #12]
 1184 001a C823     		mov	r3, #200
 1185 001c D358     		ldr	r3, [r2, r3]
 1186 001e 5C3B     		sub	r3, r3, #92
 1187 0020 7B61     		str	r3, [r7, #20]
1457:../MQXLITE/kernel/task.c ****              FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
1458:../MQXLITE/kernel/task.c ****     size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
 1188              		.loc 1 1458 0
 1189 0022 FB68     		ldr	r3, [r7, #12]
 1190 0024 C833     		add	r3, r3, #200
 1191 0026 1B89     		ldrh	r3, [r3, #8]
 1192 0028 3B61     		str	r3, [r7, #16]
1459:../MQXLITE/kernel/task.c **** 
1460:../MQXLITE/kernel/task.c ****     while (size && td_ptr)
 1193              		.loc 1 1460 0
 1194 002a 1AE0     		b	.L61
 1195              	.L65:
1461:../MQXLITE/kernel/task.c ****     {
1462:../MQXLITE/kernel/task.c ****         if (strncmp( td_ptr->TASK_TEMPLATE_PTR->TASK_NAME, name_ptr,
 1196              		.loc 1 1462 0
 1197 002c 7B69     		ldr	r3, [r7, #20]
 1198 002e 9B6D     		ldr	r3, [r3, #88]
 1199 0030 1A69     		ldr	r2, [r3, #16]
 1200 0032 7B68     		ldr	r3, [r7, #4]
 1201 0034 101C     		mov	r0, r2
 1202 0036 191C     		mov	r1, r3
 1203 0038 3222     		mov	r2, #50
 1204 003a FFF7FEFF 		bl	strncmp
 1205 003e 031C     		mov	r3, r0
 1206 0040 002B     		cmp	r3, #0
 1207 0042 07D1     		bne	.L62
1463:../MQXLITE/kernel/task.c ****                         MQX_MAX_TASK_NAME_SIZE) == 0)
1464:../MQXLITE/kernel/task.c ****         {
1465:../MQXLITE/kernel/task.c ****             _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 1208              		.loc 1 1465 0
 1209 0044 FB68     		ldr	r3, [r7, #12]
 1210 0046 F433     		add	r3, r3, #244
 1211 0048 181C     		mov	r0, r3
 1212 004a FFF7FEFF 		bl	_lwsem_post
1466:../MQXLITE/kernel/task.c ****             return td_ptr->TASK_ID;
 1213              		.loc 1 1466 0
 1214 004e 7B69     		ldr	r3, [r7, #20]
 1215 0050 DB68     		ldr	r3, [r3, #12]
 1216 0052 12E0     		b	.L63
 1217              	.L62:
1467:../MQXLITE/kernel/task.c ****         } /* Endif */
1468:../MQXLITE/kernel/task.c ****         size--;
 1218              		.loc 1 1468 0
 1219 0054 3B69     		ldr	r3, [r7, #16]
 1220 0056 013B     		sub	r3, r3, #1
 1221 0058 3B61     		str	r3, [r7, #16]
1469:../MQXLITE/kernel/task.c ****         td_ptr = (TD_STRUCT_PTR)((uchar_ptr)(td_ptr->TD_LIST_INFO.NEXT) -
 1222              		.loc 1 1469 0
 1223 005a 7B69     		ldr	r3, [r7, #20]
 1224 005c DB6D     		ldr	r3, [r3, #92]
 1225 005e 5C3B     		sub	r3, r3, #92
 1226 0060 7B61     		str	r3, [r7, #20]
 1227              	.L61:
1460:../MQXLITE/kernel/task.c ****     while (size && td_ptr)
 1228              		.loc 1 1460 0
 1229 0062 3B69     		ldr	r3, [r7, #16]
 1230 0064 002B     		cmp	r3, #0
 1231 0066 02D0     		beq	.L64
1460:../MQXLITE/kernel/task.c ****     while (size && td_ptr)
 1232              		.loc 1 1460 0 is_stmt 0
 1233 0068 7B69     		ldr	r3, [r7, #20]
 1234 006a 002B     		cmp	r3, #0
 1235 006c DED1     		bne	.L65
 1236              	.L64:
1470:../MQXLITE/kernel/task.c ****                  FIELD_OFFSET(TD_STRUCT,TD_LIST_INFO));
1471:../MQXLITE/kernel/task.c ****     } /* Endwhile */
1472:../MQXLITE/kernel/task.c **** 
1473:../MQXLITE/kernel/task.c ****     _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 1237              		.loc 1 1473 0 is_stmt 1
 1238 006e FB68     		ldr	r3, [r7, #12]
 1239 0070 F433     		add	r3, r3, #244
 1240 0072 181C     		mov	r0, r3
 1241 0074 FFF7FEFF 		bl	_lwsem_post
1474:../MQXLITE/kernel/task.c **** 
1475:../MQXLITE/kernel/task.c ****     return MQX_NULL_TASK_ID;
 1242              		.loc 1 1475 0
 1243 0078 0023     		mov	r3, #0
 1244              	.L63:
1476:../MQXLITE/kernel/task.c **** 
1477:../MQXLITE/kernel/task.c **** } /* Endbody */
 1245              		.loc 1 1477 0
 1246 007a 181C     		mov	r0, r3
 1247 007c BD46     		mov	sp, r7
 1248 007e 06B0     		add	sp, sp, #24
 1249              		@ sp needed for prologue
 1250 0080 80BD     		pop	{r7, pc}
 1251              	.L67:
 1252 0082 C046     		.align	2
 1253              	.L66:
 1254 0084 00000000 		.word	_mqx_kernel_data
 1255              		.cfi_endproc
 1256              	.LFE9:
 1258              		.section	.text._task_get_template_ptr,"ax",%progbits
 1259              		.align	2
 1260              		.global	_task_get_template_ptr
 1261              		.code	16
 1262              		.thumb_func
 1264              	_task_get_template_ptr:
 1265              	.LFB10:
1478:../MQXLITE/kernel/task.c **** 
1479:../MQXLITE/kernel/task.c **** /*!
1480:../MQXLITE/kernel/task.c ****  * \brief Gets the pointer to the task template for the task ID.
1481:../MQXLITE/kernel/task.c ****  *
1482:../MQXLITE/kernel/task.c ****  * \param[in] task_id Task ID for the task for which to get pointer.
1483:../MQXLITE/kernel/task.c ****  *
1484:../MQXLITE/kernel/task.c ****  * \return Pointer to the task's task template. NULL if an invalid task_id is
1485:../MQXLITE/kernel/task.c ****  * presented.
1486:../MQXLITE/kernel/task.c ****  *
1487:../MQXLITE/kernel/task.c ****  * \see _task_get_template_index
1488:../MQXLITE/kernel/task.c ****  * \see _task_get_index_from_id
1489:../MQXLITE/kernel/task.c ****  * \see TASK_TEMPLATE_STRUCT
1490:../MQXLITE/kernel/task.c ****  */
1491:../MQXLITE/kernel/task.c **** TASK_TEMPLATE_STRUCT_PTR  _task_get_template_ptr
1492:../MQXLITE/kernel/task.c **** (
1493:../MQXLITE/kernel/task.c ****     _task_id  task_id
1494:../MQXLITE/kernel/task.c **** )
1495:../MQXLITE/kernel/task.c **** { /* Body */
 1266              		.loc 1 1495 0
 1267              		.cfi_startproc
 1268 0000 80B5     		push	{r7, lr}
 1269              	.LCFI30:
 1270              		.cfi_def_cfa_offset 8
 1271              		.cfi_offset 7, -8
 1272              		.cfi_offset 14, -4
 1273 0002 84B0     		sub	sp, sp, #16
 1274              	.LCFI31:
 1275              		.cfi_def_cfa_offset 24
 1276 0004 00AF     		add	r7, sp, #0
 1277              	.LCFI32:
 1278              		.cfi_def_cfa_register 7
 1279 0006 7860     		str	r0, [r7, #4]
1496:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR  td_ptr;
1497:../MQXLITE/kernel/task.c **** 
1498:../MQXLITE/kernel/task.c ****     td_ptr = _task_get_td(task_id);
 1280              		.loc 1 1498 0
 1281 0008 7B68     		ldr	r3, [r7, #4]
 1282 000a 181C     		mov	r0, r3
 1283 000c FFF7FEFF 		bl	_task_get_td
 1284 0010 031C     		mov	r3, r0
 1285 0012 FB60     		str	r3, [r7, #12]
1499:../MQXLITE/kernel/task.c **** 
1500:../MQXLITE/kernel/task.c ****     return (td_ptr ? td_ptr->TASK_TEMPLATE_PTR : NULL);
 1286              		.loc 1 1500 0
 1287 0014 FB68     		ldr	r3, [r7, #12]
 1288 0016 002B     		cmp	r3, #0
 1289 0018 02D0     		beq	.L69
 1290              		.loc 1 1500 0 is_stmt 0
 1291 001a FB68     		ldr	r3, [r7, #12]
 1292 001c 9B6D     		ldr	r3, [r3, #88]
 1293 001e 00E0     		b	.L70
 1294              	.L69:
 1295              		.loc 1 1500 0
 1296 0020 0023     		mov	r3, #0
 1297              	.L70:
1501:../MQXLITE/kernel/task.c **** 
1502:../MQXLITE/kernel/task.c **** } /* Endbody */
 1298              		.loc 1 1502 0 is_stmt 1
 1299 0022 181C     		mov	r0, r3
 1300 0024 BD46     		mov	sp, r7
 1301 0026 04B0     		add	sp, sp, #16
 1302              		@ sp needed for prologue
 1303 0028 80BD     		pop	{r7, pc}
 1304              		.cfi_endproc
 1305              	.LFE10:
 1307 002a C046     		.section	.text._task_get_template_index,"ax",%progbits
 1308              		.align	2
 1309              		.global	_task_get_template_index
 1310              		.code	16
 1311              		.thumb_func
 1313              	_task_get_template_index:
 1314              	.LFB11:
1503:../MQXLITE/kernel/task.c **** 
1504:../MQXLITE/kernel/task.c **** #endif /* MQX_TD_HAS_TASK_TEMPLATE_PTR */
1505:../MQXLITE/kernel/task.c **** 
1506:../MQXLITE/kernel/task.c **** /*!
1507:../MQXLITE/kernel/task.c ****  * \brief Gets the task template index that is associated with the task name.
1508:../MQXLITE/kernel/task.c ****  *
1509:../MQXLITE/kernel/task.c ****  * \param[in] name_ptr Pointer to the name to find in the task template list.
1510:../MQXLITE/kernel/task.c ****  *
1511:../MQXLITE/kernel/task.c ****  * \return Task template index that is associated with the first match of name_ptr.
1512:../MQXLITE/kernel/task.c ****  * \return MQX_NULL_TASK_ID (Name is not in the task template list.)
1513:../MQXLITE/kernel/task.c ****  *
1514:../MQXLITE/kernel/task.c ****  * \see _task_get_id_from_name
1515:../MQXLITE/kernel/task.c ****  * \see _task_get_index_from_id
1516:../MQXLITE/kernel/task.c ****  */
1517:../MQXLITE/kernel/task.c **** _mqx_uint  _task_get_template_index
1518:../MQXLITE/kernel/task.c **** (
1519:../MQXLITE/kernel/task.c ****     char_ptr name_ptr
1520:../MQXLITE/kernel/task.c **** )
1521:../MQXLITE/kernel/task.c **** { /* Body */
 1315              		.loc 1 1521 0
 1316              		.cfi_startproc
 1317 0000 80B5     		push	{r7, lr}
 1318              	.LCFI33:
 1319              		.cfi_def_cfa_offset 8
 1320              		.cfi_offset 7, -8
 1321              		.cfi_offset 14, -4
 1322 0002 84B0     		sub	sp, sp, #16
 1323              	.LCFI34:
 1324              		.cfi_def_cfa_offset 24
 1325 0004 00AF     		add	r7, sp, #0
 1326              	.LCFI35:
 1327              		.cfi_def_cfa_register 7
 1328 0006 7860     		str	r0, [r7, #4]
1522:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR   kernel_data;
1523:../MQXLITE/kernel/task.c ****     TASK_TEMPLATE_STRUCT_PTR task_template_ptr;
1524:../MQXLITE/kernel/task.c **** 
1525:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 1329              		.loc 1 1525 0
 1330 0008 184B     		ldr	r3, .L79
 1331 000a 1B68     		ldr	r3, [r3]
 1332 000c BB60     		str	r3, [r7, #8]
1526:../MQXLITE/kernel/task.c **** 
1527:../MQXLITE/kernel/task.c ****     _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 1333              		.loc 1 1527 0
 1334 000e BB68     		ldr	r3, [r7, #8]
 1335 0010 F433     		add	r3, r3, #244
 1336 0012 181C     		mov	r0, r3
 1337 0014 FFF7FEFF 		bl	_lwsem_wait
1528:../MQXLITE/kernel/task.c **** 
1529:../MQXLITE/kernel/task.c ****     /* Search all the local task templates for one whose index matches */
1530:../MQXLITE/kernel/task.c ****     task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
 1338              		.loc 1 1530 0
 1339 0018 BA68     		ldr	r2, [r7, #8]
 1340 001a B823     		mov	r3, #184
 1341 001c 5B00     		lsl	r3, r3, #1
 1342 001e D358     		ldr	r3, [r2, r3]
 1343 0020 FB60     		str	r3, [r7, #12]
1531:../MQXLITE/kernel/task.c **** 
1532:../MQXLITE/kernel/task.c ****     while (task_template_ptr->TASK_TEMPLATE_INDEX)
 1344              		.loc 1 1532 0
 1345 0022 11E0     		b	.L73
 1346              	.L76:
1533:../MQXLITE/kernel/task.c ****     {
1534:../MQXLITE/kernel/task.c ****         if (task_template_ptr->TASK_NAME != NULL)
 1347              		.loc 1 1534 0
 1348 0024 FB68     		ldr	r3, [r7, #12]
 1349 0026 1B69     		ldr	r3, [r3, #16]
 1350 0028 002B     		cmp	r3, #0
 1351 002a 0AD0     		beq	.L74
1535:../MQXLITE/kernel/task.c ****         {
1536:../MQXLITE/kernel/task.c ****             if (strncmp( task_template_ptr->TASK_NAME, name_ptr,
 1352              		.loc 1 1536 0
 1353 002c FB68     		ldr	r3, [r7, #12]
 1354 002e 1A69     		ldr	r2, [r3, #16]
 1355 0030 7B68     		ldr	r3, [r7, #4]
 1356 0032 101C     		mov	r0, r2
 1357 0034 191C     		mov	r1, r3
 1358 0036 3222     		mov	r2, #50
 1359 0038 FFF7FEFF 		bl	strncmp
 1360 003c 031C     		mov	r3, r0
 1361 003e 002B     		cmp	r3, #0
 1362 0040 07D0     		beq	.L78
 1363              	.L74:
1537:../MQXLITE/kernel/task.c ****                             MQX_MAX_TASK_NAME_SIZE) == 0)
1538:../MQXLITE/kernel/task.c ****             {
1539:../MQXLITE/kernel/task.c ****                 break;
1540:../MQXLITE/kernel/task.c ****             } /* Endif */
1541:../MQXLITE/kernel/task.c ****         } /* Endif */
1542:../MQXLITE/kernel/task.c ****         ++task_template_ptr;
 1364              		.loc 1 1542 0
 1365 0042 FB68     		ldr	r3, [r7, #12]
 1366 0044 1C33     		add	r3, r3, #28
 1367 0046 FB60     		str	r3, [r7, #12]
 1368              	.L73:
1532:../MQXLITE/kernel/task.c ****     while (task_template_ptr->TASK_TEMPLATE_INDEX)
 1369              		.loc 1 1532 0
 1370 0048 FB68     		ldr	r3, [r7, #12]
 1371 004a 1B68     		ldr	r3, [r3]
 1372 004c 002B     		cmp	r3, #0
 1373 004e E9D1     		bne	.L76
 1374 0050 00E0     		b	.L75
 1375              	.L78:
1539:../MQXLITE/kernel/task.c ****                 break;
 1376              		.loc 1 1539 0
 1377 0052 C046     		mov	r8, r8
 1378              	.L75:
1543:../MQXLITE/kernel/task.c ****     } /* Endwhile */
1544:../MQXLITE/kernel/task.c **** 
1545:../MQXLITE/kernel/task.c ****     _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 1379              		.loc 1 1545 0
 1380 0054 BB68     		ldr	r3, [r7, #8]
 1381 0056 F433     		add	r3, r3, #244
 1382 0058 181C     		mov	r0, r3
 1383 005a FFF7FEFF 		bl	_lwsem_post
1546:../MQXLITE/kernel/task.c **** 
1547:../MQXLITE/kernel/task.c ****     return task_template_ptr->TASK_TEMPLATE_INDEX;
 1384              		.loc 1 1547 0
 1385 005e FB68     		ldr	r3, [r7, #12]
 1386 0060 1B68     		ldr	r3, [r3]
1548:../MQXLITE/kernel/task.c **** 
1549:../MQXLITE/kernel/task.c **** } /* Endwhile */
 1387              		.loc 1 1549 0
 1388 0062 181C     		mov	r0, r3
 1389 0064 BD46     		mov	sp, r7
 1390 0066 04B0     		add	sp, sp, #16
 1391              		@ sp needed for prologue
 1392 0068 80BD     		pop	{r7, pc}
 1393              	.L80:
 1394 006a C046     		.align	2
 1395              	.L79:
 1396 006c 00000000 		.word	_mqx_kernel_data
 1397              		.cfi_endproc
 1398              	.LFE11:
 1400              		.section	.text._task_get_id_from_td,"ax",%progbits
 1401              		.align	2
 1402              		.global	_task_get_id_from_td
 1403              		.code	16
 1404              		.thumb_func
 1406              	_task_get_id_from_td:
 1407              	.LFB12:
1550:../MQXLITE/kernel/task.c **** 
1551:../MQXLITE/kernel/task.c **** /*!
1552:../MQXLITE/kernel/task.c ****  * \brief Gets the task ID out of the task descriptor.
1553:../MQXLITE/kernel/task.c ****  *
1554:../MQXLITE/kernel/task.c ****  * \param[in] td_ptr Pointer to the task descriptor.
1555:../MQXLITE/kernel/task.c ****  *
1556:../MQXLITE/kernel/task.c ****  * \return TASK_ID Task ID
1557:../MQXLITE/kernel/task.c ****  * \return MQX_NULL_TASK_ID
1558:../MQXLITE/kernel/task.c ****  */
1559:../MQXLITE/kernel/task.c **** _task_id _task_get_id_from_td
1560:../MQXLITE/kernel/task.c **** (
1561:../MQXLITE/kernel/task.c ****     pointer td_ptr
1562:../MQXLITE/kernel/task.c **** )
1563:../MQXLITE/kernel/task.c **** {
 1408              		.loc 1 1563 0
 1409              		.cfi_startproc
 1410 0000 80B5     		push	{r7, lr}
 1411              	.LCFI36:
 1412              		.cfi_def_cfa_offset 8
 1413              		.cfi_offset 7, -8
 1414              		.cfi_offset 14, -4
 1415 0002 82B0     		sub	sp, sp, #8
 1416              	.LCFI37:
 1417              		.cfi_def_cfa_offset 16
 1418 0004 00AF     		add	r7, sp, #0
 1419              	.LCFI38:
 1420              		.cfi_def_cfa_register 7
 1421 0006 7860     		str	r0, [r7, #4]
1564:../MQXLITE/kernel/task.c ****     if (NULL == td_ptr)
 1422              		.loc 1 1564 0
 1423 0008 7B68     		ldr	r3, [r7, #4]
 1424 000a 002B     		cmp	r3, #0
 1425 000c 01D1     		bne	.L82
1565:../MQXLITE/kernel/task.c ****     {
1566:../MQXLITE/kernel/task.c ****         return MQX_NULL_TASK_ID;
 1426              		.loc 1 1566 0
 1427 000e 0023     		mov	r3, #0
 1428 0010 01E0     		b	.L83
 1429              	.L82:
1567:../MQXLITE/kernel/task.c ****     }
1568:../MQXLITE/kernel/task.c ****     return ((TD_STRUCT_PTR)td_ptr)->TASK_ID;
 1430              		.loc 1 1568 0
 1431 0012 7B68     		ldr	r3, [r7, #4]
 1432 0014 DB68     		ldr	r3, [r3, #12]
 1433              	.L83:
1569:../MQXLITE/kernel/task.c **** }
 1434              		.loc 1 1569 0
 1435 0016 181C     		mov	r0, r3
 1436 0018 BD46     		mov	sp, r7
 1437 001a 02B0     		add	sp, sp, #8
 1438              		@ sp needed for prologue
 1439 001c 80BD     		pop	{r7, pc}
 1440              		.cfi_endproc
 1441              	.LFE12:
 1443 001e C046     		.section	.text._task_get_index_from_id,"ax",%progbits
 1444              		.align	2
 1445              		.global	_task_get_index_from_id
 1446              		.code	16
 1447              		.thumb_func
 1449              	_task_get_index_from_id:
 1450              	.LFB13:
1570:../MQXLITE/kernel/task.c **** 
1571:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_TASK_TEMPLATE_PTR || MQX_TD_HAS_TEMPLATE_INDEX
1572:../MQXLITE/kernel/task.c **** 
1573:../MQXLITE/kernel/task.c **** /*!
1574:../MQXLITE/kernel/task.c ****  * \brief Gets the task template index for the task ID.
1575:../MQXLITE/kernel/task.c ****  *
1576:../MQXLITE/kernel/task.c ****  * \param[in] task_id Task ID to look up.
1577:../MQXLITE/kernel/task.c ****  *
1578:../MQXLITE/kernel/task.c ****  * \return Task template index.
1579:../MQXLITE/kernel/task.c ****  * \return 0 (Task ID was not found.)
1580:../MQXLITE/kernel/task.c ****  *
1581:../MQXLITE/kernel/task.c ****  * \see _task_get_template_index
1582:../MQXLITE/kernel/task.c ****  */
1583:../MQXLITE/kernel/task.c **** _mqx_uint _task_get_index_from_id
1584:../MQXLITE/kernel/task.c **** (
1585:../MQXLITE/kernel/task.c ****     _task_id task_id
1586:../MQXLITE/kernel/task.c **** )
1587:../MQXLITE/kernel/task.c **** { /* Body */
 1451              		.loc 1 1587 0
 1452              		.cfi_startproc
 1453 0000 80B5     		push	{r7, lr}
 1454              	.LCFI39:
 1455              		.cfi_def_cfa_offset 8
 1456              		.cfi_offset 7, -8
 1457              		.cfi_offset 14, -4
 1458 0002 84B0     		sub	sp, sp, #16
 1459              	.LCFI40:
 1460              		.cfi_def_cfa_offset 24
 1461 0004 00AF     		add	r7, sp, #0
 1462              	.LCFI41:
 1463              		.cfi_def_cfa_register 7
 1464 0006 7860     		str	r0, [r7, #4]
1588:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR           td_ptr;
1589:../MQXLITE/kernel/task.c **** 
1590:../MQXLITE/kernel/task.c ****     td_ptr = _task_get_td(task_id);
 1465              		.loc 1 1590 0
 1466 0008 7B68     		ldr	r3, [r7, #4]
 1467 000a 181C     		mov	r0, r3
 1468 000c FFF7FEFF 		bl	_task_get_td
 1469 0010 031C     		mov	r3, r0
 1470 0012 FB60     		str	r3, [r7, #12]
1591:../MQXLITE/kernel/task.c **** 
1592:../MQXLITE/kernel/task.c ****     if (td_ptr == NULL)
 1471              		.loc 1 1592 0
 1472 0014 FB68     		ldr	r3, [r7, #12]
 1473 0016 002B     		cmp	r3, #0
 1474 0018 01D1     		bne	.L85
1593:../MQXLITE/kernel/task.c ****     {
1594:../MQXLITE/kernel/task.c ****         return 0;
 1475              		.loc 1 1594 0
 1476 001a 0023     		mov	r3, #0
 1477 001c 02E0     		b	.L86
 1478              	.L85:
1595:../MQXLITE/kernel/task.c ****     } /* Endif */
1596:../MQXLITE/kernel/task.c **** 
1597:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_TASK_TEMPLATE_PTR
1598:../MQXLITE/kernel/task.c ****     return td_ptr->TASK_TEMPLATE_PTR->TASK_TEMPLATE_INDEX;
 1479              		.loc 1 1598 0
 1480 001e FB68     		ldr	r3, [r7, #12]
 1481 0020 9B6D     		ldr	r3, [r3, #88]
 1482 0022 1B68     		ldr	r3, [r3]
 1483              	.L86:
1599:../MQXLITE/kernel/task.c **** #elif MQX_TD_HAS_TEMPLATE_INDEX
1600:../MQXLITE/kernel/task.c ****     return td_ptr->TEMPLATE_INDEX;
1601:../MQXLITE/kernel/task.c **** #else
1602:../MQXLITE/kernel/task.c ****     return 0;
1603:../MQXLITE/kernel/task.c **** #endif
1604:../MQXLITE/kernel/task.c **** 
1605:../MQXLITE/kernel/task.c **** } /* Endbody */
 1484              		.loc 1 1605 0
 1485 0024 181C     		mov	r0, r3
 1486 0026 BD46     		mov	sp, r7
 1487 0028 04B0     		add	sp, sp, #16
 1488              		@ sp needed for prologue
 1489 002a 80BD     		pop	{r7, pc}
 1490              		.cfi_endproc
 1491              	.LFE13:
 1493              		.section	.text._task_get_parameter,"ax",%progbits
 1494              		.align	2
 1495              		.global	_task_get_parameter
 1496              		.code	16
 1497              		.thumb_func
 1499              	_task_get_parameter:
 1500              	.LFB14:
1606:../MQXLITE/kernel/task.c **** #endif /* MQX_TD_HAS_TASK_TEMPLATE_PTR || MQX_TD_HAS_TEMPLATE_INDEX */
1607:../MQXLITE/kernel/task.c **** 
1608:../MQXLITE/kernel/task.c **** /*!
1609:../MQXLITE/kernel/task.c ****  * \brief Gets the task creation parameter of the active task.
1610:../MQXLITE/kernel/task.c ****  *
1611:../MQXLITE/kernel/task.c ****  * If a deeply nested function needs the task creation parameter, it can get the
1612:../MQXLITE/kernel/task.c ****  * parameter with _task_get_parameter() or _task_get_parameter_for() rather than
1613:../MQXLITE/kernel/task.c ****  * have the task's main body pass the parameter to it.
1614:../MQXLITE/kernel/task.c ****  *
1615:../MQXLITE/kernel/task.c ****  * \return Creation parameter (might be NULL).
1616:../MQXLITE/kernel/task.c ****  *
1617:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter_for
1618:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter
1619:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter_for
1620:../MQXLITE/kernel/task.c ****  * \see _task_create
1621:../MQXLITE/kernel/task.c ****  * \see _task_create_blocked
1622:../MQXLITE/kernel/task.c ****  * \see _task_create_at
1623:../MQXLITE/kernel/task.c ****  */
1624:../MQXLITE/kernel/task.c **** uint_32 _task_get_parameter(void)
1625:../MQXLITE/kernel/task.c **** { /* Body */
 1501              		.loc 1 1625 0
 1502              		.cfi_startproc
 1503 0000 80B5     		push	{r7, lr}
 1504              	.LCFI42:
 1505              		.cfi_def_cfa_offset 8
 1506              		.cfi_offset 7, -8
 1507              		.cfi_offset 14, -4
 1508 0002 82B0     		sub	sp, sp, #8
 1509              	.LCFI43:
 1510              		.cfi_def_cfa_offset 16
 1511 0004 00AF     		add	r7, sp, #0
 1512              	.LCFI44:
 1513              		.cfi_def_cfa_register 7
1626:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR     kernel_data;
1627:../MQXLITE/kernel/task.c **** 
1628:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 1514              		.loc 1 1628 0
 1515 0006 064B     		ldr	r3, .L89
 1516 0008 1B68     		ldr	r3, [r3]
 1517 000a 7B60     		str	r3, [r7, #4]
1629:../MQXLITE/kernel/task.c **** 
1630:../MQXLITE/kernel/task.c ****     return _task_get_parameter_internal(kernel_data->ACTIVE_PTR);
 1518              		.loc 1 1630 0
 1519 000c 7B68     		ldr	r3, [r7, #4]
 1520 000e DB69     		ldr	r3, [r3, #28]
 1521 0010 181C     		mov	r0, r3
 1522 0012 FFF7FEFF 		bl	_task_get_parameter_internal
 1523 0016 031C     		mov	r3, r0
1631:../MQXLITE/kernel/task.c **** 
1632:../MQXLITE/kernel/task.c **** } /* Endbody */
 1524              		.loc 1 1632 0
 1525 0018 181C     		mov	r0, r3
 1526 001a BD46     		mov	sp, r7
 1527 001c 02B0     		add	sp, sp, #8
 1528              		@ sp needed for prologue
 1529 001e 80BD     		pop	{r7, pc}
 1530              	.L90:
 1531              		.align	2
 1532              	.L89:
 1533 0020 00000000 		.word	_mqx_kernel_data
 1534              		.cfi_endproc
 1535              	.LFE14:
 1537              		.section	.text._task_get_parameter_for,"ax",%progbits
 1538              		.align	2
 1539              		.global	_task_get_parameter_for
 1540              		.code	16
 1541              		.thumb_func
 1543              	_task_get_parameter_for:
 1544              	.LFB15:
1633:../MQXLITE/kernel/task.c **** 
1634:../MQXLITE/kernel/task.c **** /*!
1635:../MQXLITE/kernel/task.c ****  * \brief Gets the task creation parameter of the specified task.
1636:../MQXLITE/kernel/task.c ****  *
1637:../MQXLITE/kernel/task.c ****  * If a deeply nested function needs the task creation parameter, it can get the
1638:../MQXLITE/kernel/task.c ****  * parameter with _task_get_parameter() or _task_get_parameter_for() rather than
1639:../MQXLITE/kernel/task.c ****  * have the task's main body pass the parameter to it.
1640:../MQXLITE/kernel/task.c ****  *
1641:../MQXLITE/kernel/task.c ****  * \param[in] tid Task ID of the task to get creation parameter from.
1642:../MQXLITE/kernel/task.c ****  *
1643:../MQXLITE/kernel/task.c ****  * \return Creation parameter (might be NULL).
1644:../MQXLITE/kernel/task.c ****  *
1645:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter
1646:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter
1647:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter_for
1648:../MQXLITE/kernel/task.c ****  * \see _task_create
1649:../MQXLITE/kernel/task.c ****  * \see _task_create_blocked
1650:../MQXLITE/kernel/task.c ****  * \see _task_create_at
1651:../MQXLITE/kernel/task.c ****  */
1652:../MQXLITE/kernel/task.c **** uint_32 _task_get_parameter_for
1653:../MQXLITE/kernel/task.c **** (
1654:../MQXLITE/kernel/task.c ****     _task_id  tid
1655:../MQXLITE/kernel/task.c **** )
1656:../MQXLITE/kernel/task.c **** { /* Body */
 1545              		.loc 1 1656 0
 1546              		.cfi_startproc
 1547 0000 80B5     		push	{r7, lr}
 1548              	.LCFI45:
 1549              		.cfi_def_cfa_offset 8
 1550              		.cfi_offset 7, -8
 1551              		.cfi_offset 14, -4
 1552 0002 84B0     		sub	sp, sp, #16
 1553              	.LCFI46:
 1554              		.cfi_def_cfa_offset 24
 1555 0004 00AF     		add	r7, sp, #0
 1556              	.LCFI47:
 1557              		.cfi_def_cfa_register 7
 1558 0006 7860     		str	r0, [r7, #4]
1657:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR td_ptr;
1658:../MQXLITE/kernel/task.c **** 
1659:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR)_task_get_td(tid);
 1559              		.loc 1 1659 0
 1560 0008 7B68     		ldr	r3, [r7, #4]
 1561 000a 181C     		mov	r0, r3
 1562 000c FFF7FEFF 		bl	_task_get_td
 1563 0010 031C     		mov	r3, r0
 1564 0012 FB60     		str	r3, [r7, #12]
1660:../MQXLITE/kernel/task.c **** 
1661:../MQXLITE/kernel/task.c ****     return _task_get_parameter_internal(td_ptr);
 1565              		.loc 1 1661 0
 1566 0014 FB68     		ldr	r3, [r7, #12]
 1567 0016 181C     		mov	r0, r3
 1568 0018 FFF7FEFF 		bl	_task_get_parameter_internal
 1569 001c 031C     		mov	r3, r0
1662:../MQXLITE/kernel/task.c **** 
1663:../MQXLITE/kernel/task.c **** } /* Endbody */
 1570              		.loc 1 1663 0
 1571 001e 181C     		mov	r0, r3
 1572 0020 BD46     		mov	sp, r7
 1573 0022 04B0     		add	sp, sp, #16
 1574              		@ sp needed for prologue
 1575 0024 80BD     		pop	{r7, pc}
 1576              		.cfi_endproc
 1577              	.LFE15:
 1579 0026 C046     		.section	.text._task_get_parameter_internal,"ax",%progbits
 1580              		.align	2
 1581              		.global	_task_get_parameter_internal
 1582              		.code	16
 1583              		.thumb_func
 1585              	_task_get_parameter_internal:
 1586              	.LFB16:
1664:../MQXLITE/kernel/task.c **** 
1665:../MQXLITE/kernel/task.c **** /*!
1666:../MQXLITE/kernel/task.c ****  * \private
1667:../MQXLITE/kernel/task.c ****  *
1668:../MQXLITE/kernel/task.c ****  * \brief Gets the task creation parameter of the specified task.
1669:../MQXLITE/kernel/task.c ****  *
1670:../MQXLITE/kernel/task.c ****  * \param[in] td_ptr Task ID of the task to get creation parameter from.
1671:../MQXLITE/kernel/task.c ****  *
1672:../MQXLITE/kernel/task.c ****  * \return Creation parameter (might be NULL).
1673:../MQXLITE/kernel/task.c ****  *
1674:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter
1675:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter_for
1676:../MQXLITE/kernel/task.c ****  *
1677:../MQXLITE/kernel/task.c ****  * \see TD_STRUCT
1678:../MQXLITE/kernel/task.c ****  */
1679:../MQXLITE/kernel/task.c **** uint_32 _task_get_parameter_internal
1680:../MQXLITE/kernel/task.c **** (
1681:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR td_ptr
1682:../MQXLITE/kernel/task.c **** )
1683:../MQXLITE/kernel/task.c **** {
 1587              		.loc 1 1683 0
 1588              		.cfi_startproc
 1589 0000 80B5     		push	{r7, lr}
 1590              	.LCFI48:
 1591              		.cfi_def_cfa_offset 8
 1592              		.cfi_offset 7, -8
 1593              		.cfi_offset 14, -4
 1594 0002 84B0     		sub	sp, sp, #16
 1595              	.LCFI49:
 1596              		.cfi_def_cfa_offset 24
 1597 0004 00AF     		add	r7, sp, #0
 1598              	.LCFI50:
 1599              		.cfi_def_cfa_register 7
 1600 0006 7860     		str	r0, [r7, #4]
1684:../MQXLITE/kernel/task.c ****     PSP_STACK_START_STRUCT_PTR stack_start_ptr;
1685:../MQXLITE/kernel/task.c ****     stack_start_ptr = _psp_get_stack_start(td_ptr);
 1601              		.loc 1 1685 0
 1602 0008 7B68     		ldr	r3, [r7, #4]
 1603 000a 181C     		mov	r0, r3
 1604 000c FFF7FEFF 		bl	_psp_get_stack_start
 1605 0010 031C     		mov	r3, r0
 1606 0012 FB60     		str	r3, [r7, #12]
1686:../MQXLITE/kernel/task.c ****     return PSP_TASK_PARAM(stack_start_ptr);
 1607              		.loc 1 1686 0
 1608 0014 FB68     		ldr	r3, [r7, #12]
 1609 0016 DB6C     		ldr	r3, [r3, #76]
1687:../MQXLITE/kernel/task.c **** }
 1610              		.loc 1 1687 0
 1611 0018 181C     		mov	r0, r3
 1612 001a BD46     		mov	sp, r7
 1613 001c 04B0     		add	sp, sp, #16
 1614              		@ sp needed for prologue
 1615 001e 80BD     		pop	{r7, pc}
 1616              		.cfi_endproc
 1617              	.LFE16:
 1619              		.section	.text._task_set_parameter,"ax",%progbits
 1620              		.align	2
 1621              		.global	_task_set_parameter
 1622              		.code	16
 1623              		.thumb_func
 1625              	_task_set_parameter:
 1626              	.LFB17:
1688:../MQXLITE/kernel/task.c **** 
1689:../MQXLITE/kernel/task.c **** /*!
1690:../MQXLITE/kernel/task.c ****  * \brief Sets the task creation parameter of the active task.
1691:../MQXLITE/kernel/task.c ****  *
1692:../MQXLITE/kernel/task.c ****  * \param[in] new_value Value to set the task parameter to.
1693:../MQXLITE/kernel/task.c ****  *
1694:../MQXLITE/kernel/task.c ****  * \return Previous creation parameter (might be NULL).
1695:../MQXLITE/kernel/task.c ****  *
1696:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter
1697:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter_for
1698:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter_for
1699:../MQXLITE/kernel/task.c ****  * \see _task_create
1700:../MQXLITE/kernel/task.c ****  * \see _task_create_blocked
1701:../MQXLITE/kernel/task.c ****  * \see _task_create_at
1702:../MQXLITE/kernel/task.c ****  */
1703:../MQXLITE/kernel/task.c **** uint_32 _task_set_parameter
1704:../MQXLITE/kernel/task.c **** (
1705:../MQXLITE/kernel/task.c ****     uint_32 new_value
1706:../MQXLITE/kernel/task.c **** )
1707:../MQXLITE/kernel/task.c **** { /* Body */
 1627              		.loc 1 1707 0
 1628              		.cfi_startproc
 1629 0000 80B5     		push	{r7, lr}
 1630              	.LCFI51:
 1631              		.cfi_def_cfa_offset 8
 1632              		.cfi_offset 7, -8
 1633              		.cfi_offset 14, -4
 1634 0002 84B0     		sub	sp, sp, #16
 1635              	.LCFI52:
 1636              		.cfi_def_cfa_offset 24
 1637 0004 00AF     		add	r7, sp, #0
 1638              	.LCFI53:
 1639              		.cfi_def_cfa_register 7
 1640 0006 7860     		str	r0, [r7, #4]
1708:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR     kernel_data;
1709:../MQXLITE/kernel/task.c ****     uint_32                    old_value;
1710:../MQXLITE/kernel/task.c **** 
1711:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 1641              		.loc 1 1711 0
 1642 0008 084B     		ldr	r3, .L97
 1643 000a 1B68     		ldr	r3, [r3]
 1644 000c FB60     		str	r3, [r7, #12]
1712:../MQXLITE/kernel/task.c ****     _KLOGE2(KLOG_task_set_parameter, new_value);
1713:../MQXLITE/kernel/task.c **** 
1714:../MQXLITE/kernel/task.c ****     old_value = _task_set_parameter_internal(new_value, kernel_data->ACTIVE_PTR);
 1645              		.loc 1 1714 0
 1646 000e FB68     		ldr	r3, [r7, #12]
 1647 0010 DB69     		ldr	r3, [r3, #28]
 1648 0012 7A68     		ldr	r2, [r7, #4]
 1649 0014 101C     		mov	r0, r2
 1650 0016 191C     		mov	r1, r3
 1651 0018 FFF7FEFF 		bl	_task_set_parameter_internal
 1652 001c 031C     		mov	r3, r0
 1653 001e BB60     		str	r3, [r7, #8]
1715:../MQXLITE/kernel/task.c **** 
1716:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_set_parameter, old_value);
1717:../MQXLITE/kernel/task.c ****     return old_value;
 1654              		.loc 1 1717 0
 1655 0020 BB68     		ldr	r3, [r7, #8]
1718:../MQXLITE/kernel/task.c **** 
1719:../MQXLITE/kernel/task.c **** } /* Endbody */
 1656              		.loc 1 1719 0
 1657 0022 181C     		mov	r0, r3
 1658 0024 BD46     		mov	sp, r7
 1659 0026 04B0     		add	sp, sp, #16
 1660              		@ sp needed for prologue
 1661 0028 80BD     		pop	{r7, pc}
 1662              	.L98:
 1663 002a C046     		.align	2
 1664              	.L97:
 1665 002c 00000000 		.word	_mqx_kernel_data
 1666              		.cfi_endproc
 1667              	.LFE17:
 1669              		.section	.text._task_set_parameter_for,"ax",%progbits
 1670              		.align	2
 1671              		.global	_task_set_parameter_for
 1672              		.code	16
 1673              		.thumb_func
 1675              	_task_set_parameter_for:
 1676              	.LFB18:
1720:../MQXLITE/kernel/task.c **** 
1721:../MQXLITE/kernel/task.c **** /*!
1722:../MQXLITE/kernel/task.c ****  * \brief Sets the task creation parameter of the specified task.
1723:../MQXLITE/kernel/task.c ****  *
1724:../MQXLITE/kernel/task.c ****  * \param[in] new_value Value to set the task parameter to.
1725:../MQXLITE/kernel/task.c ****  * \param[in] tid       Task ID of the task to set.
1726:../MQXLITE/kernel/task.c ****  *
1727:../MQXLITE/kernel/task.c ****  * \return Previous creation parameter (might be NULL).
1728:../MQXLITE/kernel/task.c ****  *
1729:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter
1730:../MQXLITE/kernel/task.c ****  * \see _task_get_parameter_for
1731:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter
1732:../MQXLITE/kernel/task.c ****  * \see _task_create
1733:../MQXLITE/kernel/task.c ****  * \see _task_create_blocked
1734:../MQXLITE/kernel/task.c ****  * \see _task_create_at
1735:../MQXLITE/kernel/task.c ****  */
1736:../MQXLITE/kernel/task.c **** uint_32 _task_set_parameter_for
1737:../MQXLITE/kernel/task.c **** (
1738:../MQXLITE/kernel/task.c ****     uint_32   new_value,
1739:../MQXLITE/kernel/task.c ****     _task_id  tid
1740:../MQXLITE/kernel/task.c **** )
1741:../MQXLITE/kernel/task.c **** { /* Body */
 1677              		.loc 1 1741 0
 1678              		.cfi_startproc
 1679 0000 80B5     		push	{r7, lr}
 1680              	.LCFI54:
 1681              		.cfi_def_cfa_offset 8
 1682              		.cfi_offset 7, -8
 1683              		.cfi_offset 14, -4
 1684 0002 86B0     		sub	sp, sp, #24
 1685              	.LCFI55:
 1686              		.cfi_def_cfa_offset 32
 1687 0004 00AF     		add	r7, sp, #0
 1688              	.LCFI56:
 1689              		.cfi_def_cfa_register 7
 1690 0006 7860     		str	r0, [r7, #4]
 1691 0008 3960     		str	r1, [r7]
1742:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR  kernel_data;
1743:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR           td_ptr;
1744:../MQXLITE/kernel/task.c ****     uint_32                 old_value;
1745:../MQXLITE/kernel/task.c **** 
1746:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 1692              		.loc 1 1746 0
 1693 000a 0D4B     		ldr	r3, .L102
 1694 000c 1B68     		ldr	r3, [r3]
 1695 000e 7B61     		str	r3, [r7, #20]
1747:../MQXLITE/kernel/task.c ****     _KLOGE3(KLOG_task_set_parameter_for, tid, new_value);
1748:../MQXLITE/kernel/task.c **** 
1749:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR)_task_get_td(tid);
 1696              		.loc 1 1749 0
 1697 0010 3B68     		ldr	r3, [r7]
 1698 0012 181C     		mov	r0, r3
 1699 0014 FFF7FEFF 		bl	_task_get_td
 1700 0018 031C     		mov	r3, r0
 1701 001a 3B61     		str	r3, [r7, #16]
1750:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
1751:../MQXLITE/kernel/task.c ****     if (td_ptr == NULL)
 1702              		.loc 1 1751 0
 1703 001c 3B69     		ldr	r3, [r7, #16]
 1704 001e 002B     		cmp	r3, #0
 1705 0020 01D1     		bne	.L100
1752:../MQXLITE/kernel/task.c ****     {
1753:../MQXLITE/kernel/task.c ****         _KLOGX3(KLOG_task_set_parameter_for, tid, MQX_INVALID_PARAMETER);
1754:../MQXLITE/kernel/task.c ****         return 0;
 1706              		.loc 1 1754 0
 1707 0022 0023     		mov	r3, #0
 1708 0024 08E0     		b	.L101
 1709              	.L100:
1755:../MQXLITE/kernel/task.c ****     } /* Endif */
1756:../MQXLITE/kernel/task.c **** #endif
1757:../MQXLITE/kernel/task.c **** 
1758:../MQXLITE/kernel/task.c ****     old_value = _task_set_parameter_internal(new_value, td_ptr);
 1710              		.loc 1 1758 0
 1711 0026 7A68     		ldr	r2, [r7, #4]
 1712 0028 3B69     		ldr	r3, [r7, #16]
 1713 002a 101C     		mov	r0, r2
 1714 002c 191C     		mov	r1, r3
 1715 002e FFF7FEFF 		bl	_task_set_parameter_internal
 1716 0032 031C     		mov	r3, r0
 1717 0034 FB60     		str	r3, [r7, #12]
1759:../MQXLITE/kernel/task.c **** 
1760:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_set_parameter_for, old_value);
1761:../MQXLITE/kernel/task.c ****     return old_value;
 1718              		.loc 1 1761 0
 1719 0036 FB68     		ldr	r3, [r7, #12]
 1720              	.L101:
1762:../MQXLITE/kernel/task.c **** 
1763:../MQXLITE/kernel/task.c **** } /* Endbody */
 1721              		.loc 1 1763 0
 1722 0038 181C     		mov	r0, r3
 1723 003a BD46     		mov	sp, r7
 1724 003c 06B0     		add	sp, sp, #24
 1725              		@ sp needed for prologue
 1726 003e 80BD     		pop	{r7, pc}
 1727              	.L103:
 1728              		.align	2
 1729              	.L102:
 1730 0040 00000000 		.word	_mqx_kernel_data
 1731              		.cfi_endproc
 1732              	.LFE18:
 1734              		.section	.text._task_set_parameter_internal,"ax",%progbits
 1735              		.align	2
 1736              		.global	_task_set_parameter_internal
 1737              		.code	16
 1738              		.thumb_func
 1740              	_task_set_parameter_internal:
 1741              	.LFB19:
1764:../MQXLITE/kernel/task.c **** 
1765:../MQXLITE/kernel/task.c **** /*!
1766:../MQXLITE/kernel/task.c ****  * \private
1767:../MQXLITE/kernel/task.c ****  *
1768:../MQXLITE/kernel/task.c ****  * \brief Sets the task creation parameter of the specified task.
1769:../MQXLITE/kernel/task.c ****  *
1770:../MQXLITE/kernel/task.c ****  * \param[in] new_value Value to set the task parameter to.
1771:../MQXLITE/kernel/task.c ****  * \param[in] td_ptr    Task ID of the task to set.
1772:../MQXLITE/kernel/task.c ****  *
1773:../MQXLITE/kernel/task.c ****  * \return Previous creation parameter (might be NULL).
1774:../MQXLITE/kernel/task.c ****  *
1775:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter
1776:../MQXLITE/kernel/task.c ****  * \see _task_set_parameter_for
1777:../MQXLITE/kernel/task.c ****  * \see TD_STRUCT
1778:../MQXLITE/kernel/task.c ****  */
1779:../MQXLITE/kernel/task.c **** uint_32 _task_set_parameter_internal
1780:../MQXLITE/kernel/task.c **** (
1781:../MQXLITE/kernel/task.c ****     uint_32       new_value,
1782:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR td_ptr
1783:../MQXLITE/kernel/task.c **** )
1784:../MQXLITE/kernel/task.c **** { /* Body */
 1742              		.loc 1 1784 0
 1743              		.cfi_startproc
 1744 0000 80B5     		push	{r7, lr}
 1745              	.LCFI57:
 1746              		.cfi_def_cfa_offset 8
 1747              		.cfi_offset 7, -8
 1748              		.cfi_offset 14, -4
 1749 0002 84B0     		sub	sp, sp, #16
 1750              	.LCFI58:
 1751              		.cfi_def_cfa_offset 24
 1752 0004 00AF     		add	r7, sp, #0
 1753              	.LCFI59:
 1754              		.cfi_def_cfa_register 7
 1755 0006 7860     		str	r0, [r7, #4]
 1756 0008 3960     		str	r1, [r7]
1785:../MQXLITE/kernel/task.c ****     PSP_STACK_START_STRUCT_PTR stack_start_ptr;
1786:../MQXLITE/kernel/task.c ****     uint_32                    old_value;
1787:../MQXLITE/kernel/task.c **** 
1788:../MQXLITE/kernel/task.c ****     stack_start_ptr = _psp_get_stack_start(td_ptr);
 1757              		.loc 1 1788 0
 1758 000a 3B68     		ldr	r3, [r7]
 1759 000c 181C     		mov	r0, r3
 1760 000e FFF7FEFF 		bl	_psp_get_stack_start
 1761 0012 031C     		mov	r3, r0
 1762 0014 FB60     		str	r3, [r7, #12]
1789:../MQXLITE/kernel/task.c **** 
1790:../MQXLITE/kernel/task.c ****     old_value = PSP_TASK_PARAM(stack_start_ptr);
 1763              		.loc 1 1790 0
 1764 0016 FB68     		ldr	r3, [r7, #12]
 1765 0018 DB6C     		ldr	r3, [r3, #76]
 1766 001a BB60     		str	r3, [r7, #8]
1791:../MQXLITE/kernel/task.c ****     PSP_TASK_PARAM(stack_start_ptr) = new_value;
 1767              		.loc 1 1791 0
 1768 001c FB68     		ldr	r3, [r7, #12]
 1769 001e 7A68     		ldr	r2, [r7, #4]
 1770 0020 DA64     		str	r2, [r3, #76]
1792:../MQXLITE/kernel/task.c **** 
1793:../MQXLITE/kernel/task.c ****     return old_value;
 1771              		.loc 1 1793 0
 1772 0022 BB68     		ldr	r3, [r7, #8]
1794:../MQXLITE/kernel/task.c **** 
1795:../MQXLITE/kernel/task.c **** } /* Endbody */
 1773              		.loc 1 1795 0
 1774 0024 181C     		mov	r0, r3
 1775 0026 BD46     		mov	sp, r7
 1776 0028 04B0     		add	sp, sp, #16
 1777              		@ sp needed for prologue
 1778 002a 80BD     		pop	{r7, pc}
 1779              		.cfi_endproc
 1780              	.LFE19:
 1782              		.section	.text._task_get_priority,"ax",%progbits
 1783              		.align	2
 1784              		.global	_task_get_priority
 1785              		.code	16
 1786              		.thumb_func
 1788              	_task_get_priority:
 1789              	.LFB20:
1796:../MQXLITE/kernel/task.c **** 
1797:../MQXLITE/kernel/task.c **** #if MQX_HAS_DYNAMIC_PRIORITIES
1798:../MQXLITE/kernel/task.c **** 
1799:../MQXLITE/kernel/task.c **** /*!
1800:../MQXLITE/kernel/task.c ****  * \brief Gets the priority of the task.
1801:../MQXLITE/kernel/task.c ****  *
1802:../MQXLITE/kernel/task.c ****  * \param[in]  task_id      One of the following:
1803:../MQXLITE/kernel/task.c ****  * \n - Task ID of the task for which to set or get info.
1804:../MQXLITE/kernel/task.c ****  * \n - MQX_NULL_TASK_ID (Use the calling task.)
1805:../MQXLITE/kernel/task.c ****  * \param[out] priority_ptr Pointer to the priority.
1806:../MQXLITE/kernel/task.c ****  *
1807:../MQXLITE/kernel/task.c ****  * \return MQX_OK
1808:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_TASK_ID (Task_id does not represent a currently valid task.)
1809:../MQXLITE/kernel/task.c ****  *
1810:../MQXLITE/kernel/task.c ****  * \warning Might dispatch a task.
1811:../MQXLITE/kernel/task.c ****  *
1812:../MQXLITE/kernel/task.c ****  * \see _task_set_priority
1813:../MQXLITE/kernel/task.c ****  * \see _task_get_creator
1814:../MQXLITE/kernel/task.c ****  * \see _task_get_processor
1815:../MQXLITE/kernel/task.c ****  * \see _sem_create
1816:../MQXLITE/kernel/task.c ****  * \see _sem_create_fast
1817:../MQXLITE/kernel/task.c ****  * \see _sem_wait
1818:../MQXLITE/kernel/task.c ****  * \see _sem_wait_for
1819:../MQXLITE/kernel/task.c ****  * \see _sem_wait_ticks
1820:../MQXLITE/kernel/task.c ****  * \see _sem_wait_until
1821:../MQXLITE/kernel/task.c ****  * \see _mutatr_get_sched_protocol
1822:../MQXLITE/kernel/task.c ****  * \see _mutatr_set_sched_protocol
1823:../MQXLITE/kernel/task.c ****  * \see _mutex_lock
1824:../MQXLITE/kernel/task.c ****  */
1825:../MQXLITE/kernel/task.c **** _mqx_uint _task_get_priority
1826:../MQXLITE/kernel/task.c **** (
1827:../MQXLITE/kernel/task.c ****     _task_id      task_id,
1828:../MQXLITE/kernel/task.c ****     _mqx_uint_ptr priority_ptr
1829:../MQXLITE/kernel/task.c **** )
1830:../MQXLITE/kernel/task.c **** { /* Body */
 1790              		.loc 1 1830 0
 1791              		.cfi_startproc
 1792 0000 80B5     		push	{r7, lr}
 1793              	.LCFI60:
 1794              		.cfi_def_cfa_offset 8
 1795              		.cfi_offset 7, -8
 1796              		.cfi_offset 14, -4
 1797 0002 84B0     		sub	sp, sp, #16
 1798              	.LCFI61:
 1799              		.cfi_def_cfa_offset 24
 1800 0004 00AF     		add	r7, sp, #0
 1801              	.LCFI62:
 1802              		.cfi_def_cfa_register 7
 1803 0006 7860     		str	r0, [r7, #4]
 1804 0008 3960     		str	r1, [r7]
1831:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR           td_ptr;
1832:../MQXLITE/kernel/task.c **** 
1833:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR)_task_get_td(task_id);
 1805              		.loc 1 1833 0
 1806 000a 7B68     		ldr	r3, [r7, #4]
 1807 000c 181C     		mov	r0, r3
 1808 000e FFF7FEFF 		bl	_task_get_td
 1809 0012 031C     		mov	r3, r0
 1810 0014 FB60     		str	r3, [r7, #12]
1834:../MQXLITE/kernel/task.c ****     if (td_ptr == NULL)
 1811              		.loc 1 1834 0
 1812 0016 FB68     		ldr	r3, [r7, #12]
 1813 0018 002B     		cmp	r3, #0
 1814 001a 01D1     		bne	.L107
1835:../MQXLITE/kernel/task.c ****     {
1836:../MQXLITE/kernel/task.c ****         return(MQX_INVALID_TASK_ID);
 1815              		.loc 1 1836 0
 1816 001c 1223     		mov	r3, #18
 1817 001e 06E0     		b	.L108
 1818              	.L107:
1837:../MQXLITE/kernel/task.c ****     } /* Endif */
1838:../MQXLITE/kernel/task.c ****     *priority_ptr = td_ptr->HOME_QUEUE->PRIORITY;
 1819              		.loc 1 1838 0
 1820 0020 FB68     		ldr	r3, [r7, #12]
 1821 0022 1B6A     		ldr	r3, [r3, #32]
 1822 0024 DB89     		ldrh	r3, [r3, #14]
 1823 0026 1A1C     		mov	r2, r3
 1824 0028 3B68     		ldr	r3, [r7]
 1825 002a 1A60     		str	r2, [r3]
1839:../MQXLITE/kernel/task.c ****     return MQX_OK;
 1826              		.loc 1 1839 0
 1827 002c 0023     		mov	r3, #0
 1828              	.L108:
1840:../MQXLITE/kernel/task.c **** 
1841:../MQXLITE/kernel/task.c **** } /* Endbody */
 1829              		.loc 1 1841 0
 1830 002e 181C     		mov	r0, r3
 1831 0030 BD46     		mov	sp, r7
 1832 0032 04B0     		add	sp, sp, #16
 1833              		@ sp needed for prologue
 1834 0034 80BD     		pop	{r7, pc}
 1835              		.cfi_endproc
 1836              	.LFE20:
 1838 0036 C046     		.section	.text._task_set_priority,"ax",%progbits
 1839              		.align	2
 1840              		.global	_task_set_priority
 1841              		.code	16
 1842              		.thumb_func
 1844              	_task_set_priority:
 1845              	.LFB21:
1842:../MQXLITE/kernel/task.c **** 
1843:../MQXLITE/kernel/task.c **** /*!
1844:../MQXLITE/kernel/task.c ****  * \brief Sets the priority of the task.
1845:../MQXLITE/kernel/task.c ****  *
1846:../MQXLITE/kernel/task.c ****  * MQX might boost the priority of a task that waits for a semaphore or locks a
1847:../MQXLITE/kernel/task.c ****  * mutex. If MQX has boosted the priority of the task that is specified by task_id,
1848:../MQXLITE/kernel/task.c ****  * _task_set_priority() will raise but not lower the task's priority.
1849:../MQXLITE/kernel/task.c ****  * \n If the task is in the blocked state, priority change takes place when task
1850:../MQXLITE/kernel/task.c ****  * is ready.
1851:../MQXLITE/kernel/task.c ****  * \n When the task is in the ready state, priority change takes place immediately.
1852:../MQXLITE/kernel/task.c ****  *
1853:../MQXLITE/kernel/task.c ****  * \param[in]  task_id      One of the following:
1854:../MQXLITE/kernel/task.c ****  * \n - Task ID of the task for which to set or get info.
1855:../MQXLITE/kernel/task.c ****  * \n - MQX_NULL_TASK_ID (Use the calling task.)
1856:../MQXLITE/kernel/task.c ****  * \param[in]  new_priority New task priority.
1857:../MQXLITE/kernel/task.c ****  * \param[out] priority_ptr Pointer to the previous task priority.
1858:../MQXLITE/kernel/task.c ****  *
1859:../MQXLITE/kernel/task.c ****  * \return MQX_OK
1860:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_TASK_ID (Task_id does not represent a currently valid task.)
1861:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_PARAMETER (New_priority is numerically greater than the
1862:../MQXLITE/kernel/task.c ****  * lowest-allowable priority of an application task.)
1863:../MQXLITE/kernel/task.c ****  *
1864:../MQXLITE/kernel/task.c ****  * \warning Might dispatch a task.
1865:../MQXLITE/kernel/task.c ****  *
1866:../MQXLITE/kernel/task.c ****  * \see _task_get_priority
1867:../MQXLITE/kernel/task.c ****  * \see _task_get_creator
1868:../MQXLITE/kernel/task.c ****  * \see _task_get_processor
1869:../MQXLITE/kernel/task.c ****  * \see _sem_create
1870:../MQXLITE/kernel/task.c ****  * \see _sem_create_fast
1871:../MQXLITE/kernel/task.c ****  * \see _sem_wait
1872:../MQXLITE/kernel/task.c ****  * \see _sem_wait_for
1873:../MQXLITE/kernel/task.c ****  * \see _sem_wait_ticks
1874:../MQXLITE/kernel/task.c ****  * \see _sem_wait_until
1875:../MQXLITE/kernel/task.c ****  * \see _mutatr_get_sched_protocol
1876:../MQXLITE/kernel/task.c ****  * \see _mutatr_set_sched_protocol
1877:../MQXLITE/kernel/task.c ****  * \see _mutex_lock
1878:../MQXLITE/kernel/task.c ****  */
1879:../MQXLITE/kernel/task.c **** _mqx_uint _task_set_priority
1880:../MQXLITE/kernel/task.c **** (
1881:../MQXLITE/kernel/task.c ****     _task_id     task_id,
1882:../MQXLITE/kernel/task.c ****     _mqx_uint     new_priority,
1883:../MQXLITE/kernel/task.c ****     _mqx_uint_ptr priority_ptr
1884:../MQXLITE/kernel/task.c **** )
1885:../MQXLITE/kernel/task.c **** { /* Body */
 1846              		.loc 1 1885 0
 1847              		.cfi_startproc
 1848 0000 80B5     		push	{r7, lr}
 1849              	.LCFI63:
 1850              		.cfi_def_cfa_offset 8
 1851              		.cfi_offset 7, -8
 1852              		.cfi_offset 14, -4
 1853 0002 8AB0     		sub	sp, sp, #40
 1854              	.LCFI64:
 1855              		.cfi_def_cfa_offset 48
 1856 0004 00AF     		add	r7, sp, #0
 1857              	.LCFI65:
 1858              		.cfi_def_cfa_register 7
 1859 0006 F860     		str	r0, [r7, #12]
 1860 0008 B960     		str	r1, [r7, #8]
 1861 000a 7A60     		str	r2, [r7, #4]
1886:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR  kernel_data;
1887:../MQXLITE/kernel/task.c ****     READY_Q_STRUCT_PTR      ready_q_ptr;
1888:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR           td_ptr;
1889:../MQXLITE/kernel/task.c ****     TASK_QUEUE_STRUCT_PTR   task_queue_ptr;
1890:../MQXLITE/kernel/task.c **** 
1891:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 1862              		.loc 1 1891 0
 1863 000c 384B     		ldr	r3, .L116
 1864 000e 1B68     		ldr	r3, [r3]
 1865 0010 7B62     		str	r3, [r7, #36]
1892:../MQXLITE/kernel/task.c **** 
1893:../MQXLITE/kernel/task.c ****     _KLOGE3(KLOG_task_set_priority, task_id, new_priority);
1894:../MQXLITE/kernel/task.c **** 
1895:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
1896:../MQXLITE/kernel/task.c ****     if (new_priority > kernel_data->LOWEST_TASK_PRIORITY)
 1866              		.loc 1 1896 0
 1867 0012 7A6A     		ldr	r2, [r7, #36]
 1868 0014 C423     		mov	r3, #196
 1869 0016 D258     		ldr	r2, [r2, r3]
 1870 0018 BB68     		ldr	r3, [r7, #8]
 1871 001a 9A42     		cmp	r2, r3
 1872 001c 01D2     		bcs	.L110
1897:../MQXLITE/kernel/task.c ****     {
1898:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_set_priority, MQX_INVALID_PARAMETER);
1899:../MQXLITE/kernel/task.c ****         return(MQX_INVALID_PARAMETER);
 1873              		.loc 1 1899 0
 1874 001e 0C23     		mov	r3, #12
 1875 0020 61E0     		b	.L111
 1876              	.L110:
1900:../MQXLITE/kernel/task.c ****     }/* Endif */
1901:../MQXLITE/kernel/task.c **** #endif
1902:../MQXLITE/kernel/task.c **** 
1903:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR)_task_get_td(task_id);
 1877              		.loc 1 1903 0
 1878 0022 FB68     		ldr	r3, [r7, #12]
 1879 0024 181C     		mov	r0, r3
 1880 0026 FFF7FEFF 		bl	_task_get_td
 1881 002a 031C     		mov	r3, r0
 1882 002c 3B62     		str	r3, [r7, #32]
1904:../MQXLITE/kernel/task.c ****     if (td_ptr == NULL)
 1883              		.loc 1 1904 0
 1884 002e 3B6A     		ldr	r3, [r7, #32]
 1885 0030 002B     		cmp	r3, #0
 1886 0032 01D1     		bne	.L112
1905:../MQXLITE/kernel/task.c ****     {
1906:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_set_priority, MQX_INVALID_TASK_ID);
1907:../MQXLITE/kernel/task.c ****         return(MQX_INVALID_TASK_ID);
 1887              		.loc 1 1907 0
 1888 0034 1223     		mov	r3, #18
 1889 0036 56E0     		b	.L111
 1890              	.L112:
1908:../MQXLITE/kernel/task.c ****     } /* Endif */
1909:../MQXLITE/kernel/task.c **** 
1910:../MQXLITE/kernel/task.c ****     _int_disable();
 1891              		.loc 1 1910 0
 1892 0038 FFF7FEFF 		bl	_int_disable
1911:../MQXLITE/kernel/task.c ****     /* Return old priority */
1912:../MQXLITE/kernel/task.c ****     *priority_ptr = td_ptr->HOME_QUEUE->PRIORITY;
 1893              		.loc 1 1912 0
 1894 003c 3B6A     		ldr	r3, [r7, #32]
 1895 003e 1B6A     		ldr	r3, [r3, #32]
 1896 0040 DB89     		ldrh	r3, [r3, #14]
 1897 0042 1A1C     		mov	r2, r3
 1898 0044 7B68     		ldr	r3, [r7, #4]
 1899 0046 1A60     		str	r2, [r3]
1913:../MQXLITE/kernel/task.c **** 
1914:../MQXLITE/kernel/task.c ****     /* Make the change permanent */
1915:../MQXLITE/kernel/task.c ****     ready_q_ptr = kernel_data->READY_Q_LIST;
 1900              		.loc 1 1915 0
 1901 0048 7B6A     		ldr	r3, [r7, #36]
 1902 004a 1B6A     		ldr	r3, [r3, #32]
 1903 004c FB61     		str	r3, [r7, #28]
1916:../MQXLITE/kernel/task.c ****     td_ptr->HOME_QUEUE = ready_q_ptr - new_priority;
 1904              		.loc 1 1916 0
 1905 004e BB68     		ldr	r3, [r7, #8]
 1906 0050 1B01     		lsl	r3, r3, #4
 1907 0052 5B42     		neg	r3, r3
 1908 0054 FA69     		ldr	r2, [r7, #28]
 1909 0056 D218     		add	r2, r2, r3
 1910 0058 3B6A     		ldr	r3, [r7, #32]
 1911 005a 1A62     		str	r2, [r3, #32]
1917:../MQXLITE/kernel/task.c **** 
1918:../MQXLITE/kernel/task.c ****     if (td_ptr->BOOSTED)
 1912              		.loc 1 1918 0
 1913 005c 3B6A     		ldr	r3, [r7, #32]
 1914 005e 5B6C     		ldr	r3, [r3, #68]
 1915 0060 002B     		cmp	r3, #0
 1916 0062 0DD0     		beq	.L113
1919:../MQXLITE/kernel/task.c ****     {
1920:../MQXLITE/kernel/task.c ****         /* Can only change priority to a higher (lower value) */
1921:../MQXLITE/kernel/task.c ****         if (new_priority < td_ptr->MY_QUEUE->PRIORITY)
 1917              		.loc 1 1921 0
 1918 0064 3B6A     		ldr	r3, [r7, #32]
 1919 0066 DB69     		ldr	r3, [r3, #28]
 1920 0068 DB89     		ldrh	r3, [r3, #14]
 1921 006a 1A1C     		mov	r2, r3
 1922 006c BB68     		ldr	r3, [r7, #8]
 1923 006e 9A42     		cmp	r2, r3
 1924 0070 0CD9     		bls	.L114
1922:../MQXLITE/kernel/task.c ****         {
1923:../MQXLITE/kernel/task.c ****             /* Move the task to the correct priority level */
1924:../MQXLITE/kernel/task.c ****             _sched_set_priority_internal(td_ptr, new_priority);
 1925              		.loc 1 1924 0
 1926 0072 3A6A     		ldr	r2, [r7, #32]
 1927 0074 BB68     		ldr	r3, [r7, #8]
 1928 0076 101C     		mov	r0, r2
 1929 0078 191C     		mov	r1, r3
 1930 007a FFF7FEFF 		bl	_sched_set_priority_internal
 1931 007e 05E0     		b	.L114
 1932              	.L113:
1925:../MQXLITE/kernel/task.c ****         } /* Endif */
1926:../MQXLITE/kernel/task.c ****     }
1927:../MQXLITE/kernel/task.c ****     else
1928:../MQXLITE/kernel/task.c ****     {
1929:../MQXLITE/kernel/task.c ****         /* Move the task to the correct priority level */
1930:../MQXLITE/kernel/task.c ****         _sched_set_priority_internal(td_ptr, new_priority);
 1933              		.loc 1 1930 0
 1934 0080 3A6A     		ldr	r2, [r7, #32]
 1935 0082 BB68     		ldr	r3, [r7, #8]
 1936 0084 101C     		mov	r0, r2
 1937 0086 191C     		mov	r1, r3
 1938 0088 FFF7FEFF 		bl	_sched_set_priority_internal
 1939              	.L114:
1931:../MQXLITE/kernel/task.c ****     } /* Endif */
1932:../MQXLITE/kernel/task.c **** 
1933:../MQXLITE/kernel/task.c ****     if (td_ptr->STATE == TASK_QUEUE_BLOCKED)
 1940              		.loc 1 1933 0
 1941 008c 3B6A     		ldr	r3, [r7, #32]
 1942 008e 9A68     		ldr	r2, [r3, #8]
 1943 0090 184B     		ldr	r3, .L116+4
 1944 0092 9A42     		cmp	r2, r3
 1945 0094 22D1     		bne	.L115
1934:../MQXLITE/kernel/task.c ****     {
1935:../MQXLITE/kernel/task.c ****         task_queue_ptr = (TASK_QUEUE_STRUCT_PTR)
1936:../MQXLITE/kernel/task.c ****                          ((uchar_ptr)td_ptr->INFO - FIELD_OFFSET(TASK_QUEUE_STRUCT, TD_QUEUE));
 1946              		.loc 1 1936 0
 1947 0096 3B6A     		ldr	r3, [r7, #32]
 1948 0098 DB6A     		ldr	r3, [r3, #44]
 1949 009a 103B     		sub	r3, r3, #16
1935:../MQXLITE/kernel/task.c ****         task_queue_ptr = (TASK_QUEUE_STRUCT_PTR)
 1950              		.loc 1 1935 0
 1951 009c BB61     		str	r3, [r7, #24]
1937:../MQXLITE/kernel/task.c ****         if (task_queue_ptr->POLICY & MQX_TASK_QUEUE_BY_PRIORITY)
 1952              		.loc 1 1937 0
 1953 009e BB69     		ldr	r3, [r7, #24]
 1954 00a0 DA68     		ldr	r2, [r3, #12]
 1955 00a2 0823     		mov	r3, #8
 1956 00a4 1340     		and	r3, r2
 1957 00a6 19D0     		beq	.L115
 1958              	.LBB12:
1938:../MQXLITE/kernel/task.c ****         {
1939:../MQXLITE/kernel/task.c ****             /* Requeue the td by priority */
1940:../MQXLITE/kernel/task.c ****             _QUEUE_REMOVE(&task_queue_ptr->TD_QUEUE, td_ptr);
 1959              		.loc 1 1940 0
 1960 00a8 3B6A     		ldr	r3, [r7, #32]
 1961 00aa 5B68     		ldr	r3, [r3, #4]
 1962 00ac 7B61     		str	r3, [r7, #20]
 1963 00ae 3B6A     		ldr	r3, [r7, #32]
 1964 00b0 1B68     		ldr	r3, [r3]
 1965 00b2 3B61     		str	r3, [r7, #16]
 1966 00b4 7B69     		ldr	r3, [r7, #20]
 1967 00b6 3A69     		ldr	r2, [r7, #16]
 1968 00b8 1A60     		str	r2, [r3]
 1969 00ba 3B69     		ldr	r3, [r7, #16]
 1970 00bc 7A69     		ldr	r2, [r7, #20]
 1971 00be 5A60     		str	r2, [r3, #4]
 1972              	.LBE12:
 1973 00c0 BB69     		ldr	r3, [r7, #24]
 1974 00c2 1033     		add	r3, r3, #16
 1975 00c4 1A89     		ldrh	r2, [r3, #8]
 1976 00c6 013A     		sub	r2, r2, #1
 1977 00c8 92B2     		uxth	r2, r2
 1978 00ca 1A81     		strh	r2, [r3, #8]
1941:../MQXLITE/kernel/task.c ****             _sched_insert_priorityq_internal(&task_queue_ptr->TD_QUEUE, td_ptr);
 1979              		.loc 1 1941 0
 1980 00cc BB69     		ldr	r3, [r7, #24]
 1981 00ce 1A1C     		mov	r2, r3
 1982 00d0 1032     		add	r2, r2, #16
 1983 00d2 3B6A     		ldr	r3, [r7, #32]
 1984 00d4 101C     		mov	r0, r2
 1985 00d6 191C     		mov	r1, r3
 1986 00d8 FFF7FEFF 		bl	_sched_insert_priorityq_internal
 1987              	.L115:
1942:../MQXLITE/kernel/task.c ****         }/* Endif */
1943:../MQXLITE/kernel/task.c ****     }/* Endif */
1944:../MQXLITE/kernel/task.c **** 
1945:../MQXLITE/kernel/task.c ****     /* Allow higher priority tasks to run */
1946:../MQXLITE/kernel/task.c ****     _CHECK_RUN_SCHEDULER();
 1988              		.loc 1 1946 0
 1989 00dc FFF7FEFF 		bl	_sched_check_scheduler_internal
1947:../MQXLITE/kernel/task.c **** 
1948:../MQXLITE/kernel/task.c ****     _int_enable();
 1990              		.loc 1 1948 0
 1991 00e0 FFF7FEFF 		bl	_int_enable
1949:../MQXLITE/kernel/task.c **** 
1950:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_set_priority, MQX_OK);
1951:../MQXLITE/kernel/task.c ****     return MQX_OK;
 1992              		.loc 1 1951 0
 1993 00e4 0023     		mov	r3, #0
 1994              	.L111:
1952:../MQXLITE/kernel/task.c **** 
1953:../MQXLITE/kernel/task.c **** } /* Endbody */
 1995              		.loc 1 1953 0
 1996 00e6 181C     		mov	r0, r3
 1997 00e8 BD46     		mov	sp, r7
 1998 00ea 0AB0     		add	sp, sp, #40
 1999              		@ sp needed for prologue
 2000 00ec 80BD     		pop	{r7, pc}
 2001              	.L117:
 2002 00ee C046     		.align	2
 2003              	.L116:
 2004 00f0 00000000 		.word	_mqx_kernel_data
 2005 00f4 29020000 		.word	553
 2006              		.cfi_endproc
 2007              	.LFE21:
 2009              		.section	.text._task_ready,"ax",%progbits
 2010              		.align	2
 2011              		.global	_task_ready
 2012              		.code	16
 2013              		.thumb_func
 2015              	_task_ready:
 2016              	.LFB22:
1954:../MQXLITE/kernel/task.c **** 
1955:../MQXLITE/kernel/task.c **** #endif /* MQX_HAS_DYNAMIC_PRIORITIES */
1956:../MQXLITE/kernel/task.c **** 
1957:../MQXLITE/kernel/task.c **** /*!
1958:../MQXLITE/kernel/task.c ****  * \brief Makes the task ready to run by putting it in its ready queue.
1959:../MQXLITE/kernel/task.c ****  *
1960:../MQXLITE/kernel/task.c ****  * This function is the only way to make ready a task that called _task_block().
1961:../MQXLITE/kernel/task.c ****  *
1962:../MQXLITE/kernel/task.c ****  * \param[in] td Pointer to the task descriptor of the task (on this processor)
1963:../MQXLITE/kernel/task.c ****  * to be made ready.
1964:../MQXLITE/kernel/task.c ****  *
1965:../MQXLITE/kernel/task.c ****  * \warning If the new ready task has higher priority than the calling task,
1966:../MQXLITE/kernel/task.c ****  * MQX makes the new ready task active.
1967:../MQXLITE/kernel/task.c ****  * \warning Might set one of the following task error codes:
1968:../MQXLITE/kernel/task.c ****  * \n - MQX_INVALID_TASK_ID (Task_id is not valid for this processor.)
1969:../MQXLITE/kernel/task.c ****  * \n - MQX_INVALID_TASK_STATE (Task is already in its ready queue.)
1970:../MQXLITE/kernel/task.c ****  *
1971:../MQXLITE/kernel/task.c ****  * \see _task_block
1972:../MQXLITE/kernel/task.c ****  * \see _time_dequeue
1973:../MQXLITE/kernel/task.c ****  * \see _taskq_resume
1974:../MQXLITE/kernel/task.c ****  */
1975:../MQXLITE/kernel/task.c **** void _task_ready
1976:../MQXLITE/kernel/task.c **** (
1977:../MQXLITE/kernel/task.c ****     pointer td
1978:../MQXLITE/kernel/task.c **** )
1979:../MQXLITE/kernel/task.c **** {
 2017              		.loc 1 1979 0
 2018              		.cfi_startproc
 2019 0000 80B5     		push	{r7, lr}
 2020              	.LCFI66:
 2021              		.cfi_def_cfa_offset 8
 2022              		.cfi_offset 7, -8
 2023              		.cfi_offset 14, -4
 2024 0002 84B0     		sub	sp, sp, #16
 2025              	.LCFI67:
 2026              		.cfi_def_cfa_offset 24
 2027 0004 00AF     		add	r7, sp, #0
 2028              	.LCFI68:
 2029              		.cfi_def_cfa_register 7
 2030 0006 7860     		str	r0, [r7, #4]
1980:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR  kernel_data;
1981:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR           td_ptr = (TD_STRUCT_PTR)td;
 2031              		.loc 1 1981 0
 2032 0008 7B68     		ldr	r3, [r7, #4]
 2033 000a FB60     		str	r3, [r7, #12]
1982:../MQXLITE/kernel/task.c **** 
1983:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE && MQX_ENABLE_USER_STDAPI
1984:../MQXLITE/kernel/task.c ****     if (MQX_RUN_IN_USER_MODE)
1985:../MQXLITE/kernel/task.c ****     {
1986:../MQXLITE/kernel/task.c ****         _usr_task_ready(td);
1987:../MQXLITE/kernel/task.c ****         return;
1988:../MQXLITE/kernel/task.c ****     }
1989:../MQXLITE/kernel/task.c **** #endif
1990:../MQXLITE/kernel/task.c **** 
1991:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 2034              		.loc 1 1991 0
 2035 000c 214B     		ldr	r3, .L125
 2036 000e 1B68     		ldr	r3, [r3]
 2037 0010 BB60     		str	r3, [r7, #8]
1992:../MQXLITE/kernel/task.c **** 
1993:../MQXLITE/kernel/task.c ****     /* Perform a validity check on the td */
1994:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
1995:../MQXLITE/kernel/task.c ****     if (PROC_NUMBER_FROM_TASKID(td_ptr->TASK_ID) != kernel_data->INIT.PROCESSOR_NUMBER)
 2038              		.loc 1 1995 0
 2039 0012 FB68     		ldr	r3, [r7, #12]
 2040 0014 DB68     		ldr	r3, [r3, #12]
 2041 0016 1B0C     		lsr	r3, r3, #16
 2042 0018 9BB2     		uxth	r3, r3
 2043 001a 1A1C     		mov	r2, r3
 2044 001c B968     		ldr	r1, [r7, #8]
 2045 001e A823     		mov	r3, #168
 2046 0020 5B00     		lsl	r3, r3, #1
 2047 0022 CB58     		ldr	r3, [r1, r3]
 2048 0024 9A42     		cmp	r2, r3
 2049 0026 03D0     		beq	.L119
1996:../MQXLITE/kernel/task.c ****     {
1997:../MQXLITE/kernel/task.c ****         _KLOGE2(KLOG_task_ready, td_ptr);
1998:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TASK_ID);
 2050              		.loc 1 1998 0
 2051 0028 1220     		mov	r0, #18
 2052 002a FFF7FEFF 		bl	_task_set_error
1999:../MQXLITE/kernel/task.c ****         _KLOGX1(KLOG_task_ready);
2000:../MQXLITE/kernel/task.c ****         return;
 2053              		.loc 1 2000 0
 2054 002e 2EE0     		b	.L118
 2055              	.L119:
2001:../MQXLITE/kernel/task.c ****     }
2002:../MQXLITE/kernel/task.c **** #endif
2003:../MQXLITE/kernel/task.c **** 
2004:../MQXLITE/kernel/task.c ****     _INT_DISABLE();
 2056              		.loc 1 2004 0
 2057 0030 BB68     		ldr	r3, [r7, #8]
 2058 0032 DB69     		ldr	r3, [r3, #28]
 2059 0034 9B6C     		ldr	r3, [r3, #72]
 2060 0036 002B     		cmp	r3, #0
 2061 0038 00D1     		bne	.L121
 2062              		.loc 1 2004 0 is_stmt 0
 2063              	@ 2004 "../MQXLITE/kernel/task.c" 1
 2064 003a 72B6     		cpsid i
 2065              	@ 0 "" 2
 2066              		.code	16
 2067              	.L121:
 2068              		.loc 1 2004 0
 2069 003c BB68     		ldr	r3, [r7, #8]
 2070 003e DB69     		ldr	r3, [r3, #28]
 2071 0040 9A6C     		ldr	r2, [r3, #72]
 2072 0042 0132     		add	r2, r2, #1
 2073 0044 9A64     		str	r2, [r3, #72]
2005:../MQXLITE/kernel/task.c **** 
2006:../MQXLITE/kernel/task.c ****     if (td_ptr->STATE == READY)
 2074              		.loc 1 2006 0 is_stmt 1
 2075 0046 FB68     		ldr	r3, [r7, #12]
 2076 0048 9B68     		ldr	r3, [r3, #8]
 2077 004a 022B     		cmp	r3, #2
 2078 004c 05D1     		bne	.L122
2007:../MQXLITE/kernel/task.c ****     {
2008:../MQXLITE/kernel/task.c ****         /* The task is already on the ready to run Queue! */
2009:../MQXLITE/kernel/task.c ****         _int_enable();
 2079              		.loc 1 2009 0
 2080 004e FFF7FEFF 		bl	_int_enable
2010:../MQXLITE/kernel/task.c ****         _KLOGE2(KLOG_task_ready, td_ptr);
2011:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_INVALID_TASK_STATE);
 2081              		.loc 1 2011 0
 2082 0052 1120     		mov	r0, #17
 2083 0054 FFF7FEFF 		bl	_task_set_error
2012:../MQXLITE/kernel/task.c ****         _KLOGX1(KLOG_task_ready);
2013:../MQXLITE/kernel/task.c ****         return;
 2084              		.loc 1 2013 0
 2085 0058 19E0     		b	.L118
 2086              	.L122:
2014:../MQXLITE/kernel/task.c ****     }/* Endif */
2015:../MQXLITE/kernel/task.c **** 
2016:../MQXLITE/kernel/task.c ****     _task_ready_internal(td_ptr);
 2087              		.loc 1 2016 0
 2088 005a FB68     		ldr	r3, [r7, #12]
 2089 005c 181C     		mov	r0, r3
 2090 005e FFF7FEFF 		bl	_task_ready_internal
2017:../MQXLITE/kernel/task.c **** 
2018:../MQXLITE/kernel/task.c ****     _INT_ENABLE();
 2091              		.loc 1 2018 0
 2092 0062 BB68     		ldr	r3, [r7, #8]
 2093 0064 DB69     		ldr	r3, [r3, #28]
 2094 0066 9B6C     		ldr	r3, [r3, #72]
 2095 0068 002B     		cmp	r3, #0
 2096 006a 0ED0     		beq	.L123
 2097              		.loc 1 2018 0 is_stmt 0
 2098 006c BB68     		ldr	r3, [r7, #8]
 2099 006e DB69     		ldr	r3, [r3, #28]
 2100 0070 9A6C     		ldr	r2, [r3, #72]
 2101 0072 013A     		sub	r2, r2, #1
 2102 0074 9A64     		str	r2, [r3, #72]
 2103 0076 9B6C     		ldr	r3, [r3, #72]
 2104 0078 002B     		cmp	r3, #0
 2105 007a 06D1     		bne	.L123
 2106              		.loc 1 2018 0
 2107 007c BB68     		ldr	r3, [r7, #8]
 2108 007e 1B8B     		ldrh	r3, [r3, #24]
 2109 0080 002B     		cmp	r3, #0
 2110 0082 01D0     		beq	.L124
 2111              		.loc 1 2018 0
 2112              	@ 2018 "../MQXLITE/kernel/task.c" 1
 2113 0084 62B6     		cpsie i
 2114              	@ 0 "" 2
 2115              		.code	16
 2116 0086 00E0     		b	.L123
 2117              	.L124:
 2118              		.loc 1 2018 0
 2119              	@ 2018 "../MQXLITE/kernel/task.c" 1
 2120 0088 62B6     		cpsie i
 2121              	@ 0 "" 2
 2122              		.code	16
 2123              	.L123:
2019:../MQXLITE/kernel/task.c **** 
2020:../MQXLITE/kernel/task.c ****     _CHECK_RUN_SCHEDULER(); /* Let higher priority task run */
 2124              		.loc 1 2020 0 is_stmt 1
 2125 008a FFF7FEFF 		bl	_sched_check_scheduler_internal
 2126              	.L118:
2021:../MQXLITE/kernel/task.c **** }
 2127              		.loc 1 2021 0
 2128 008e BD46     		mov	sp, r7
 2129 0090 04B0     		add	sp, sp, #16
 2130              		@ sp needed for prologue
 2131 0092 80BD     		pop	{r7, pc}
 2132              	.L126:
 2133              		.align	2
 2134              	.L125:
 2135 0094 00000000 		.word	_mqx_kernel_data
 2136              		.cfi_endproc
 2137              	.LFE22:
 2139              		.section	.text._task_restart_func,"ax",%progbits
 2140              		.align	2
 2141              		.code	16
 2142              		.thumb_func
 2144              	_task_restart_func:
 2145              	.LFB23:
2022:../MQXLITE/kernel/task.c **** 
2023:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
2024:../MQXLITE/kernel/task.c **** 
2025:../MQXLITE/kernel/task.c **** /*!
2026:../MQXLITE/kernel/task.c ****  * \brief Makes the task ready to run by putting it in its ready queue.
2027:../MQXLITE/kernel/task.c ****  *
2028:../MQXLITE/kernel/task.c ****  * This function is an equivalent to the _task_ready() API call but it can be
2029:../MQXLITE/kernel/task.c ****  * executed from within the User task or other code running in the CPU User mode.
2030:../MQXLITE/kernel/task.c ****  * Parameters passed to this function by pointer are required to meet the memory
2031:../MQXLITE/kernel/task.c ****  * protection requirements as described in the parameter list below.
2032:../MQXLITE/kernel/task.c ****  *
2033:../MQXLITE/kernel/task.c ****  * \param[in] td Pointer to the task descriptor of the task (on this processor)
2034:../MQXLITE/kernel/task.c ****  * to be made ready.
2035:../MQXLITE/kernel/task.c ****  *
2036:../MQXLITE/kernel/task.c ****  * \warning If the new ready task has higher priority than the calling task,
2037:../MQXLITE/kernel/task.c ****  * MQX makes the new ready task active.
2038:../MQXLITE/kernel/task.c ****  * \warning Might set one of the following task error codes:
2039:../MQXLITE/kernel/task.c ****  * \n - MQX_INVALID_TASK_ID (Task_id is not valid for this processor.)
2040:../MQXLITE/kernel/task.c ****  * \n - MQX_INVALID_TASK_STATE (Task is already in its ready queue.)
2041:../MQXLITE/kernel/task.c ****  *
2042:../MQXLITE/kernel/task.c ****  * \see _task_ready
2043:../MQXLITE/kernel/task.c ****  */
2044:../MQXLITE/kernel/task.c **** void _usr_task_ready
2045:../MQXLITE/kernel/task.c **** (
2046:../MQXLITE/kernel/task.c ****     pointer td
2047:../MQXLITE/kernel/task.c **** )
2048:../MQXLITE/kernel/task.c **** {
2049:../MQXLITE/kernel/task.c ****     MQX_API_CALL_PARAMS params = {(uint_32)td, 0, 0, 0, 0};
2050:../MQXLITE/kernel/task.c ****     _mqx_api_call(MQX_API_TASK_READY, &params);
2051:../MQXLITE/kernel/task.c **** }
2052:../MQXLITE/kernel/task.c **** 
2053:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
2054:../MQXLITE/kernel/task.c **** 
2055:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_TASK_TEMPLATE_PTR
2056:../MQXLITE/kernel/task.c **** 
2057:../MQXLITE/kernel/task.c **** /*!
2058:../MQXLITE/kernel/task.c ****  * \brief Restart the specified task.
2059:../MQXLITE/kernel/task.c ****  *
2060:../MQXLITE/kernel/task.c ****  * Restart the task specified by the given task_id (the victim).
2061:../MQXLITE/kernel/task.c ****  * \n All of the victim's resources are released, specifically all queues are
2062:../MQXLITE/kernel/task.c ****  * closed and all memory is freed.
2063:../MQXLITE/kernel/task.c ****  * \n Component cleanup functions are called to free any component resources
2064:../MQXLITE/kernel/task.c ****  * owned by this task.
2065:../MQXLITE/kernel/task.c ****  *
2066:../MQXLITE/kernel/task.c ****  * \param[in] task_id   Task ID of the task to restart.
2067:../MQXLITE/kernel/task.c ****  * \param[in] param_ptr One of the following:
2068:../MQXLITE/kernel/task.c ****  * \n - Pointer to a new task creation parameter.
2069:../MQXLITE/kernel/task.c ****  * \n - NULL (victim's creation parameter used).
2070:../MQXLITE/kernel/task.c ****  * \param[in] blocked   Whether the task should be restarted in the blocked state or not.
2071:../MQXLITE/kernel/task.c ****  *
2072:../MQXLITE/kernel/task.c ****  * \return MQX_OK
2073:../MQXLITE/kernel/task.c ****  * \return MQX_CANNOT_CALL_FUNCTION_FROM_ISR (Function cannot be called from an ISR.)
2074:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_TASK_ID (Task_id is invalid.)
2075:../MQXLITE/kernel/task.c ****  * \return MQX_OUT_OF_MEMORY (Not enough memory to rebuild stack.)
2076:../MQXLITE/kernel/task.c ****  *
2077:../MQXLITE/kernel/task.c ****  * \warning Cannot be called from an ISR.
2078:../MQXLITE/kernel/task.c ****  *
2079:../MQXLITE/kernel/task.c ****  * \see _task_create
2080:../MQXLITE/kernel/task.c ****  * \see _task_create_blocked
2081:../MQXLITE/kernel/task.c ****  * \see _task_create_at
2082:../MQXLITE/kernel/task.c ****  */
2083:../MQXLITE/kernel/task.c **** static _mqx_uint _task_restart_func
2084:../MQXLITE/kernel/task.c **** (
2085:../MQXLITE/kernel/task.c ****     _task_id    task_id,
2086:../MQXLITE/kernel/task.c ****     uint_32_ptr param_ptr,
2087:../MQXLITE/kernel/task.c ****     boolean     blocked
2088:../MQXLITE/kernel/task.c **** )
2089:../MQXLITE/kernel/task.c **** { /* Body */
 2146              		.loc 1 2089 0
 2147              		.cfi_startproc
 2148 0000 90B5     		push	{r4, r7, lr}
 2149              	.LCFI69:
 2150              		.cfi_def_cfa_offset 12
 2151              		.cfi_offset 4, -12
 2152              		.cfi_offset 7, -8
 2153              		.cfi_offset 14, -4
 2154 0002 9DB0     		sub	sp, sp, #116
 2155              	.LCFI70:
 2156              		.cfi_def_cfa_offset 128
 2157 0004 02AF     		add	r7, sp, #8
 2158              	.LCFI71:
 2159              		.cfi_def_cfa 7, 120
 2160 0006 F860     		str	r0, [r7, #12]
 2161 0008 B960     		str	r1, [r7, #8]
 2162 000a 7A60     		str	r2, [r7, #4]
2090:../MQXLITE/kernel/task.c ****     PSP_STACK_START_STRUCT_PTR  stack_start_ptr;
2091:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR      kernel_data;
2092:../MQXLITE/kernel/task.c ****     TASK_TEMPLATE_STRUCT_PTR    template_ptr;
2093:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR               victim_ptr;
2094:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR               td_ptr;
2095:../MQXLITE/kernel/task.c ****     READY_Q_STRUCT_PTR          ready_q_ptr;
2096:../MQXLITE/kernel/task.c ****     char_ptr                    stack_ptr;
2097:../MQXLITE/kernel/task.c ****     uint_32                     create_param;
2098:../MQXLITE/kernel/task.c ****     _processor_number           processor;
2099:../MQXLITE/kernel/task.c ****     _mem_size                   stack_size;
2100:../MQXLITE/kernel/task.c **** 
2101:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 2163              		.loc 1 2101 0
 2164 000c AE4B     		ldr	r3, .L152
 2165 000e 1B68     		ldr	r3, [r3]
 2166 0010 7B65     		str	r3, [r7, #84]
2102:../MQXLITE/kernel/task.c ****     _KLOGE2(KLOG_task_restart, task_id);
2103:../MQXLITE/kernel/task.c **** 
2104:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
2105:../MQXLITE/kernel/task.c ****     if (kernel_data->IN_ISR)
 2167              		.loc 1 2105 0
 2168 0012 7B6D     		ldr	r3, [r7, #84]
 2169 0014 1B8B     		ldrh	r3, [r3, #24]
 2170 0016 002B     		cmp	r3, #0
 2171 0018 01D0     		beq	.L128
2106:../MQXLITE/kernel/task.c ****     {
2107:../MQXLITE/kernel/task.c ****         /* Cannot be called from an ISR */
2108:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_restart, MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
2109:../MQXLITE/kernel/task.c ****         return(MQX_CANNOT_CALL_FUNCTION_FROM_ISR);
 2172              		.loc 1 2109 0
 2173 001a 0D23     		mov	r3, #13
 2174 001c 50E1     		b	.L129
 2175              	.L128:
2110:../MQXLITE/kernel/task.c ****     } /* Endif */
2111:../MQXLITE/kernel/task.c **** #endif
2112:../MQXLITE/kernel/task.c **** 
2113:../MQXLITE/kernel/task.c ****     if (task_id != MQX_NULL_TASK_ID)
 2176              		.loc 1 2113 0
 2177 001e FB68     		ldr	r3, [r7, #12]
 2178 0020 002B     		cmp	r3, #0
 2179 0022 10D0     		beq	.L130
2114:../MQXLITE/kernel/task.c ****     {
2115:../MQXLITE/kernel/task.c ****         processor = PROC_NUMBER_FROM_TASKID(task_id);
 2180              		.loc 1 2115 0
 2181 0024 FB68     		ldr	r3, [r7, #12]
 2182 0026 1A0C     		lsr	r2, r3, #16
 2183 0028 3B1C     		mov	r3, r7
 2184 002a 5233     		add	r3, r3, #82
 2185 002c 1A80     		strh	r2, [r3]
2116:../MQXLITE/kernel/task.c ****         if (processor != (_processor_number)kernel_data->INIT.PROCESSOR_NUMBER )
 2186              		.loc 1 2116 0
 2187 002e 7A6D     		ldr	r2, [r7, #84]
 2188 0030 A823     		mov	r3, #168
 2189 0032 5B00     		lsl	r3, r3, #1
 2190 0034 D358     		ldr	r3, [r2, r3]
 2191 0036 9BB2     		uxth	r3, r3
 2192 0038 3A1C     		mov	r2, r7
 2193 003a 5232     		add	r2, r2, #82
 2194 003c 1288     		ldrh	r2, [r2]
 2195 003e 9A42     		cmp	r2, r3
 2196 0040 01D0     		beq	.L130
2117:../MQXLITE/kernel/task.c ****         {
2118:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
2119:../MQXLITE/kernel/task.c ****             if ( kernel_data->IPC != NULL )
2120:../MQXLITE/kernel/task.c ****             {
2121:../MQXLITE/kernel/task.c ****                 _KLOGX2(KLOG_task_restart, MQX_OK);
2122:../MQXLITE/kernel/task.c ****                 return( (*kernel_data->IPC)(FALSE, processor,
2123:../MQXLITE/kernel/task.c ****                                 KERNEL_MESSAGES, IPC_TASK_RESTART, 3, (_mqx_uint)task_id,
2124:../MQXLITE/kernel/task.c ****                                 (_mqx_uint)param_ptr, (_mqx_uint)blocked));
2125:../MQXLITE/kernel/task.c ****             }
2126:../MQXLITE/kernel/task.c ****             else
2127:../MQXLITE/kernel/task.c ****             {
2128:../MQXLITE/kernel/task.c **** #endif
2129:../MQXLITE/kernel/task.c ****                 _KLOGX2(KLOG_task_restart, MQX_INVALID_TASK_ID);
2130:../MQXLITE/kernel/task.c ****                 return(MQX_INVALID_TASK_ID);
 2197              		.loc 1 2130 0
 2198 0042 1223     		mov	r3, #18
 2199 0044 3CE1     		b	.L129
 2200              	.L130:
2131:../MQXLITE/kernel/task.c **** #if MQX_IS_MULTI_PROCESSOR
2132:../MQXLITE/kernel/task.c ****             } /* Endif */
2133:../MQXLITE/kernel/task.c **** #endif
2134:../MQXLITE/kernel/task.c ****         }/* Endif */
2135:../MQXLITE/kernel/task.c ****     }/* Endif */
2136:../MQXLITE/kernel/task.c **** 
2137:../MQXLITE/kernel/task.c ****     victim_ptr = (TD_STRUCT_PTR)_task_get_td(task_id);
 2201              		.loc 1 2137 0
 2202 0046 FB68     		ldr	r3, [r7, #12]
 2203 0048 181C     		mov	r0, r3
 2204 004a FFF7FEFF 		bl	_task_get_td
 2205 004e 031C     		mov	r3, r0
 2206 0050 FB64     		str	r3, [r7, #76]
2138:../MQXLITE/kernel/task.c **** 
2139:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
2140:../MQXLITE/kernel/task.c ****     if (victim_ptr == NULL)
 2207              		.loc 1 2140 0
 2208 0052 FB6C     		ldr	r3, [r7, #76]
 2209 0054 002B     		cmp	r3, #0
 2210 0056 01D1     		bne	.L131
2141:../MQXLITE/kernel/task.c ****     {
2142:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_restart, MQX_INVALID_TASK_ID);
2143:../MQXLITE/kernel/task.c ****         return(MQX_INVALID_TASK_ID);
 2211              		.loc 1 2143 0
 2212 0058 1223     		mov	r3, #18
 2213 005a 31E1     		b	.L129
 2214              	.L131:
2144:../MQXLITE/kernel/task.c ****     } /* Endif */
2145:../MQXLITE/kernel/task.c **** 
2146:../MQXLITE/kernel/task.c ****     if (victim_ptr == SYSTEM_TD_PTR(kernel_data))
 2215              		.loc 1 2146 0
 2216 005c 7B6D     		ldr	r3, [r7, #84]
 2217 005e 1A1C     		mov	r2, r3
 2218 0060 4832     		add	r2, r2, #72
 2219 0062 FB6C     		ldr	r3, [r7, #76]
 2220 0064 9A42     		cmp	r2, r3
 2221 0066 01D1     		bne	.L132
2147:../MQXLITE/kernel/task.c ****     {
2148:../MQXLITE/kernel/task.c ****         _KLOGX2(KLOG_task_restart, MQX_INVALID_TASK_ID);
2149:../MQXLITE/kernel/task.c ****         return(MQX_INVALID_TASK_ID);
 2222              		.loc 1 2149 0
 2223 0068 1223     		mov	r3, #18
 2224 006a 29E1     		b	.L129
 2225              	.L132:
2150:../MQXLITE/kernel/task.c ****     } /* Endif */
2151:../MQXLITE/kernel/task.c **** #endif
2152:../MQXLITE/kernel/task.c **** 
2153:../MQXLITE/kernel/task.c ****     /* First, serialize task creation/destruction/restart */
2154:../MQXLITE/kernel/task.c ****     _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 2226              		.loc 1 2154 0
 2227 006c 7B6D     		ldr	r3, [r7, #84]
 2228 006e F433     		add	r3, r3, #244
 2229 0070 181C     		mov	r0, r3
 2230 0072 FFF7FEFF 		bl	_lwsem_wait
2155:../MQXLITE/kernel/task.c **** 
2156:../MQXLITE/kernel/task.c ****     _int_disable();
 2231              		.loc 1 2156 0
 2232 0076 FFF7FEFF 		bl	_int_disable
2157:../MQXLITE/kernel/task.c ****     /* remove the victim from any queues it may be in. */
2158:../MQXLITE/kernel/task.c ****     if (victim_ptr->STATE == READY)
 2233              		.loc 1 2158 0
 2234 007a FB6C     		ldr	r3, [r7, #76]
 2235 007c 9B68     		ldr	r3, [r3, #8]
 2236 007e 022B     		cmp	r3, #2
 2237 0080 11D1     		bne	.L133
2159:../MQXLITE/kernel/task.c ****     {
2160:../MQXLITE/kernel/task.c ****         if (victim_ptr != kernel_data->ACTIVE_PTR)
 2238              		.loc 1 2160 0
 2239 0082 7B6D     		ldr	r3, [r7, #84]
 2240 0084 DA69     		ldr	r2, [r3, #28]
 2241 0086 FB6C     		ldr	r3, [r7, #76]
 2242 0088 9A42     		cmp	r2, r3
 2243 008a 50D0     		beq	.L134
 2244              	.LBB13:
2161:../MQXLITE/kernel/task.c ****         {
2162:../MQXLITE/kernel/task.c ****             /* Remove other task from ready queue */
2163:../MQXLITE/kernel/task.c ****             _QUEUE_UNLINK(victim_ptr);
 2245              		.loc 1 2163 0
 2246 008c FB6C     		ldr	r3, [r7, #76]
 2247 008e 5B68     		ldr	r3, [r3, #4]
 2248 0090 BB64     		str	r3, [r7, #72]
 2249 0092 FB6C     		ldr	r3, [r7, #76]
 2250 0094 1B68     		ldr	r3, [r3]
 2251 0096 7B64     		str	r3, [r7, #68]
 2252 0098 BB6C     		ldr	r3, [r7, #72]
 2253 009a 7A6C     		ldr	r2, [r7, #68]
 2254 009c 1A60     		str	r2, [r3]
 2255 009e 7B6C     		ldr	r3, [r7, #68]
 2256 00a0 BA6C     		ldr	r2, [r7, #72]
 2257 00a2 5A60     		str	r2, [r3, #4]
 2258 00a4 43E0     		b	.L134
 2259              	.L133:
 2260              	.LBE13:
2164:../MQXLITE/kernel/task.c ****         } /* Endif */
2165:../MQXLITE/kernel/task.c ****     }
2166:../MQXLITE/kernel/task.c ****     else if (victim_ptr->STATE & IS_ON_TIMEOUT_Q)
 2261              		.loc 1 2166 0
 2262 00a6 FB6C     		ldr	r3, [r7, #76]
 2263 00a8 9A68     		ldr	r2, [r3, #8]
 2264 00aa 8023     		mov	r3, #128
 2265 00ac 5B00     		lsl	r3, r3, #1
 2266 00ae 1340     		and	r3, r2
 2267 00b0 25D0     		beq	.L135
2167:../MQXLITE/kernel/task.c ****     {
2168:../MQXLITE/kernel/task.c ****         /* Remove from time queue */
2169:../MQXLITE/kernel/task.c ****         _TIME_DEQUEUE(victim_ptr, kernel_data);
 2268              		.loc 1 2169 0
 2269 00b2 FB6C     		ldr	r3, [r7, #76]
 2270 00b4 9A68     		ldr	r2, [r3, #8]
 2271 00b6 8023     		mov	r3, #128
 2272 00b8 5B00     		lsl	r3, r3, #1
 2273 00ba 1340     		and	r3, r2
 2274 00bc 37D0     		beq	.L134
 2275              	.LBB14:
 2276              		.loc 1 2169 0 is_stmt 0
 2277 00be FB6C     		ldr	r3, [r7, #76]
 2278 00c0 5B68     		ldr	r3, [r3, #4]
 2279 00c2 3B64     		str	r3, [r7, #64]
 2280 00c4 FB6C     		ldr	r3, [r7, #76]
 2281 00c6 1B68     		ldr	r3, [r3]
 2282 00c8 FB63     		str	r3, [r7, #60]
 2283 00ca 3B6C     		ldr	r3, [r7, #64]
 2284 00cc FA6B     		ldr	r2, [r7, #60]
 2285 00ce 1A60     		str	r2, [r3]
 2286 00d0 FB6B     		ldr	r3, [r7, #60]
 2287 00d2 3A6C     		ldr	r2, [r7, #64]
 2288 00d4 5A60     		str	r2, [r3, #4]
 2289              	.LBE14:
 2290 00d6 7B6D     		ldr	r3, [r7, #84]
 2291 00d8 2933     		add	r3, r3, #41
 2292 00da FF33     		add	r3, r3, #255
 2293 00dc 1A89     		ldrh	r2, [r3, #8]
 2294 00de 013A     		sub	r2, r2, #1
 2295 00e0 92B2     		uxth	r2, r2
 2296 00e2 1A81     		strh	r2, [r3, #8]
 2297 00e4 FB6C     		ldr	r3, [r7, #76]
 2298 00e6 9A68     		ldr	r2, [r3, #8]
 2299 00e8 784B     		ldr	r3, .L152+4
 2300 00ea 1A40     		and	r2, r3
 2301 00ec FB6C     		ldr	r3, [r7, #76]
 2302 00ee 9A60     		str	r2, [r3, #8]
 2303 00f0 FB6C     		ldr	r3, [r7, #76]
 2304 00f2 9B68     		ldr	r3, [r3, #8]
 2305 00f4 0322     		mov	r2, #3
 2306 00f6 1A43     		orr	r2, r3
 2307 00f8 FB6C     		ldr	r3, [r7, #76]
 2308 00fa 9A60     		str	r2, [r3, #8]
 2309 00fc 17E0     		b	.L134
 2310              	.L135:
2170:../MQXLITE/kernel/task.c ****     }
2171:../MQXLITE/kernel/task.c ****     else if (victim_ptr->STATE & TD_IS_ON_QUEUE)
 2311              		.loc 1 2171 0 is_stmt 1
 2312 00fe FB6C     		ldr	r3, [r7, #76]
 2313 0100 9A68     		ldr	r2, [r3, #8]
 2314 0102 8023     		mov	r3, #128
 2315 0104 9B00     		lsl	r3, r3, #2
 2316 0106 1340     		and	r3, r2
 2317 0108 11D0     		beq	.L134
 2318              	.LBB15:
2172:../MQXLITE/kernel/task.c ****     {
2173:../MQXLITE/kernel/task.c ****         /* Remove from queue, where suspended
2174:../MQXLITE/kernel/task.c ****          * eg, MUTEX_BLOCKED, IO_BLOCKED, TASKQ_BLOCKED
2175:../MQXLITE/kernel/task.c ****          */
2176:../MQXLITE/kernel/task.c ****         _QUEUE_REMOVE(victim_ptr->INFO, victim_ptr);
 2319              		.loc 1 2176 0
 2320 010a FB6C     		ldr	r3, [r7, #76]
 2321 010c 5B68     		ldr	r3, [r3, #4]
 2322 010e BB63     		str	r3, [r7, #56]
 2323 0110 FB6C     		ldr	r3, [r7, #76]
 2324 0112 1B68     		ldr	r3, [r3]
 2325 0114 7B63     		str	r3, [r7, #52]
 2326 0116 BB6B     		ldr	r3, [r7, #56]
 2327 0118 7A6B     		ldr	r2, [r7, #52]
 2328 011a 1A60     		str	r2, [r3]
 2329 011c 7B6B     		ldr	r3, [r7, #52]
 2330 011e BA6B     		ldr	r2, [r7, #56]
 2331 0120 5A60     		str	r2, [r3, #4]
 2332              	.LBE15:
 2333 0122 FB6C     		ldr	r3, [r7, #76]
 2334 0124 DB6A     		ldr	r3, [r3, #44]
 2335 0126 1A89     		ldrh	r2, [r3, #8]
 2336 0128 013A     		sub	r2, r2, #1
 2337 012a 92B2     		uxth	r2, r2
 2338 012c 1A81     		strh	r2, [r3, #8]
 2339              	.L134:
2177:../MQXLITE/kernel/task.c ****     } /* Endif */
2178:../MQXLITE/kernel/task.c **** 
2179:../MQXLITE/kernel/task.c ****     if (victim_ptr->STATE & TD_IS_ON_AUX_QUEUE)
 2340              		.loc 1 2179 0
 2341 012e FB6C     		ldr	r3, [r7, #76]
 2342 0130 9A68     		ldr	r2, [r3, #8]
 2343 0132 8023     		mov	r3, #128
 2344 0134 DB00     		lsl	r3, r3, #3
 2345 0136 1340     		and	r3, r2
 2346 0138 13D0     		beq	.L136
 2347              	.LBB16:
2180:../MQXLITE/kernel/task.c ****     {
2181:../MQXLITE/kernel/task.c ****         /*
2182:../MQXLITE/kernel/task.c ****          * Remove from queue, where suspended
2183:../MQXLITE/kernel/task.c ****          * eg, LWSEM_BLOCKED
2184:../MQXLITE/kernel/task.c ****          * (uses AUX_QUEUE field)
2185:../MQXLITE/kernel/task.c ****          */
2186:../MQXLITE/kernel/task.c ****         _QUEUE_REMOVE(victim_ptr->INFO, &victim_ptr->AUX_QUEUE);
 2348              		.loc 1 2186 0
 2349 013a FB6C     		ldr	r3, [r7, #76]
 2350 013c 3033     		add	r3, r3, #48
 2351 013e 5B68     		ldr	r3, [r3, #4]
 2352 0140 3B63     		str	r3, [r7, #48]
 2353 0142 FB6C     		ldr	r3, [r7, #76]
 2354 0144 3033     		add	r3, r3, #48
 2355 0146 1B68     		ldr	r3, [r3]
 2356 0148 FB62     		str	r3, [r7, #44]
 2357 014a 3B6B     		ldr	r3, [r7, #48]
 2358 014c FA6A     		ldr	r2, [r7, #44]
 2359 014e 1A60     		str	r2, [r3]
 2360 0150 FB6A     		ldr	r3, [r7, #44]
 2361 0152 3A6B     		ldr	r2, [r7, #48]
 2362 0154 5A60     		str	r2, [r3, #4]
 2363              	.LBE16:
 2364 0156 FB6C     		ldr	r3, [r7, #76]
 2365 0158 DB6A     		ldr	r3, [r3, #44]
 2366 015a 1A89     		ldrh	r2, [r3, #8]
 2367 015c 013A     		sub	r2, r2, #1
 2368 015e 92B2     		uxth	r2, r2
 2369 0160 1A81     		strh	r2, [r3, #8]
 2370              	.L136:
2187:../MQXLITE/kernel/task.c ****     } /* Endif */
2188:../MQXLITE/kernel/task.c **** 
2189:../MQXLITE/kernel/task.c ****     victim_ptr->STATE   = DYING;
 2371              		.loc 1 2189 0
 2372 0162 FB6C     		ldr	r3, [r7, #76]
 2373 0164 0922     		mov	r2, #9
 2374 0166 9A60     		str	r2, [r3, #8]
2190:../MQXLITE/kernel/task.c **** 
2191:../MQXLITE/kernel/task.c **** #if MQXCFG_ENABLE_FP && PSP_HAS_FPU
2192:../MQXLITE/kernel/task.c ****     /* Stop Floating point context monitoring */
2193:../MQXLITE/kernel/task.c ****     if (kernel_data->FP_ACTIVE_PTR == victim_ptr)
2194:../MQXLITE/kernel/task.c ****     {
2195:../MQXLITE/kernel/task.c ****         kernel_data->FP_ACTIVE_PTR = NULL;
2196:../MQXLITE/kernel/task.c ****     }/* Endif */
2197:../MQXLITE/kernel/task.c **** #endif
2198:../MQXLITE/kernel/task.c **** 
2199:../MQXLITE/kernel/task.c ****     _int_enable();
 2375              		.loc 1 2199 0
 2376 0168 FFF7FEFF 		bl	_int_enable
 2377              	.LBB17:
2200:../MQXLITE/kernel/task.c **** 
2201:../MQXLITE/kernel/task.c **** #if MQX_COMPONENT_DESTRUCTION
2202:../MQXLITE/kernel/task.c ****     {
2203:../MQXLITE/kernel/task.c ****         _mqx_uint   i;
2204:../MQXLITE/kernel/task.c ****         for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i)
 2378              		.loc 1 2204 0
 2379 016c 0023     		mov	r3, #0
 2380 016e BB65     		str	r3, [r7, #88]
 2381 0170 11E0     		b	.L137
 2382              	.L139:
2205:../MQXLITE/kernel/task.c ****         {
2206:../MQXLITE/kernel/task.c ****             if (kernel_data->COMPONENT_CLEANUP[i] != NULL)
 2383              		.loc 1 2206 0
 2384 0172 7B6D     		ldr	r3, [r7, #84]
 2385 0174 BA6D     		ldr	r2, [r7, #88]
 2386 0176 7432     		add	r2, r2, #116
 2387 0178 9200     		lsl	r2, r2, #2
 2388 017a D358     		ldr	r3, [r2, r3]
 2389 017c 002B     		cmp	r3, #0
 2390 017e 07D0     		beq	.L138
2207:../MQXLITE/kernel/task.c ****             {
2208:../MQXLITE/kernel/task.c ****                 (*kernel_data->COMPONENT_CLEANUP[i])(victim_ptr);
 2391              		.loc 1 2208 0
 2392 0180 7B6D     		ldr	r3, [r7, #84]
 2393 0182 BA6D     		ldr	r2, [r7, #88]
 2394 0184 7432     		add	r2, r2, #116
 2395 0186 9200     		lsl	r2, r2, #2
 2396 0188 D358     		ldr	r3, [r2, r3]
 2397 018a FA6C     		ldr	r2, [r7, #76]
 2398 018c 101C     		mov	r0, r2
 2399 018e 9847     		blx	r3
 2400              	.L138:
2204:../MQXLITE/kernel/task.c ****         for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i)
 2401              		.loc 1 2204 0
 2402 0190 BB6D     		ldr	r3, [r7, #88]
 2403 0192 0133     		add	r3, r3, #1
 2404 0194 BB65     		str	r3, [r7, #88]
 2405              	.L137:
2204:../MQXLITE/kernel/task.c ****         for (i = 0; i < MAX_KERNEL_COMPONENTS; ++i)
 2406              		.loc 1 2204 0 is_stmt 0
 2407 0196 BB6D     		ldr	r3, [r7, #88]
 2408 0198 0F2B     		cmp	r3, #15
 2409 019a EAD9     		bls	.L139
 2410              	.LBE17:
2209:../MQXLITE/kernel/task.c ****             } /* Endif */
2210:../MQXLITE/kernel/task.c ****         } /* Endfor */
2211:../MQXLITE/kernel/task.c ****     }
2212:../MQXLITE/kernel/task.c **** #endif
2213:../MQXLITE/kernel/task.c **** 
2214:../MQXLITE/kernel/task.c ****     td_ptr = kernel_data->ACTIVE_PTR;
 2411              		.loc 1 2214 0 is_stmt 1
 2412 019c 7B6D     		ldr	r3, [r7, #84]
 2413 019e DB69     		ldr	r3, [r3, #28]
 2414 01a0 BB62     		str	r3, [r7, #40]
2215:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
2216:../MQXLITE/kernel/task.c ****     {
2217:../MQXLITE/kernel/task.c ****         pointer                     block_ptr;
2218:../MQXLITE/kernel/task.c ****         block_ptr = _mem_get_next_block_internal(victim_ptr, NULL);
2219:../MQXLITE/kernel/task.c ****         while (block_ptr != NULL)
2220:../MQXLITE/kernel/task.c ****         {
2221:../MQXLITE/kernel/task.c ****             if (block_ptr           == victim_ptr ||
2222:../MQXLITE/kernel/task.c ****                 MEM_TYPE_TD         == GET_MEMBLOCK_TYPE(block_ptr) ||
2223:../MQXLITE/kernel/task.c ****                 MEM_TYPE_TASK_STACK == GET_MEMBLOCK_TYPE(block_ptr))
2224:../MQXLITE/kernel/task.c ****             {
2225:../MQXLITE/kernel/task.c **** 
2226:../MQXLITE/kernel/task.c ****                 block_ptr = _mem_get_next_block_internal (victim_ptr, block_ptr);
2227:../MQXLITE/kernel/task.c ****                 if (block_ptr == victim_ptr)
2228:../MQXLITE/kernel/task.c ****                     break;
2229:../MQXLITE/kernel/task.c ****             }
2230:../MQXLITE/kernel/task.c ****             else
2231:../MQXLITE/kernel/task.c ****             {
2232:../MQXLITE/kernel/task.c ****                 _mem_transfer_td_internal(block_ptr, victim_ptr, td_ptr);
2233:../MQXLITE/kernel/task.c ****                 _mem_free(block_ptr);
2234:../MQXLITE/kernel/task.c ****                 block_ptr = _mem_get_next_block_internal (victim_ptr, NULL);
2235:../MQXLITE/kernel/task.c ****             }
2236:../MQXLITE/kernel/task.c ****         }
2237:../MQXLITE/kernel/task.c ****     }
2238:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
2239:../MQXLITE/kernel/task.c **** 
2240:../MQXLITE/kernel/task.c ****     /* Free up create/destroy/restart for other tasks */
2241:../MQXLITE/kernel/task.c ****     _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 2415              		.loc 1 2241 0
 2416 01a2 7B6D     		ldr	r3, [r7, #84]
 2417 01a4 F433     		add	r3, r3, #244
 2418 01a6 181C     		mov	r0, r3
 2419 01a8 FFF7FEFF 		bl	_lwsem_post
2242:../MQXLITE/kernel/task.c **** 
2243:../MQXLITE/kernel/task.c ****     template_ptr    = victim_ptr->TASK_TEMPLATE_PTR;
 2420              		.loc 1 2243 0
 2421 01ac FB6C     		ldr	r3, [r7, #76]
 2422 01ae 9B6D     		ldr	r3, [r3, #88]
 2423 01b0 7B62     		str	r3, [r7, #36]
2244:../MQXLITE/kernel/task.c ****     stack_start_ptr = _psp_get_stack_start(victim_ptr);
 2424              		.loc 1 2244 0
 2425 01b2 FB6C     		ldr	r3, [r7, #76]
 2426 01b4 181C     		mov	r0, r3
 2427 01b6 FFF7FEFF 		bl	_psp_get_stack_start
 2428 01ba 031C     		mov	r3, r0
 2429 01bc 3B62     		str	r3, [r7, #32]
2245:../MQXLITE/kernel/task.c ****     if (param_ptr == NULL)
 2430              		.loc 1 2245 0
 2431 01be BB68     		ldr	r3, [r7, #8]
 2432 01c0 002B     		cmp	r3, #0
 2433 01c2 03D1     		bne	.L140
2246:../MQXLITE/kernel/task.c ****     {
2247:../MQXLITE/kernel/task.c ****         create_param = stack_start_ptr->PARAMETER;
 2434              		.loc 1 2247 0
 2435 01c4 3B6A     		ldr	r3, [r7, #32]
 2436 01c6 DB6C     		ldr	r3, [r3, #76]
 2437 01c8 3B66     		str	r3, [r7, #96]
 2438 01ca 02E0     		b	.L141
 2439              	.L140:
2248:../MQXLITE/kernel/task.c ****     }
2249:../MQXLITE/kernel/task.c ****     else
2250:../MQXLITE/kernel/task.c ****     {
2251:../MQXLITE/kernel/task.c ****         create_param = *param_ptr;
 2440              		.loc 1 2251 0
 2441 01cc BB68     		ldr	r3, [r7, #8]
 2442 01ce 1B68     		ldr	r3, [r3]
 2443 01d0 3B66     		str	r3, [r7, #96]
 2444              	.L141:
2252:../MQXLITE/kernel/task.c ****     } /* Endif */
2253:../MQXLITE/kernel/task.c **** 
2254:../MQXLITE/kernel/task.c ****     if (victim_ptr->STACK_ALLOC_BLOCK)    {
 2445              		.loc 1 2254 0
 2446 01d2 FB6C     		ldr	r3, [r7, #76]
 2447 01d4 DB6E     		ldr	r3, [r3, #108]
 2448 01d6 002B     		cmp	r3, #0
 2449 01d8 03D0     		beq	.L142
2255:../MQXLITE/kernel/task.c ****         stack_ptr = victim_ptr->STACK_ALLOC_BLOCK;
 2450              		.loc 1 2255 0
 2451 01da FB6C     		ldr	r3, [r7, #76]
 2452 01dc DB6E     		ldr	r3, [r3, #108]
 2453 01de 7B66     		str	r3, [r7, #100]
 2454 01e0 02E0     		b	.L143
 2455              	.L142:
2256:../MQXLITE/kernel/task.c ****     }
2257:../MQXLITE/kernel/task.c ****     else    {
2258:../MQXLITE/kernel/task.c ****         stack_ptr = (char_ptr)victim_ptr + sizeof(TD_STRUCT);
 2456              		.loc 1 2258 0
 2457 01e2 FB6C     		ldr	r3, [r7, #76]
 2458 01e4 7033     		add	r3, r3, #112
 2459 01e6 7B66     		str	r3, [r7, #100]
 2460              	.L143:
2259:../MQXLITE/kernel/task.c ****     }
2260:../MQXLITE/kernel/task.c **** 
2261:../MQXLITE/kernel/task.c ****     if (stack_ptr == (pointer)template_ptr)
 2461              		.loc 1 2261 0
 2462 01e8 7A6E     		ldr	r2, [r7, #100]
 2463 01ea 7B6A     		ldr	r3, [r7, #36]
 2464 01ec 9A42     		cmp	r2, r3
 2465 01ee 02D1     		bne	.L144
2262:../MQXLITE/kernel/task.c ****     {
2263:../MQXLITE/kernel/task.c ****         /* task has been created with temporary template, copy of template is before stack in alloc
2264:../MQXLITE/kernel/task.c ****             stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
 2466              		.loc 1 2264 0
 2467 01f0 7B6E     		ldr	r3, [r7, #100]
 2468 01f2 1C33     		add	r3, r3, #28
 2469 01f4 7B66     		str	r3, [r7, #100]
 2470              	.L144:
2265:../MQXLITE/kernel/task.c ****     }
2266:../MQXLITE/kernel/task.c **** 
2267:../MQXLITE/kernel/task.c ****     stack_size = template_ptr->TASK_STACKSIZE;
 2471              		.loc 1 2267 0
 2472 01f6 7B6A     		ldr	r3, [r7, #36]
 2473 01f8 9B68     		ldr	r3, [r3, #8]
 2474 01fa FB65     		str	r3, [r7, #92]
2268:../MQXLITE/kernel/task.c ****     if ( stack_size <= PSP_MINSTACKSIZE  )
 2475              		.loc 1 2268 0
 2476 01fc FB6D     		ldr	r3, [r7, #92]
 2477 01fe 982B     		cmp	r3, #152
 2478 0200 01D8     		bhi	.L145
2269:../MQXLITE/kernel/task.c ****     {
2270:../MQXLITE/kernel/task.c ****         stack_size = PSP_MINSTACKSIZE;
 2479              		.loc 1 2270 0
 2480 0202 9823     		mov	r3, #152
 2481 0204 FB65     		str	r3, [r7, #92]
 2482              	.L145:
2271:../MQXLITE/kernel/task.c ****     } /* Endif */
2272:../MQXLITE/kernel/task.c **** 
2273:../MQXLITE/kernel/task.c ****     /* Make the size a multiple of the memory alignment */
2274:../MQXLITE/kernel/task.c ****     _MEMORY_ALIGN_VAL_LARGER(stack_size);
 2483              		.loc 1 2274 0
 2484 0206 FB6D     		ldr	r3, [r7, #92]
 2485 0208 0F33     		add	r3, r3, #15
 2486 020a 0F22     		mov	r2, #15
 2487 020c 9343     		bic	r3, r2
 2488 020e FB65     		str	r3, [r7, #92]
2275:../MQXLITE/kernel/task.c **** 
2276:../MQXLITE/kernel/task.c ****     ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
 2489              		.loc 1 2276 0
 2490 0210 7B6D     		ldr	r3, [r7, #84]
 2491 0212 1A6A     		ldr	r2, [r3, #32]
 2492 0214 7B6A     		ldr	r3, [r7, #36]
 2493 0216 DB68     		ldr	r3, [r3, #12]
 2494 0218 1B01     		lsl	r3, r3, #4
 2495 021a 5B42     		neg	r3, r3
 2496 021c D318     		add	r3, r2, r3
 2497 021e FB61     		str	r3, [r7, #28]
2277:../MQXLITE/kernel/task.c ****     victim_ptr->MY_QUEUE = ready_q_ptr;
 2498              		.loc 1 2277 0
 2499 0220 FB6C     		ldr	r3, [r7, #76]
 2500 0222 FA69     		ldr	r2, [r7, #28]
 2501 0224 DA61     		str	r2, [r3, #28]
2278:../MQXLITE/kernel/task.c **** #if MQX_HAS_DYNAMIC_PRIORITIES
2279:../MQXLITE/kernel/task.c ****     victim_ptr->HOME_QUEUE  = ready_q_ptr;
 2502              		.loc 1 2279 0
 2503 0226 FB6C     		ldr	r3, [r7, #76]
 2504 0228 FA69     		ldr	r2, [r7, #28]
 2505 022a 1A62     		str	r2, [r3, #32]
2280:../MQXLITE/kernel/task.c **** #endif
2281:../MQXLITE/kernel/task.c ****     victim_ptr->TASK_SR     = ready_q_ptr->ENABLE_SR;
 2506              		.loc 1 2281 0
 2507 022c FB69     		ldr	r3, [r7, #28]
 2508 022e 9A89     		ldrh	r2, [r3, #12]
 2509 0230 FB6C     		ldr	r3, [r7, #76]
 2510 0232 9A84     		strh	r2, [r3, #36]
2282:../MQXLITE/kernel/task.c ****     victim_ptr->FLAGS       = template_ptr->TASK_ATTRIBUTES;
 2511              		.loc 1 2282 0
 2512 0234 7B6A     		ldr	r3, [r7, #36]
 2513 0236 5A69     		ldr	r2, [r3, #20]
 2514 0238 FB6C     		ldr	r3, [r7, #76]
 2515 023a 9A62     		str	r2, [r3, #40]
2283:../MQXLITE/kernel/task.c **** 
2284:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
2285:../MQXLITE/kernel/task.c ****     if (template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK)
2286:../MQXLITE/kernel/task.c ****     {
2287:../MQXLITE/kernel/task.c ****         victim_ptr->FLAGS |= TASK_USER_MODE;
2288:../MQXLITE/kernel/task.c ****     }
2289:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
2290:../MQXLITE/kernel/task.c **** 
2291:../MQXLITE/kernel/task.c **** #if MQX_HAS_TIME_SLICE
2292:../MQXLITE/kernel/task.c ****     /* Reset the time slice back to the default */
2293:../MQXLITE/kernel/task.c ****     if (template_ptr->DEFAULT_TIME_SLICE)
2294:../MQXLITE/kernel/task.c ****     {
2295:../MQXLITE/kernel/task.c **** #if (MQX_DEFAULT_TIME_SLICE_IN_TICKS == 0)
2296:../MQXLITE/kernel/task.c ****         uint_32 ticks;
2297:../MQXLITE/kernel/task.c **** 
2298:../MQXLITE/kernel/task.c ****         ticks = ((template_ptr->DEFAULT_TIME_SLICE * 2 *
2299:../MQXLITE/kernel/task.c ****                         kernel_data->TICKS_PER_SECOND) / 1000) / 2  /* Rounding.. */;
2300:../MQXLITE/kernel/task.c ****         PSP_ADD_TICKS_TO_TICK_STRUCT(&td_ptr->TIME_SLICE,
2301:../MQXLITE/kernel/task.c ****             ticks, &td_ptr->TIME_SLICE);
2302:../MQXLITE/kernel/task.c **** #else
2303:../MQXLITE/kernel/task.c ****         PSP_ADD_TICKS_TO_TICK_STRUCT(&victim_ptr->TIME_SLICE,
2304:../MQXLITE/kernel/task.c ****             template_ptr->DEFAULT_TIME_SLICE, &victim_ptr->TIME_SLICE);
2305:../MQXLITE/kernel/task.c **** #endif
2306:../MQXLITE/kernel/task.c ****     }
2307:../MQXLITE/kernel/task.c ****     else
2308:../MQXLITE/kernel/task.c ****     {
2309:../MQXLITE/kernel/task.c ****         victim_ptr->TIME_SLICE = kernel_data->SCHED_TIME_SLICE;
2310:../MQXLITE/kernel/task.c ****     } /* Endif */
2311:../MQXLITE/kernel/task.c ****     /* Reset scheduling policy for task */
2312:../MQXLITE/kernel/task.c ****     if (kernel_data->SCHED_POLICY == MQX_SCHED_RR)
2313:../MQXLITE/kernel/task.c ****     {
2314:../MQXLITE/kernel/task.c ****         victim_ptr->FLAGS |= MQX_TIME_SLICE_TASK;
2315:../MQXLITE/kernel/task.c ****     } /* Endif */
2316:../MQXLITE/kernel/task.c **** #endif
2317:../MQXLITE/kernel/task.c **** 
2318:../MQXLITE/kernel/task.c **** #if MQX_USE_IO
2319:../MQXLITE/kernel/task.c ****     /* Reset the io streams back to the default */
2320:../MQXLITE/kernel/task.c ****     victim_ptr->STDIN_STREAM  = kernel_data->PROCESSOR_STDIN;
2321:../MQXLITE/kernel/task.c ****     victim_ptr->STDOUT_STREAM = kernel_data->PROCESSOR_STDOUT;
2322:../MQXLITE/kernel/task.c ****     victim_ptr->STDERR_STREAM = kernel_data->PROCESSOR_STDERR;
2323:../MQXLITE/kernel/task.c **** #endif
2324:../MQXLITE/kernel/task.c **** 
2325:../MQXLITE/kernel/task.c ****     _int_disable();
 2516              		.loc 1 2325 0
 2517 023c FFF7FEFF 		bl	_int_disable
2326:../MQXLITE/kernel/task.c **** 
2327:../MQXLITE/kernel/task.c ****     if (victim_ptr == td_ptr)
 2518              		.loc 1 2327 0
 2519 0240 FA6C     		ldr	r2, [r7, #76]
 2520 0242 BB6A     		ldr	r3, [r7, #40]
 2521 0244 9A42     		cmp	r2, r3
 2522 0246 0BD1     		bne	.L146
 2523              	.LBB18:
2328:../MQXLITE/kernel/task.c ****     {
2329:../MQXLITE/kernel/task.c ****         _QUEUE_UNLINK(victim_ptr);  /* Remove victim from the queue */
 2524              		.loc 1 2329 0
 2525 0248 FB6C     		ldr	r3, [r7, #76]
 2526 024a 5B68     		ldr	r3, [r3, #4]
 2527 024c BB61     		str	r3, [r7, #24]
 2528 024e FB6C     		ldr	r3, [r7, #76]
 2529 0250 1B68     		ldr	r3, [r3]
 2530 0252 7B61     		str	r3, [r7, #20]
 2531 0254 BB69     		ldr	r3, [r7, #24]
 2532 0256 7A69     		ldr	r2, [r7, #20]
 2533 0258 1A60     		str	r2, [r3]
 2534 025a 7B69     		ldr	r3, [r7, #20]
 2535 025c BA69     		ldr	r2, [r7, #24]
 2536 025e 5A60     		str	r2, [r3, #4]
 2537              	.L146:
 2538              	.LBE18:
2330:../MQXLITE/kernel/task.c ****     } /* Endif */
2331:../MQXLITE/kernel/task.c **** 
2332:../MQXLITE/kernel/task.c ****     /* Rebuild the task's initial context */
2333:../MQXLITE/kernel/task.c ****     if (FALSE == _psp_build_stack_frame(victim_ptr, stack_ptr, stack_size, template_ptr, victim_ptr
 2539              		.loc 1 2333 0
 2540 0260 FB6C     		ldr	r3, [r7, #76]
 2541 0262 9B8C     		ldrh	r3, [r3, #36]
 2542 0264 1C1C     		mov	r4, r3
 2543 0266 F86C     		ldr	r0, [r7, #76]
 2544 0268 796E     		ldr	r1, [r7, #100]
 2545 026a FA6D     		ldr	r2, [r7, #92]
 2546 026c 7B6A     		ldr	r3, [r7, #36]
 2547 026e 0094     		str	r4, [sp]
 2548 0270 3C6E     		ldr	r4, [r7, #96]
 2549 0272 0194     		str	r4, [sp, #4]
 2550 0274 FFF7FEFF 		bl	_psp_build_stack_frame
 2551 0278 031C     		mov	r3, r0
 2552 027a 002B     		cmp	r3, #0
 2553 027c 01D1     		bne	.L147
2334:../MQXLITE/kernel/task.c ****     {
2335:../MQXLITE/kernel/task.c ****         /* build stack failed */
2336:../MQXLITE/kernel/task.c ****         return MQX_OUT_OF_MEMORY;
 2554              		.loc 1 2336 0
 2555 027e 0423     		mov	r3, #4
 2556 0280 1EE0     		b	.L129
 2557              	.L147:
2337:../MQXLITE/kernel/task.c ****     }
2338:../MQXLITE/kernel/task.c **** 
2339:../MQXLITE/kernel/task.c ****     if (blocked)
 2558              		.loc 1 2339 0
 2559 0282 7B68     		ldr	r3, [r7, #4]
 2560 0284 002B     		cmp	r3, #0
 2561 0286 03D0     		beq	.L148
2340:../MQXLITE/kernel/task.c ****     {
2341:../MQXLITE/kernel/task.c ****         victim_ptr->STATE = BLOCKED;
 2562              		.loc 1 2341 0
 2563 0288 FB6C     		ldr	r3, [r7, #76]
 2564 028a 0322     		mov	r2, #3
 2565 028c 9A60     		str	r2, [r3, #8]
 2566 028e 03E0     		b	.L149
 2567              	.L148:
2342:../MQXLITE/kernel/task.c ****     }
2343:../MQXLITE/kernel/task.c ****     else
2344:../MQXLITE/kernel/task.c ****     {
2345:../MQXLITE/kernel/task.c ****         _task_ready_internal(victim_ptr);
 2568              		.loc 1 2345 0
 2569 0290 FB6C     		ldr	r3, [r7, #76]
 2570 0292 181C     		mov	r0, r3
 2571 0294 FFF7FEFF 		bl	_task_ready_internal
 2572              	.L149:
2346:../MQXLITE/kernel/task.c ****     } /* Endif */
2347:../MQXLITE/kernel/task.c **** 
2348:../MQXLITE/kernel/task.c ****     victim_ptr->DISABLED_LEVEL = 0;
 2573              		.loc 1 2348 0
 2574 0298 FB6C     		ldr	r3, [r7, #76]
 2575 029a 0022     		mov	r2, #0
 2576 029c 9A64     		str	r2, [r3, #72]
2349:../MQXLITE/kernel/task.c **** 
2350:../MQXLITE/kernel/task.c ****     if (victim_ptr == td_ptr)
 2577              		.loc 1 2350 0
 2578 029e FA6C     		ldr	r2, [r7, #76]
 2579 02a0 BB6A     		ldr	r3, [r7, #40]
 2580 02a2 9A42     		cmp	r2, r3
 2581 02a4 01D1     		bne	.L150
2351:../MQXLITE/kernel/task.c ****     {
2352:../MQXLITE/kernel/task.c ****         /*
2353:../MQXLITE/kernel/task.c ****          * The active task is to be restarted.
2354:../MQXLITE/kernel/task.c ****          * Will not return from here
2355:../MQXLITE/kernel/task.c ****          */
2356:../MQXLITE/kernel/task.c ****         _sched_run_internal();
 2582              		.loc 1 2356 0
 2583 02a6 FFF7FEFF 		bl	_sched_run_internal
 2584              	.L150:
2357:../MQXLITE/kernel/task.c ****     } /* Endif */
2358:../MQXLITE/kernel/task.c **** 
2359:../MQXLITE/kernel/task.c ****     /* The victim has been added to the ready Q. Preemption check must be made */
2360:../MQXLITE/kernel/task.c ****     if (kernel_data->CURRENT_READY_Q != td_ptr->MY_QUEUE)
 2585              		.loc 1 2360 0
 2586 02aa 7B6D     		ldr	r3, [r7, #84]
 2587 02ac 5A6A     		ldr	r2, [r3, #36]
 2588 02ae BB6A     		ldr	r3, [r7, #40]
 2589 02b0 DB69     		ldr	r3, [r3, #28]
 2590 02b2 9A42     		cmp	r2, r3
 2591 02b4 01D0     		beq	.L151
2361:../MQXLITE/kernel/task.c ****     {
2362:../MQXLITE/kernel/task.c ****         _sched_execute_scheduler_internal();
 2592              		.loc 1 2362 0
 2593 02b6 FFF7FEFF 		bl	_sched_execute_scheduler_internal
 2594              	.L151:
2363:../MQXLITE/kernel/task.c ****     } /* Endif */
2364:../MQXLITE/kernel/task.c **** 
2365:../MQXLITE/kernel/task.c ****     _int_enable();
 2595              		.loc 1 2365 0
 2596 02ba FFF7FEFF 		bl	_int_enable
2366:../MQXLITE/kernel/task.c **** 
2367:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_restart, MQX_OK);
2368:../MQXLITE/kernel/task.c ****     return(MQX_OK);
 2597              		.loc 1 2368 0
 2598 02be 0023     		mov	r3, #0
 2599              	.L129:
2369:../MQXLITE/kernel/task.c **** 
2370:../MQXLITE/kernel/task.c **** } /* Endbody */
 2600              		.loc 1 2370 0
 2601 02c0 181C     		mov	r0, r3
 2602 02c2 BD46     		mov	sp, r7
 2603 02c4 1BB0     		add	sp, sp, #108
 2604              		@ sp needed for prologue
 2605 02c6 90BD     		pop	{r4, r7, pc}
 2606              	.L153:
 2607              		.align	2
 2608              	.L152:
 2609 02c8 00000000 		.word	_mqx_kernel_data
 2610 02cc FFFEFFFF 		.word	-257
 2611              		.cfi_endproc
 2612              	.LFE23:
 2614              		.section	.text._task_restart,"ax",%progbits
 2615              		.align	2
 2616              		.global	_task_restart
 2617              		.code	16
 2618              		.thumb_func
 2620              	_task_restart:
 2621              	.LFB24:
2371:../MQXLITE/kernel/task.c **** 
2372:../MQXLITE/kernel/task.c **** /*!
2373:../MQXLITE/kernel/task.c ****  * \brief Restart the specified task.
2374:../MQXLITE/kernel/task.c ****  *
2375:../MQXLITE/kernel/task.c ****  * This function closes all queues that the task has open, releases all the task's
2376:../MQXLITE/kernel/task.c ****  * resources, and frees all memory that is associated with the task's resources.
2377:../MQXLITE/kernel/task.c ****  * \n This function restarts the task with the same task descriptor, task ID, and
2378:../MQXLITE/kernel/task.c ****  * task stack (Reserve stack for Stack Start Structure and call the
2379:../MQXLITE/kernel/task.c ****  * _task_restart_func().).
2380:../MQXLITE/kernel/task.c ****  *
2381:../MQXLITE/kernel/task.c ****  * \param[in] task_id   Task ID of the task to restart.
2382:../MQXLITE/kernel/task.c ****  * \param[in] param_ptr One of the following:
2383:../MQXLITE/kernel/task.c ****  * \n - Pointer to a new task creation parameter.
2384:../MQXLITE/kernel/task.c ****  * \n - NULL
2385:../MQXLITE/kernel/task.c ****  * \param[in] blocked   Whether the task should be restarted in the blocked state or not.
2386:../MQXLITE/kernel/task.c ****  *
2387:../MQXLITE/kernel/task.c ****  * \return MQX_OK
2388:../MQXLITE/kernel/task.c ****  * \return MQX_CANNOT_CALL_FUNCTION_FROM_ISR (Function cannot be called from an ISR.)
2389:../MQXLITE/kernel/task.c ****  * \return MQX_INVALID_TASK_ID (Task_id is invalid.)
2390:../MQXLITE/kernel/task.c ****  * \return MQX_OUT_OF_MEMORY (Not enough memory to restart function.)
2391:../MQXLITE/kernel/task.c ****  *
2392:../MQXLITE/kernel/task.c ****  * \warning Cannot be called from an ISR.
2393:../MQXLITE/kernel/task.c ****  *
2394:../MQXLITE/kernel/task.c ****  * \see _task_create
2395:../MQXLITE/kernel/task.c ****  * \see _task_create_blocked
2396:../MQXLITE/kernel/task.c ****  * \see _task_create_at
2397:../MQXLITE/kernel/task.c ****  */
2398:../MQXLITE/kernel/task.c **** _mqx_uint _task_restart
2399:../MQXLITE/kernel/task.c **** (
2400:../MQXLITE/kernel/task.c ****     _task_id    task_id,
2401:../MQXLITE/kernel/task.c ****     uint_32_ptr param_ptr,
2402:../MQXLITE/kernel/task.c ****     boolean     blocked
2403:../MQXLITE/kernel/task.c **** )
2404:../MQXLITE/kernel/task.c **** { /* Body */
 2622              		.loc 1 2404 0
 2623              		.cfi_startproc
 2624 0000 80B5     		push	{r7, lr}
 2625              	.LCFI72:
 2626              		.cfi_def_cfa_offset 8
 2627              		.cfi_offset 7, -8
 2628              		.cfi_offset 14, -4
 2629 0002 9AB0     		sub	sp, sp, #104
 2630              	.LCFI73:
 2631              		.cfi_def_cfa_offset 112
 2632 0004 00AF     		add	r7, sp, #0
 2633              	.LCFI74:
 2634              		.cfi_def_cfa_register 7
 2635 0006 F860     		str	r0, [r7, #12]
 2636 0008 B960     		str	r1, [r7, #8]
 2637 000a 7A60     		str	r2, [r7, #4]
2405:../MQXLITE/kernel/task.c ****     /* reserve memory in stack */
2406:../MQXLITE/kernel/task.c ****     volatile char dummy_stack_start_struct[sizeof(PSP_STACK_START_STRUCT)];
2407:../MQXLITE/kernel/task.c ****     dummy_stack_start_struct[0] = 0x00;
 2638              		.loc 1 2407 0
 2639 000c 3B1C     		mov	r3, r7
 2640 000e 1033     		add	r3, r3, #16
 2641 0010 0022     		mov	r2, #0
 2642 0012 1A70     		strb	r2, [r3]
2408:../MQXLITE/kernel/task.c **** 
2409:../MQXLITE/kernel/task.c ****     /* call the right _task_restart function */
2410:../MQXLITE/kernel/task.c ****     return(_task_restart_func(task_id, param_ptr, blocked));
 2643              		.loc 1 2410 0
 2644 0014 F968     		ldr	r1, [r7, #12]
 2645 0016 BA68     		ldr	r2, [r7, #8]
 2646 0018 7B68     		ldr	r3, [r7, #4]
 2647 001a 081C     		mov	r0, r1
 2648 001c 111C     		mov	r1, r2
 2649 001e 1A1C     		mov	r2, r3
 2650 0020 FFF7FEFF 		bl	_task_restart_func
 2651 0024 031C     		mov	r3, r0
2411:../MQXLITE/kernel/task.c **** }
 2652              		.loc 1 2411 0
 2653 0026 181C     		mov	r0, r3
 2654 0028 BD46     		mov	sp, r7
 2655 002a 1AB0     		add	sp, sp, #104
 2656              		@ sp needed for prologue
 2657 002c 80BD     		pop	{r7, pc}
 2658              		.cfi_endproc
 2659              	.LFE24:
 2661 002e C046     		.section	.text._task_stop_preemption,"ax",%progbits
 2662              		.align	2
 2663              		.global	_task_stop_preemption
 2664              		.code	16
 2665              		.thumb_func
 2667              	_task_stop_preemption:
 2668              	.LFB25:
2412:../MQXLITE/kernel/task.c **** 
2413:../MQXLITE/kernel/task.c **** #endif /* MQX_TD_HAS_TASK_TEMPLATE_PTR */
2414:../MQXLITE/kernel/task.c **** 
2415:../MQXLITE/kernel/task.c **** /*!
2416:../MQXLITE/kernel/task.c ****  * \brief Disables preemption of the current task.
2417:../MQXLITE/kernel/task.c ****  *
2418:../MQXLITE/kernel/task.c ****  * The _task_stop_preemption() function disables preemption of the active task
2419:../MQXLITE/kernel/task.c ****  * unless the task blocks explicitly (_task_block()) or calls _task_start_preemption().
2420:../MQXLITE/kernel/task.c ****  *
2421:../MQXLITE/kernel/task.c ****  * \warning Changes the preemption ability of tasks.
2422:../MQXLITE/kernel/task.c ****  * \warning Interrupts are still handled.
2423:../MQXLITE/kernel/task.c ****  *
2424:../MQXLITE/kernel/task.c ****  * \see _task_start_preemption
2425:../MQXLITE/kernel/task.c ****  * \see _task_ready
2426:../MQXLITE/kernel/task.c ****  * \see _task_block
2427:../MQXLITE/kernel/task.c ****  */
2428:../MQXLITE/kernel/task.c **** void _task_stop_preemption(void)
2429:../MQXLITE/kernel/task.c **** { /* Body */
 2669              		.loc 1 2429 0
 2670              		.cfi_startproc
 2671 0000 90B5     		push	{r4, r7, lr}
 2672              	.LCFI75:
 2673              		.cfi_def_cfa_offset 12
 2674              		.cfi_offset 4, -12
 2675              		.cfi_offset 7, -8
 2676              		.cfi_offset 14, -4
 2677 0002 83B0     		sub	sp, sp, #12
 2678              	.LCFI76:
 2679              		.cfi_def_cfa_offset 24
 2680 0004 00AF     		add	r7, sp, #0
 2681              	.LCFI77:
 2682              		.cfi_def_cfa_register 7
2430:../MQXLITE/kernel/task.c ****     register KERNEL_DATA_STRUCT_PTR kernel_data;
2431:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR                   td_ptr;
2432:../MQXLITE/kernel/task.c **** 
2433:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 2683              		.loc 1 2433 0
 2684 0006 094B     		ldr	r3, .L157
 2685 0008 1C68     		ldr	r4, [r3]
2434:../MQXLITE/kernel/task.c ****     _KLOGE1(KLOG_task_stop_preemption);
2435:../MQXLITE/kernel/task.c **** 
2436:../MQXLITE/kernel/task.c ****     td_ptr      = kernel_data->ACTIVE_PTR;
 2686              		.loc 1 2436 0
 2687 000a E369     		ldr	r3, [r4, #28]
 2688 000c 7B60     		str	r3, [r7, #4]
2437:../MQXLITE/kernel/task.c ****     _int_disable();
 2689              		.loc 1 2437 0
 2690 000e FFF7FEFF 		bl	_int_disable
2438:../MQXLITE/kernel/task.c ****     td_ptr->FLAGS |= TASK_PREEMPTION_DISABLED;
 2691              		.loc 1 2438 0
 2692 0012 7B68     		ldr	r3, [r7, #4]
 2693 0014 9B6A     		ldr	r3, [r3, #40]
 2694 0016 8022     		mov	r2, #128
 2695 0018 5201     		lsl	r2, r2, #5
 2696 001a 1A43     		orr	r2, r3
 2697 001c 7B68     		ldr	r3, [r7, #4]
 2698 001e 9A62     		str	r2, [r3, #40]
2439:../MQXLITE/kernel/task.c ****     _int_enable();
 2699              		.loc 1 2439 0
 2700 0020 FFF7FEFF 		bl	_int_enable
2440:../MQXLITE/kernel/task.c ****     _KLOGX1(KLOG_task_stop_preemption);
2441:../MQXLITE/kernel/task.c **** 
2442:../MQXLITE/kernel/task.c **** } /* Endbody */
 2701              		.loc 1 2442 0
 2702 0024 BD46     		mov	sp, r7
 2703 0026 03B0     		add	sp, sp, #12
 2704              		@ sp needed for prologue
 2705 0028 90BD     		pop	{r4, r7, pc}
 2706              	.L158:
 2707 002a C046     		.align	2
 2708              	.L157:
 2709 002c 00000000 		.word	_mqx_kernel_data
 2710              		.cfi_endproc
 2711              	.LFE25:
 2713              		.section	.text._task_start_preemption,"ax",%progbits
 2714              		.align	2
 2715              		.global	_task_start_preemption
 2716              		.code	16
 2717              		.thumb_func
 2719              	_task_start_preemption:
 2720              	.LFB26:
2443:../MQXLITE/kernel/task.c **** 
2444:../MQXLITE/kernel/task.c **** /*!
2445:../MQXLITE/kernel/task.c ****  * \brief Enables preemption of the current task.
2446:../MQXLITE/kernel/task.c ****  *
2447:../MQXLITE/kernel/task.c ****  * The _task_start_preemption() function enables preemption of the active task
2448:../MQXLITE/kernel/task.c ****  * after _task_stop_preemption() was called.
2449:../MQXLITE/kernel/task.c ****  *
2450:../MQXLITE/kernel/task.c ****  * \warning Changes the preemption ability of tasks.
2451:../MQXLITE/kernel/task.c ****  * \warning Interrupts are still handled.
2452:../MQXLITE/kernel/task.c ****  *
2453:../MQXLITE/kernel/task.c ****  * \see _task_stop_preemption
2454:../MQXLITE/kernel/task.c ****  * \see _task_ready
2455:../MQXLITE/kernel/task.c ****  * \see _task_block
2456:../MQXLITE/kernel/task.c ****  */
2457:../MQXLITE/kernel/task.c **** void _task_start_preemption(void)
2458:../MQXLITE/kernel/task.c **** { /* Body */
 2721              		.loc 1 2458 0
 2722              		.cfi_startproc
 2723 0000 90B5     		push	{r4, r7, lr}
 2724              	.LCFI78:
 2725              		.cfi_def_cfa_offset 12
 2726              		.cfi_offset 4, -12
 2727              		.cfi_offset 7, -8
 2728              		.cfi_offset 14, -4
 2729 0002 83B0     		sub	sp, sp, #12
 2730              	.LCFI79:
 2731              		.cfi_def_cfa_offset 24
 2732 0004 00AF     		add	r7, sp, #0
 2733              	.LCFI80:
 2734              		.cfi_def_cfa_register 7
2459:../MQXLITE/kernel/task.c ****     register KERNEL_DATA_STRUCT_PTR kernel_data;
2460:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR                   td_ptr;
2461:../MQXLITE/kernel/task.c **** 
2462:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 2735              		.loc 1 2462 0
 2736 0006 094B     		ldr	r3, .L160
 2737 0008 1C68     		ldr	r4, [r3]
2463:../MQXLITE/kernel/task.c ****     _KLOGE1(KLOG_task_start_preemption);
2464:../MQXLITE/kernel/task.c **** 
2465:../MQXLITE/kernel/task.c ****     td_ptr      = kernel_data->ACTIVE_PTR;
 2738              		.loc 1 2465 0
 2739 000a E369     		ldr	r3, [r4, #28]
 2740 000c 7B60     		str	r3, [r7, #4]
2466:../MQXLITE/kernel/task.c ****     _int_disable();
 2741              		.loc 1 2466 0
 2742 000e FFF7FEFF 		bl	_int_disable
2467:../MQXLITE/kernel/task.c ****     td_ptr->FLAGS &= ~TASK_PREEMPTION_DISABLED;
 2743              		.loc 1 2467 0
 2744 0012 7B68     		ldr	r3, [r7, #4]
 2745 0014 9A6A     		ldr	r2, [r3, #40]
 2746 0016 064B     		ldr	r3, .L160+4
 2747 0018 1A40     		and	r2, r3
 2748 001a 7B68     		ldr	r3, [r7, #4]
 2749 001c 9A62     		str	r2, [r3, #40]
2468:../MQXLITE/kernel/task.c ****     _CHECK_RUN_SCHEDULER(); /* Allow higher priority tasks to run */
 2750              		.loc 1 2468 0
 2751 001e FFF7FEFF 		bl	_sched_check_scheduler_internal
2469:../MQXLITE/kernel/task.c ****     _int_enable();
 2752              		.loc 1 2469 0
 2753 0022 FFF7FEFF 		bl	_int_enable
2470:../MQXLITE/kernel/task.c **** 
2471:../MQXLITE/kernel/task.c ****     _KLOGX1(KLOG_task_start_preemption);
2472:../MQXLITE/kernel/task.c **** 
2473:../MQXLITE/kernel/task.c **** } /* Endbody */
 2754              		.loc 1 2473 0
 2755 0026 BD46     		mov	sp, r7
 2756 0028 03B0     		add	sp, sp, #12
 2757              		@ sp needed for prologue
 2758 002a 90BD     		pop	{r4, r7, pc}
 2759              	.L161:
 2760              		.align	2
 2761              	.L160:
 2762 002c 00000000 		.word	_mqx_kernel_data
 2763 0030 FFEFFFFF 		.word	-4097
 2764              		.cfi_endproc
 2765              	.LFE26:
 2767              		.section	.text._task_check_stack,"ax",%progbits
 2768              		.align	2
 2769              		.global	_task_check_stack
 2770              		.code	16
 2771              		.thumb_func
 2773              	_task_check_stack:
 2774              	.LFB27:
2474:../MQXLITE/kernel/task.c **** 
2475:../MQXLITE/kernel/task.c **** /*!
2476:../MQXLITE/kernel/task.c ****  * \brief Determines whether the active task's stack is currently overflowed.
2477:../MQXLITE/kernel/task.c ****  *
2478:../MQXLITE/kernel/task.c ****  * This function indicates whether the stack is currently past its limit. The
2479:../MQXLITE/kernel/task.c ****  * function does not indicate whether the stack previously passed its limit.
2480:../MQXLITE/kernel/task.c ****  *
2481:../MQXLITE/kernel/task.c ****  * \return TRUE (Stack is out of bounds.)
2482:../MQXLITE/kernel/task.c ****  * \return FALSE (Stack is not out of bounds.)
2483:../MQXLITE/kernel/task.c ****  *
2484:../MQXLITE/kernel/task.c ****  * \see _task_set_error
2485:../MQXLITE/kernel/task.c ****  */
2486:../MQXLITE/kernel/task.c **** boolean _task_check_stack(void)
2487:../MQXLITE/kernel/task.c **** { /* Body */
 2775              		.loc 1 2487 0
 2776              		.cfi_startproc
 2777 0000 90B5     		push	{r4, r7, lr}
 2778              	.LCFI81:
 2779              		.cfi_def_cfa_offset 12
 2780              		.cfi_offset 4, -12
 2781              		.cfi_offset 7, -8
 2782              		.cfi_offset 14, -4
 2783 0002 83B0     		sub	sp, sp, #12
 2784              	.LCFI82:
 2785              		.cfi_def_cfa_offset 24
 2786 0004 00AF     		add	r7, sp, #0
 2787              	.LCFI83:
 2788              		.cfi_def_cfa_register 7
2488:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_STACK_LIMIT
2489:../MQXLITE/kernel/task.c ****     register  KERNEL_DATA_STRUCT_PTR kernel_data;
2490:../MQXLITE/kernel/task.c ****     volatile  char                   loc = (char)0;
 2789              		.loc 1 2490 0
 2790 0006 FB1D     		add	r3, r7, #7
 2791 0008 0022     		mov	r2, #0
 2792 000a 1A70     		strb	r2, [r3]
2491:../MQXLITE/kernel/task.c **** 
2492:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 2793              		.loc 1 2492 0
 2794 000c 064B     		ldr	r3, .L165
 2795 000e 1C68     		ldr	r4, [r3]
2493:../MQXLITE/kernel/task.c **** 
2494:../MQXLITE/kernel/task.c **** #if PSP_STACK_GROWS_TO_LOWER_MEM
2495:../MQXLITE/kernel/task.c ****     if ( &loc < ((char_ptr)kernel_data->ACTIVE_PTR->STACK_LIMIT) )
 2796              		.loc 1 2495 0
 2797 0010 E369     		ldr	r3, [r4, #28]
 2798 0012 9A69     		ldr	r2, [r3, #24]
 2799 0014 FB1D     		add	r3, r7, #7
 2800 0016 9A42     		cmp	r2, r3
 2801 0018 01D9     		bls	.L163
2496:../MQXLITE/kernel/task.c ****     {
2497:../MQXLITE/kernel/task.c **** #else
2498:../MQXLITE/kernel/task.c ****         if ( &loc > ((char_ptr)kernel_data->ACTIVE_PTR->STACK_LIMIT) )
2499:../MQXLITE/kernel/task.c ****         {
2500:../MQXLITE/kernel/task.c **** #endif
2501:../MQXLITE/kernel/task.c ****             return (TRUE);
 2802              		.loc 1 2501 0
 2803 001a 0123     		mov	r3, #1
 2804 001c 00E0     		b	.L164
 2805              	.L163:
2502:../MQXLITE/kernel/task.c ****         }
2503:../MQXLITE/kernel/task.c ****         else
2504:../MQXLITE/kernel/task.c ****         {
2505:../MQXLITE/kernel/task.c ****             return (FALSE);
 2806              		.loc 1 2505 0
 2807 001e 0023     		mov	r3, #0
 2808              	.L164:
2506:../MQXLITE/kernel/task.c ****         } /* Endif */
2507:../MQXLITE/kernel/task.c **** #else
2508:../MQXLITE/kernel/task.c ****         return (FALSE);
2509:../MQXLITE/kernel/task.c **** #endif
2510:../MQXLITE/kernel/task.c **** } /* Endbody */
 2809              		.loc 1 2510 0
 2810 0020 181C     		mov	r0, r3
 2811 0022 BD46     		mov	sp, r7
 2812 0024 03B0     		add	sp, sp, #12
 2813              		@ sp needed for prologue
 2814 0026 90BD     		pop	{r4, r7, pc}
 2815              	.L166:
 2816              		.align	2
 2817              	.L165:
 2818 0028 00000000 		.word	_mqx_kernel_data
 2819              		.cfi_endproc
 2820              	.LFE27:
 2822              		.section	.text._task_get_creator,"ax",%progbits
 2823              		.align	2
 2824              		.global	_task_get_creator
 2825              		.code	16
 2826              		.thumb_func
 2828              	_task_get_creator:
 2829              	.LFB28:
2511:../MQXLITE/kernel/task.c **** 
2512:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
2513:../MQXLITE/kernel/task.c **** 
2514:../MQXLITE/kernel/task.c **** /*!
2515:../MQXLITE/kernel/task.c ****  * \brief Gets the processor number of the task's home processor.
2516:../MQXLITE/kernel/task.c ****  *
2517:../MQXLITE/kernel/task.c ****  * This function returns the processor-number portion of task_id. It cannot check
2518:../MQXLITE/kernel/task.c ****  * the validity of task_id because MQX on one processor is unaware of which tasks
2519:../MQXLITE/kernel/task.c ****  * might reside on another processor.
2520:../MQXLITE/kernel/task.c ****  *
2521:../MQXLITE/kernel/task.c ****  * \param[in] task_id Task ID of the task for which to get info.
2522:../MQXLITE/kernel/task.c ****  *
2523:../MQXLITE/kernel/task.c ****  * \return Processor number of the processor where the task resides.
2524:../MQXLITE/kernel/task.c ****  *
2525:../MQXLITE/kernel/task.c ****  * \see _task_get_id
2526:../MQXLITE/kernel/task.c ****  */
2527:../MQXLITE/kernel/task.c **** _processor_number _task_get_processor
2528:../MQXLITE/kernel/task.c **** (
2529:../MQXLITE/kernel/task.c ****     _task_id task_id
2530:../MQXLITE/kernel/task.c **** )
2531:../MQXLITE/kernel/task.c **** { /* Body */
2532:../MQXLITE/kernel/task.c **** 
2533:../MQXLITE/kernel/task.c ****     return PROC_NUMBER_FROM_TASKID(task_id);
2534:../MQXLITE/kernel/task.c **** 
2535:../MQXLITE/kernel/task.c **** } /* Endbody */
2536:../MQXLITE/kernel/task.c **** 
2537:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
2538:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_PARENT
2539:../MQXLITE/kernel/task.c **** 
2540:../MQXLITE/kernel/task.c **** /*!
2541:../MQXLITE/kernel/task.c ****  * \brief Gets parent's task ID to the calling task.
2542:../MQXLITE/kernel/task.c ****  *
2543:../MQXLITE/kernel/task.c ****  * \return Task ID of the parent task.
2544:../MQXLITE/kernel/task.c ****  *
2545:../MQXLITE/kernel/task.c ****  * \see _task_get_processor
2546:../MQXLITE/kernel/task.c ****  * \see _task_get_id
2547:../MQXLITE/kernel/task.c ****  */
2548:../MQXLITE/kernel/task.c **** _task_id _task_get_creator(void)
2549:../MQXLITE/kernel/task.c **** { /* Body */
 2830              		.loc 1 2549 0
 2831              		.cfi_startproc
 2832 0000 90B5     		push	{r4, r7, lr}
 2833              	.LCFI84:
 2834              		.cfi_def_cfa_offset 12
 2835              		.cfi_offset 4, -12
 2836              		.cfi_offset 7, -8
 2837              		.cfi_offset 14, -4
 2838 0002 00AF     		add	r7, sp, #0
 2839              	.LCFI85:
 2840              		.cfi_def_cfa_register 7
2550:../MQXLITE/kernel/task.c ****     register KERNEL_DATA_STRUCT_PTR kernel_data;
2551:../MQXLITE/kernel/task.c **** 
2552:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 2841              		.loc 1 2552 0
 2842 0004 034B     		ldr	r3, .L169
 2843 0006 1C68     		ldr	r4, [r3]
2553:../MQXLITE/kernel/task.c ****     return( kernel_data->ACTIVE_PTR->PARENT );
 2844              		.loc 1 2553 0
 2845 0008 E369     		ldr	r3, [r4, #28]
 2846 000a 1B6D     		ldr	r3, [r3, #80]
2554:../MQXLITE/kernel/task.c **** 
2555:../MQXLITE/kernel/task.c **** } /* Endbody */
 2847              		.loc 1 2555 0
 2848 000c 181C     		mov	r0, r3
 2849 000e BD46     		mov	sp, r7
 2850              		@ sp needed for prologue
 2851 0010 90BD     		pop	{r4, r7, pc}
 2852              	.L170:
 2853 0012 C046     		.align	2
 2854              	.L169:
 2855 0014 00000000 		.word	_mqx_kernel_data
 2856              		.cfi_endproc
 2857              	.LFE28:
 2859              		.section	.text._task_get_error,"ax",%progbits
 2860              		.align	2
 2861              		.global	_task_get_error
 2862              		.code	16
 2863              		.thumb_func
 2865              	_task_get_error:
 2866              	.LFB29:
2556:../MQXLITE/kernel/task.c **** #endif /* MQX_TD_HAS_PARENT */
2557:../MQXLITE/kernel/task.c **** 
2558:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_ERROR_CODE
2559:../MQXLITE/kernel/task.c **** 
2560:../MQXLITE/kernel/task.c **** /*!
2561:../MQXLITE/kernel/task.c ****  * \brief Gets the task error code.
2562:../MQXLITE/kernel/task.c ****  *
2563:../MQXLITE/kernel/task.c ****  * \return Task error code for the active task.
2564:../MQXLITE/kernel/task.c ****  *
2565:../MQXLITE/kernel/task.c ****  * \see _task_get_error_ptr
2566:../MQXLITE/kernel/task.c ****  * \see _task_set_error
2567:../MQXLITE/kernel/task.c ****  * \see _task_errno
2568:../MQXLITE/kernel/task.c ****  */
2569:../MQXLITE/kernel/task.c **** _mqx_uint _task_get_error(void)
2570:../MQXLITE/kernel/task.c **** { /* Body */
 2867              		.loc 1 2570 0
 2868              		.cfi_startproc
 2869 0000 90B5     		push	{r4, r7, lr}
 2870              	.LCFI86:
 2871              		.cfi_def_cfa_offset 12
 2872              		.cfi_offset 4, -12
 2873              		.cfi_offset 7, -8
 2874              		.cfi_offset 14, -4
 2875 0002 00AF     		add	r7, sp, #0
 2876              	.LCFI87:
 2877              		.cfi_def_cfa_register 7
2571:../MQXLITE/kernel/task.c ****     register KERNEL_DATA_STRUCT_PTR kernel_data;
2572:../MQXLITE/kernel/task.c **** 
2573:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 2878              		.loc 1 2573 0
 2879 0004 064B     		ldr	r3, .L174
 2880 0006 1C68     		ldr	r4, [r3]
2574:../MQXLITE/kernel/task.c **** 
2575:../MQXLITE/kernel/task.c ****     if (kernel_data->IN_ISR)
 2881              		.loc 1 2575 0
 2882 0008 238B     		ldrh	r3, [r4, #24]
 2883 000a 002B     		cmp	r3, #0
 2884 000c 02D0     		beq	.L172
2576:../MQXLITE/kernel/task.c ****     {
2577:../MQXLITE/kernel/task.c ****         return( kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE );
 2885              		.loc 1 2577 0
 2886 000e 636B     		ldr	r3, [r4, #52]
 2887 0010 DB68     		ldr	r3, [r3, #12]
 2888 0012 01E0     		b	.L173
 2889              	.L172:
2578:../MQXLITE/kernel/task.c ****     }
2579:../MQXLITE/kernel/task.c ****     else
2580:../MQXLITE/kernel/task.c ****     {
2581:../MQXLITE/kernel/task.c ****         return( kernel_data->ACTIVE_PTR->TASK_ERROR_CODE );
 2890              		.loc 1 2581 0
 2891 0014 E369     		ldr	r3, [r4, #28]
 2892 0016 DB6C     		ldr	r3, [r3, #76]
 2893              	.L173:
2582:../MQXLITE/kernel/task.c ****     } /* Endif */
2583:../MQXLITE/kernel/task.c **** } /* Endbody */
 2894              		.loc 1 2583 0
 2895 0018 181C     		mov	r0, r3
 2896 001a BD46     		mov	sp, r7
 2897              		@ sp needed for prologue
 2898 001c 90BD     		pop	{r4, r7, pc}
 2899              	.L175:
 2900 001e C046     		.align	2
 2901              	.L174:
 2902 0020 00000000 		.word	_mqx_kernel_data
 2903              		.cfi_endproc
 2904              	.LFE29:
 2906              		.section	.text._task_get_error_ptr,"ax",%progbits
 2907              		.align	2
 2908              		.global	_task_get_error_ptr
 2909              		.code	16
 2910              		.thumb_func
 2912              	_task_get_error_ptr:
 2913              	.LFB30:
2584:../MQXLITE/kernel/task.c **** 
2585:../MQXLITE/kernel/task.c **** /*!
2586:../MQXLITE/kernel/task.c ****  * \brief Gets a pointer to the task error code.
2587:../MQXLITE/kernel/task.c ****  *
2588:../MQXLITE/kernel/task.c ****  * \return Pointer to the task error code.
2589:../MQXLITE/kernel/task.c ****  *
2590:../MQXLITE/kernel/task.c ****  * \warning If a task writes to the pointer that _task_get_error_ptr() returns,
2591:../MQXLITE/kernel/task.c ****  * the task error code is changed to the value, overwriting any previous error code. To
2592:../MQXLITE/kernel/task.c ****  * avoid overwriting a previous error code, a task should use _task_set_error().
2593:../MQXLITE/kernel/task.c ****  *
2594:../MQXLITE/kernel/task.c ****  * \see _task_get_error
2595:../MQXLITE/kernel/task.c ****  * \see _task_set_error
2596:../MQXLITE/kernel/task.c ****  * \see _task_errno
2597:../MQXLITE/kernel/task.c ****  */
2598:../MQXLITE/kernel/task.c **** _mqx_uint _PTR_ _task_get_error_ptr(void)
2599:../MQXLITE/kernel/task.c **** { /* Body */
 2914              		.loc 1 2599 0
 2915              		.cfi_startproc
 2916 0000 90B5     		push	{r4, r7, lr}
 2917              	.LCFI88:
 2918              		.cfi_def_cfa_offset 12
 2919              		.cfi_offset 4, -12
 2920              		.cfi_offset 7, -8
 2921              		.cfi_offset 14, -4
 2922 0002 00AF     		add	r7, sp, #0
 2923              	.LCFI89:
 2924              		.cfi_def_cfa_register 7
2600:../MQXLITE/kernel/task.c ****     register KERNEL_DATA_STRUCT_PTR kernel_data;
2601:../MQXLITE/kernel/task.c **** 
2602:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 2925              		.loc 1 2602 0
 2926 0004 064B     		ldr	r3, .L179
 2927 0006 1C68     		ldr	r4, [r3]
2603:../MQXLITE/kernel/task.c ****     if (kernel_data->IN_ISR)
 2928              		.loc 1 2603 0
 2929 0008 238B     		ldrh	r3, [r4, #24]
 2930 000a 002B     		cmp	r3, #0
 2931 000c 02D0     		beq	.L177
2604:../MQXLITE/kernel/task.c ****     {
2605:../MQXLITE/kernel/task.c ****         return( &kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE );
 2932              		.loc 1 2605 0
 2933 000e 636B     		ldr	r3, [r4, #52]
 2934 0010 0C33     		add	r3, r3, #12
 2935 0012 01E0     		b	.L178
 2936              	.L177:
2606:../MQXLITE/kernel/task.c ****     }
2607:../MQXLITE/kernel/task.c ****     else
2608:../MQXLITE/kernel/task.c ****     {
2609:../MQXLITE/kernel/task.c ****         return( &kernel_data->ACTIVE_PTR->TASK_ERROR_CODE );
 2937              		.loc 1 2609 0
 2938 0014 E369     		ldr	r3, [r4, #28]
 2939 0016 4C33     		add	r3, r3, #76
 2940              	.L178:
2610:../MQXLITE/kernel/task.c ****     } /* Endif */
2611:../MQXLITE/kernel/task.c **** } /* Endbody */
 2941              		.loc 1 2611 0
 2942 0018 181C     		mov	r0, r3
 2943 001a BD46     		mov	sp, r7
 2944              		@ sp needed for prologue
 2945 001c 90BD     		pop	{r4, r7, pc}
 2946              	.L180:
 2947 001e C046     		.align	2
 2948              	.L179:
 2949 0020 00000000 		.word	_mqx_kernel_data
 2950              		.cfi_endproc
 2951              	.LFE30:
 2953              		.section	.text._task_get_id,"ax",%progbits
 2954              		.align	2
 2955              		.global	_task_get_id
 2956              		.code	16
 2957              		.thumb_func
 2959              	_task_get_id:
 2960              	.LFB31:
2612:../MQXLITE/kernel/task.c **** #endif /* MQX_TD_HAS_ERROR_CODE */
2613:../MQXLITE/kernel/task.c **** 
2614:../MQXLITE/kernel/task.c **** /*!
2615:../MQXLITE/kernel/task.c ****  * \brief Gets the task ID of the active task.
2616:../MQXLITE/kernel/task.c ****  *
2617:../MQXLITE/kernel/task.c ****  * \return Task ID of the active task.
2618:../MQXLITE/kernel/task.c ****  *
2619:../MQXLITE/kernel/task.c ****  * \see _task_get_creator
2620:../MQXLITE/kernel/task.c ****  * \see _task_get_processor
2621:../MQXLITE/kernel/task.c ****  * \see _task_get_id_from_name
2622:../MQXLITE/kernel/task.c ****  */
2623:../MQXLITE/kernel/task.c **** _task_id _task_get_id(void)
2624:../MQXLITE/kernel/task.c **** { /* Body */
 2961              		.loc 1 2624 0
 2962              		.cfi_startproc
 2963 0000 90B5     		push	{r4, r7, lr}
 2964              	.LCFI90:
 2965              		.cfi_def_cfa_offset 12
 2966              		.cfi_offset 4, -12
 2967              		.cfi_offset 7, -8
 2968              		.cfi_offset 14, -4
 2969 0002 00AF     		add	r7, sp, #0
 2970              	.LCFI91:
 2971              		.cfi_def_cfa_register 7
2625:../MQXLITE/kernel/task.c ****     register KERNEL_DATA_STRUCT_PTR kernel_data;
2626:../MQXLITE/kernel/task.c **** 
2627:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 2972              		.loc 1 2627 0
 2973 0004 034B     		ldr	r3, .L183
 2974 0006 1C68     		ldr	r4, [r3]
2628:../MQXLITE/kernel/task.c ****     return( kernel_data->ACTIVE_PTR->TASK_ID );
 2975              		.loc 1 2628 0
 2976 0008 E369     		ldr	r3, [r4, #28]
 2977 000a DB68     		ldr	r3, [r3, #12]
2629:../MQXLITE/kernel/task.c **** } /* Endbody */
 2978              		.loc 1 2629 0
 2979 000c 181C     		mov	r0, r3
 2980 000e BD46     		mov	sp, r7
 2981              		@ sp needed for prologue
 2982 0010 90BD     		pop	{r4, r7, pc}
 2983              	.L184:
 2984 0012 C046     		.align	2
 2985              	.L183:
 2986 0014 00000000 		.word	_mqx_kernel_data
 2987              		.cfi_endproc
 2988              	.LFE31:
 2990              		.section	.text._task_get_td,"ax",%progbits
 2991              		.align	2
 2992              		.global	_task_get_td
 2993              		.code	16
 2994              		.thumb_func
 2996              	_task_get_td:
 2997              	.LFB32:
2630:../MQXLITE/kernel/task.c **** 
2631:../MQXLITE/kernel/task.c **** /*!
2632:../MQXLITE/kernel/task.c ****  * \brief Gets a pointer to the task descriptor for the task ID.
2633:../MQXLITE/kernel/task.c ****  *
2634:../MQXLITE/kernel/task.c ****  * \param[in] task_id One of:
2635:../MQXLITE/kernel/task.c ****  * \n - Task ID for a task on this processor.
2636:../MQXLITE/kernel/task.c ****  * \n - MQX_NULL_TASK_ID (Use the current task.)
2637:../MQXLITE/kernel/task.c ****  *
2638:../MQXLITE/kernel/task.c ****  * \return Pointer to the task descriptor for task_id.
2639:../MQXLITE/kernel/task.c ****  * \return NULL (Task_id is not valid for this processor.)
2640:../MQXLITE/kernel/task.c ****  *
2641:../MQXLITE/kernel/task.c ****  * \see _task_ready
2642:../MQXLITE/kernel/task.c ****  */
2643:../MQXLITE/kernel/task.c **** pointer _task_get_td
2644:../MQXLITE/kernel/task.c **** (
2645:../MQXLITE/kernel/task.c ****     _task_id task_id
2646:../MQXLITE/kernel/task.c **** )
2647:../MQXLITE/kernel/task.c **** {
 2998              		.loc 1 2647 0
 2999              		.cfi_startproc
 3000 0000 80B5     		push	{r7, lr}
 3001              	.LCFI92:
 3002              		.cfi_def_cfa_offset 8
 3003              		.cfi_offset 7, -8
 3004              		.cfi_offset 14, -4
 3005 0002 86B0     		sub	sp, sp, #24
 3006              	.LCFI93:
 3007              		.cfi_def_cfa_offset 32
 3008 0004 00AF     		add	r7, sp, #0
 3009              	.LCFI94:
 3010              		.cfi_def_cfa_register 7
 3011 0006 7860     		str	r0, [r7, #4]
2648:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR  kernel_data;
2649:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR           td_ptr;
2650:../MQXLITE/kernel/task.c ****     _mqx_uint               size;
2651:../MQXLITE/kernel/task.c **** 
2652:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE && MQX_ENABLE_USER_STDAPI
2653:../MQXLITE/kernel/task.c ****     if (MQX_RUN_IN_USER_MODE)
2654:../MQXLITE/kernel/task.c ****     {
2655:../MQXLITE/kernel/task.c ****         return _usr_task_get_td(task_id);
2656:../MQXLITE/kernel/task.c ****     }
2657:../MQXLITE/kernel/task.c **** #endif
2658:../MQXLITE/kernel/task.c **** 
2659:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 3012              		.loc 1 2659 0
 3013 0008 2A4B     		ldr	r3, .L195
 3014 000a 1B68     		ldr	r3, [r3]
 3015 000c FB60     		str	r3, [r7, #12]
2660:../MQXLITE/kernel/task.c ****     if (task_id == MQX_NULL_TASK_ID)
 3016              		.loc 1 2660 0
 3017 000e 7B68     		ldr	r3, [r7, #4]
 3018 0010 002B     		cmp	r3, #0
 3019 0012 02D1     		bne	.L186
2661:../MQXLITE/kernel/task.c ****     {
2662:../MQXLITE/kernel/task.c ****         return((pointer)kernel_data->ACTIVE_PTR);
 3020              		.loc 1 2662 0
 3021 0014 FB68     		ldr	r3, [r7, #12]
 3022 0016 DB69     		ldr	r3, [r3, #28]
 3023 0018 47E0     		b	.L187
 3024              	.L186:
2663:../MQXLITE/kernel/task.c ****     }
2664:../MQXLITE/kernel/task.c **** 
2665:../MQXLITE/kernel/task.c ****     /* check task_id for SYSTEM_TASK_ID */
2666:../MQXLITE/kernel/task.c ****     if (task_id == kernel_data->SYSTEM_TD.TASK_ID)
 3025              		.loc 1 2666 0
 3026 001a FB68     		ldr	r3, [r7, #12]
 3027 001c 5A6D     		ldr	r2, [r3, #84]
 3028 001e 7B68     		ldr	r3, [r7, #4]
 3029 0020 9A42     		cmp	r2, r3
 3030 0022 02D1     		bne	.L188
2667:../MQXLITE/kernel/task.c ****     {
2668:../MQXLITE/kernel/task.c ****         return((pointer)&(kernel_data->SYSTEM_TD));
 3031              		.loc 1 2668 0
 3032 0024 FB68     		ldr	r3, [r7, #12]
 3033 0026 4833     		add	r3, r3, #72
 3034 0028 3FE0     		b	.L187
 3035              	.L188:
2669:../MQXLITE/kernel/task.c ****     }
2670:../MQXLITE/kernel/task.c **** 
2671:../MQXLITE/kernel/task.c ****     /* SPR P171-0022-01 Use int disable, not a semaphore */
2672:../MQXLITE/kernel/task.c ****     _INT_DISABLE();
 3036              		.loc 1 2672 0
 3037 002a FB68     		ldr	r3, [r7, #12]
 3038 002c DB69     		ldr	r3, [r3, #28]
 3039 002e 9B6C     		ldr	r3, [r3, #72]
 3040 0030 002B     		cmp	r3, #0
 3041 0032 00D1     		bne	.L189
 3042              		.loc 1 2672 0 is_stmt 0
 3043              	@ 2672 "../MQXLITE/kernel/task.c" 1
 3044 0034 72B6     		cpsid i
 3045              	@ 0 "" 2
 3046              		.code	16
 3047              	.L189:
 3048              		.loc 1 2672 0
 3049 0036 FB68     		ldr	r3, [r7, #12]
 3050 0038 DB69     		ldr	r3, [r3, #28]
 3051 003a 9A6C     		ldr	r2, [r3, #72]
 3052 003c 0132     		add	r2, r2, #1
 3053 003e 9A64     		str	r2, [r3, #72]
2673:../MQXLITE/kernel/task.c ****     /* END SPR */
2674:../MQXLITE/kernel/task.c **** 
2675:../MQXLITE/kernel/task.c ****     td_ptr = (TD_STRUCT_PTR)((uchar_ptr)kernel_data->TD_LIST.NEXT - FIELD_OFFSET(TD_STRUCT,TD_LIST_
 3054              		.loc 1 2675 0 is_stmt 1
 3055 0040 FA68     		ldr	r2, [r7, #12]
 3056 0042 C823     		mov	r3, #200
 3057 0044 D358     		ldr	r3, [r2, r3]
 3058 0046 5C3B     		sub	r3, r3, #92
 3059 0048 7B61     		str	r3, [r7, #20]
2676:../MQXLITE/kernel/task.c **** 
2677:../MQXLITE/kernel/task.c ****     size   = _QUEUE_GET_SIZE(&kernel_data->TD_LIST);
 3060              		.loc 1 2677 0
 3061 004a FB68     		ldr	r3, [r7, #12]
 3062 004c C833     		add	r3, r3, #200
 3063 004e 1B89     		ldrh	r3, [r3, #8]
 3064 0050 3B61     		str	r3, [r7, #16]
2678:../MQXLITE/kernel/task.c ****     while (size--)
 3065              		.loc 1 2678 0
 3066 0052 1EE0     		b	.L190
 3067              	.L194:
2679:../MQXLITE/kernel/task.c ****     {
2680:../MQXLITE/kernel/task.c ****         /* END SPR */
2681:../MQXLITE/kernel/task.c ****         if (td_ptr->TASK_ID == task_id)
 3068              		.loc 1 2681 0
 3069 0054 7B69     		ldr	r3, [r7, #20]
 3070 0056 DA68     		ldr	r2, [r3, #12]
 3071 0058 7B68     		ldr	r3, [r7, #4]
 3072 005a 9A42     		cmp	r2, r3
 3073 005c 15D1     		bne	.L191
2682:../MQXLITE/kernel/task.c ****         {
2683:../MQXLITE/kernel/task.c ****             /* SPR P171-0022-01 Use int disable, not a semaphore */
2684:../MQXLITE/kernel/task.c ****             _INT_ENABLE();
 3074              		.loc 1 2684 0
 3075 005e FB68     		ldr	r3, [r7, #12]
 3076 0060 DB69     		ldr	r3, [r3, #28]
 3077 0062 9B6C     		ldr	r3, [r3, #72]
 3078 0064 002B     		cmp	r3, #0
 3079 0066 0ED0     		beq	.L192
 3080              		.loc 1 2684 0 is_stmt 0
 3081 0068 FB68     		ldr	r3, [r7, #12]
 3082 006a DB69     		ldr	r3, [r3, #28]
 3083 006c 9A6C     		ldr	r2, [r3, #72]
 3084 006e 013A     		sub	r2, r2, #1
 3085 0070 9A64     		str	r2, [r3, #72]
 3086 0072 9B6C     		ldr	r3, [r3, #72]
 3087 0074 002B     		cmp	r3, #0
 3088 0076 06D1     		bne	.L192
 3089              		.loc 1 2684 0
 3090 0078 FB68     		ldr	r3, [r7, #12]
 3091 007a 1B8B     		ldrh	r3, [r3, #24]
 3092 007c 002B     		cmp	r3, #0
 3093 007e 01D0     		beq	.L193
 3094              		.loc 1 2684 0
 3095              	@ 2684 "../MQXLITE/kernel/task.c" 1
 3096 0080 62B6     		cpsie i
 3097              	@ 0 "" 2
 3098              		.code	16
 3099 0082 00E0     		b	.L192
 3100              	.L193:
 3101              		.loc 1 2684 0
 3102              	@ 2684 "../MQXLITE/kernel/task.c" 1
 3103 0084 62B6     		cpsie i
 3104              	@ 0 "" 2
 3105              		.code	16
 3106              	.L192:
2685:../MQXLITE/kernel/task.c ****             /* END SPR */
2686:../MQXLITE/kernel/task.c ****             return (pointer)td_ptr;
 3107              		.loc 1 2686 0 is_stmt 1
 3108 0086 7B69     		ldr	r3, [r7, #20]
 3109 0088 0FE0     		b	.L187
 3110              	.L191:
2687:../MQXLITE/kernel/task.c ****         } /* Endif */
2688:../MQXLITE/kernel/task.c ****         td_ptr = (TD_STRUCT_PTR)((uchar_ptr)td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(TD_STRUCT,TD_L
 3111              		.loc 1 2688 0
 3112 008a 7B69     		ldr	r3, [r7, #20]
 3113 008c DB6D     		ldr	r3, [r3, #92]
 3114 008e 5C3B     		sub	r3, r3, #92
 3115 0090 7B61     		str	r3, [r7, #20]
 3116              	.L190:
2678:../MQXLITE/kernel/task.c ****     while (size--)
 3117              		.loc 1 2678 0
 3118 0092 3B69     		ldr	r3, [r7, #16]
 3119 0094 5A1E     		sub	r2, r3, #1
 3120 0096 9341     		sbc	r3, r3, r2
 3121 0098 DBB2     		uxtb	r3, r3
 3122 009a 3A69     		ldr	r2, [r7, #16]
 3123 009c 013A     		sub	r2, r2, #1
 3124 009e 3A61     		str	r2, [r7, #16]
 3125 00a0 002B     		cmp	r3, #0
 3126 00a2 D7D1     		bne	.L194
2689:../MQXLITE/kernel/task.c ****     } /* Endwhile */
2690:../MQXLITE/kernel/task.c **** 
2691:../MQXLITE/kernel/task.c ****     /* SPR P171-0022-01 Use int disable, not a semaphore */
2692:../MQXLITE/kernel/task.c ****     _int_enable();
 3127              		.loc 1 2692 0
 3128 00a4 FFF7FEFF 		bl	_int_enable
2693:../MQXLITE/kernel/task.c ****     /* END SPR */
2694:../MQXLITE/kernel/task.c **** 
2695:../MQXLITE/kernel/task.c ****     return NULL;
 3129              		.loc 1 2695 0
 3130 00a8 0023     		mov	r3, #0
 3131              	.L187:
2696:../MQXLITE/kernel/task.c **** }
 3132              		.loc 1 2696 0
 3133 00aa 181C     		mov	r0, r3
 3134 00ac BD46     		mov	sp, r7
 3135 00ae 06B0     		add	sp, sp, #24
 3136              		@ sp needed for prologue
 3137 00b0 80BD     		pop	{r7, pc}
 3138              	.L196:
 3139 00b2 C046     		.align	2
 3140              	.L195:
 3141 00b4 00000000 		.word	_mqx_kernel_data
 3142              		.cfi_endproc
 3143              	.LFE32:
 3145              		.section	.text._task_set_error,"ax",%progbits
 3146              		.align	2
 3147              		.global	_task_set_error
 3148              		.code	16
 3149              		.thumb_func
 3151              	_task_set_error:
 3152              	.LFB33:
2697:../MQXLITE/kernel/task.c **** 
2698:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
2699:../MQXLITE/kernel/task.c **** 
2700:../MQXLITE/kernel/task.c **** /*!
2701:../MQXLITE/kernel/task.c ****  * \brief Gets a pointer to the task descriptor for the task ID.
2702:../MQXLITE/kernel/task.c ****  *
2703:../MQXLITE/kernel/task.c ****  * This function is an equivalent to the _task_get_td() API call but it can be
2704:../MQXLITE/kernel/task.c ****  * executed from within the User task or other code running in the CPU User mode.
2705:../MQXLITE/kernel/task.c ****  * Parameters passed to this function by pointer are required to meet the memory
2706:../MQXLITE/kernel/task.c ****  * protection requirements as described in the parameter list below.
2707:../MQXLITE/kernel/task.c ****  *
2708:../MQXLITE/kernel/task.c ****  * \param[in] task_id One of:
2709:../MQXLITE/kernel/task.c ****  * \n - Task ID for a task on this processor.
2710:../MQXLITE/kernel/task.c ****  * \n - MQX_NULL_TASK_ID (Use the current task.)
2711:../MQXLITE/kernel/task.c ****  *
2712:../MQXLITE/kernel/task.c ****  * \return Pointer to the task descriptor for task_id.
2713:../MQXLITE/kernel/task.c ****  * \return NULL (Task_id is not valid for this processor.)
2714:../MQXLITE/kernel/task.c ****  *
2715:../MQXLITE/kernel/task.c ****  * \see _task_get_td
2716:../MQXLITE/kernel/task.c ****  * \see _usr_task_ready
2717:../MQXLITE/kernel/task.c ****  */
2718:../MQXLITE/kernel/task.c **** pointer _usr_task_get_td
2719:../MQXLITE/kernel/task.c **** (
2720:../MQXLITE/kernel/task.c ****     _task_id task_id
2721:../MQXLITE/kernel/task.c **** )
2722:../MQXLITE/kernel/task.c **** {
2723:../MQXLITE/kernel/task.c ****     MQX_API_CALL_PARAMS params = {(uint_32)task_id, 0, 0, 0, 0};
2724:../MQXLITE/kernel/task.c ****     return (pointer)_mqx_api_call(MQX_API_TASK_GET_TD, &params);
2725:../MQXLITE/kernel/task.c **** }
2726:../MQXLITE/kernel/task.c **** 
2727:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
2728:../MQXLITE/kernel/task.c **** /*!
2729:../MQXLITE/kernel/task.c ****  * \brief Sets the task error code.
2730:../MQXLITE/kernel/task.c ****  *
2731:../MQXLITE/kernel/task.c ****  * MQX uses this function to indicate an error. MQX never sets the task error code
2732:../MQXLITE/kernel/task.c ****  * to MQX_OK; that is, MQX does not reset the task error code. It is the responsibility
2733:../MQXLITE/kernel/task.c ****  * of the application to reset the task error code. As a result, when an application
2734:../MQXLITE/kernel/task.c ****  * calls _task_get_error(), it gets the first error that MQX detected since the
2735:../MQXLITE/kernel/task.c ****  * last time the application reset the task error code.
2736:../MQXLITE/kernel/task.c ****  *
2737:../MQXLITE/kernel/task.c ****  * <table>
2738:../MQXLITE/kernel/task.c ****  *  <tr>
2739:../MQXLITE/kernel/task.c ****  *      <td><b> If the current task error code is: </b></td>
2740:../MQXLITE/kernel/task.c ****  *      <td><b> Function changes the task error code: </b></td>
2741:../MQXLITE/kernel/task.c ****  *  </tr>
2742:../MQXLITE/kernel/task.c ****  *  <tr>
2743:../MQXLITE/kernel/task.c ****  *      <td> MQX_OK </td>
2744:../MQXLITE/kernel/task.c ****  *      <td> To new_error_code. </td>
2745:../MQXLITE/kernel/task.c ****  *  </tr>
2746:../MQXLITE/kernel/task.c ****  *  <tr>
2747:../MQXLITE/kernel/task.c ****  *      <td> Not MQX_OK </td>
2748:../MQXLITE/kernel/task.c ****  *      <td> To new_error_code if new_error_code is MQX_OK. </td>
2749:../MQXLITE/kernel/task.c ****  *  </tr>
2750:../MQXLITE/kernel/task.c ****  * </table>
2751:../MQXLITE/kernel/task.c ****  *
2752:../MQXLITE/kernel/task.c ****  * \n If this function is called from an ISR, the function sets the interrupt error code.
2753:../MQXLITE/kernel/task.c ****  *
2754:../MQXLITE/kernel/task.c ****  * \param[in] new_error_code New task error code.
2755:../MQXLITE/kernel/task.c ****  *
2756:../MQXLITE/kernel/task.c ****  * \return Previous task error code.
2757:../MQXLITE/kernel/task.c ****  *
2758:../MQXLITE/kernel/task.c ****  * \see _task_check_stack
2759:../MQXLITE/kernel/task.c ****  * \see _task_get_error
2760:../MQXLITE/kernel/task.c ****  * \see _task_get_error_ptr
2761:../MQXLITE/kernel/task.c ****  * \see _task_errno
2762:../MQXLITE/kernel/task.c ****  */
2763:../MQXLITE/kernel/task.c **** _mqx_uint _task_set_error
2764:../MQXLITE/kernel/task.c **** (
2765:../MQXLITE/kernel/task.c ****     _mqx_uint new_error_code
2766:../MQXLITE/kernel/task.c **** )
2767:../MQXLITE/kernel/task.c **** { /* Body */
 3153              		.loc 1 2767 0
 3154              		.cfi_startproc
 3155 0000 B0B5     		push	{r4, r5, r7, lr}
 3156              	.LCFI95:
 3157              		.cfi_def_cfa_offset 16
 3158              		.cfi_offset 4, -16
 3159              		.cfi_offset 5, -12
 3160              		.cfi_offset 7, -8
 3161              		.cfi_offset 14, -4
 3162 0002 82B0     		sub	sp, sp, #8
 3163              	.LCFI96:
 3164              		.cfi_def_cfa_offset 24
 3165 0004 00AF     		add	r7, sp, #0
 3166              	.LCFI97:
 3167              		.cfi_def_cfa_register 7
 3168 0006 7860     		str	r0, [r7, #4]
2768:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_ERROR_CODE
2769:../MQXLITE/kernel/task.c ****     register KERNEL_DATA_STRUCT_PTR  kernel_data;
2770:../MQXLITE/kernel/task.c ****     register _mqx_uint               old_error_code;
2771:../MQXLITE/kernel/task.c **** 
2772:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 3169              		.loc 1 2772 0
 3170 0008 0E4B     		ldr	r3, .L204
 3171 000a 1C68     		ldr	r4, [r3]
2773:../MQXLITE/kernel/task.c **** 
2774:../MQXLITE/kernel/task.c ****     _KLOGE2(KLOG_task_set_error, new_error_code);
2775:../MQXLITE/kernel/task.c **** 
2776:../MQXLITE/kernel/task.c ****     /* get the old value */
2777:../MQXLITE/kernel/task.c ****     if (kernel_data->IN_ISR)
 3172              		.loc 1 2777 0
 3173 000c 238B     		ldrh	r3, [r4, #24]
 3174 000e 002B     		cmp	r3, #0
 3175 0010 02D0     		beq	.L198
2778:../MQXLITE/kernel/task.c ****     {
2779:../MQXLITE/kernel/task.c ****         old_error_code = kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE;
 3176              		.loc 1 2779 0
 3177 0012 636B     		ldr	r3, [r4, #52]
 3178 0014 DD68     		ldr	r5, [r3, #12]
 3179 0016 01E0     		b	.L199
 3180              	.L198:
2780:../MQXLITE/kernel/task.c ****     }
2781:../MQXLITE/kernel/task.c ****     else
2782:../MQXLITE/kernel/task.c ****     {
2783:../MQXLITE/kernel/task.c ****         old_error_code = kernel_data->ACTIVE_PTR->TASK_ERROR_CODE;
 3181              		.loc 1 2783 0
 3182 0018 E369     		ldr	r3, [r4, #28]
 3183 001a DD6C     		ldr	r5, [r3, #76]
 3184              	.L199:
2784:../MQXLITE/kernel/task.c ****     } /* Endif */
2785:../MQXLITE/kernel/task.c **** 
2786:../MQXLITE/kernel/task.c ****     if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
 3185              		.loc 1 2786 0
 3186 001c 7B68     		ldr	r3, [r7, #4]
 3187 001e 002B     		cmp	r3, #0
 3188 0020 01D0     		beq	.L200
 3189              		.loc 1 2786 0 is_stmt 0
 3190 0022 002D     		cmp	r5, #0
 3191 0024 09D1     		bne	.L201
 3192              	.L200:
2787:../MQXLITE/kernel/task.c ****     {
2788:../MQXLITE/kernel/task.c ****         if (kernel_data->IN_ISR)
 3193              		.loc 1 2788 0 is_stmt 1
 3194 0026 238B     		ldrh	r3, [r4, #24]
 3195 0028 002B     		cmp	r3, #0
 3196 002a 03D0     		beq	.L202
2789:../MQXLITE/kernel/task.c ****         {
2790:../MQXLITE/kernel/task.c ****             kernel_data->INTERRUPT_CONTEXT_PTR->ERROR_CODE = new_error_code;
 3197              		.loc 1 2790 0
 3198 002c 636B     		ldr	r3, [r4, #52]
 3199 002e 7A68     		ldr	r2, [r7, #4]
 3200 0030 DA60     		str	r2, [r3, #12]
 3201 0032 02E0     		b	.L201
 3202              	.L202:
2791:../MQXLITE/kernel/task.c ****         }
2792:../MQXLITE/kernel/task.c ****         else
2793:../MQXLITE/kernel/task.c ****         {
2794:../MQXLITE/kernel/task.c ****             kernel_data->ACTIVE_PTR->TASK_ERROR_CODE = new_error_code;
 3203              		.loc 1 2794 0
 3204 0034 E369     		ldr	r3, [r4, #28]
 3205 0036 7A68     		ldr	r2, [r7, #4]
 3206 0038 DA64     		str	r2, [r3, #76]
 3207              	.L201:
2795:../MQXLITE/kernel/task.c ****         } /* Endif */
2796:../MQXLITE/kernel/task.c ****     } /* Endif */
2797:../MQXLITE/kernel/task.c **** 
2798:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_set_error, old_error_code);
2799:../MQXLITE/kernel/task.c ****     return( old_error_code );
 3208              		.loc 1 2799 0
 3209 003a 2B1C     		mov	r3, r5
2800:../MQXLITE/kernel/task.c **** #else
2801:../MQXLITE/kernel/task.c ****     return MQX_OK;
2802:../MQXLITE/kernel/task.c **** #endif
2803:../MQXLITE/kernel/task.c **** 
2804:../MQXLITE/kernel/task.c **** }
 3210              		.loc 1 2804 0
 3211 003c 181C     		mov	r0, r3
 3212 003e BD46     		mov	sp, r7
 3213 0040 02B0     		add	sp, sp, #8
 3214              		@ sp needed for prologue
 3215 0042 B0BD     		pop	{r4, r5, r7, pc}
 3216              	.L205:
 3217              		.align	2
 3218              	.L204:
 3219 0044 00000000 		.word	_mqx_kernel_data
 3220              		.cfi_endproc
 3221              	.LFE33:
 3223              		.section	.text._task_build_internal,"ax",%progbits
 3224              		.align	2
 3225              		.global	_task_build_internal
 3226              		.code	16
 3227              		.thumb_func
 3229              	_task_build_internal:
 3230              	.LFB34:
2805:../MQXLITE/kernel/task.c **** 
2806:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
2807:../MQXLITE/kernel/task.c **** 
2808:../MQXLITE/kernel/task.c **** /*!
2809:../MQXLITE/kernel/task.c ****  * \brief Sets the task error code.
2810:../MQXLITE/kernel/task.c ****  *
2811:../MQXLITE/kernel/task.c ****  * This function is an equivalent to the _task_set_error() API call but it can be
2812:../MQXLITE/kernel/task.c ****  * executed from within the User task or other code running in the CPU User mode.
2813:../MQXLITE/kernel/task.c ****  * Parameters passed to this function by pointer are required to meet the memory
2814:../MQXLITE/kernel/task.c ****  * protection requirements as described in the parameter list below.
2815:../MQXLITE/kernel/task.c ****  *
2816:../MQXLITE/kernel/task.c ****  * \param[in] new_error_code New task error code.
2817:../MQXLITE/kernel/task.c ****  *
2818:../MQXLITE/kernel/task.c ****  * \return Previous task error code.
2819:../MQXLITE/kernel/task.c ****  *
2820:../MQXLITE/kernel/task.c ****  * \see _task_set_error
2821:../MQXLITE/kernel/task.c ****  */
2822:../MQXLITE/kernel/task.c **** _task_id _usr_task_set_error
2823:../MQXLITE/kernel/task.c **** (
2824:../MQXLITE/kernel/task.c ****     _mqx_uint new_error_code
2825:../MQXLITE/kernel/task.c **** )
2826:../MQXLITE/kernel/task.c **** {
2827:../MQXLITE/kernel/task.c ****     MQX_API_CALL_PARAMS params = {(uint_32)new_error_code, 0, 0, 0, 0};
2828:../MQXLITE/kernel/task.c ****     return _mqx_api_call(MQX_API_TASK_SET_ERROR, &params);
2829:../MQXLITE/kernel/task.c **** }
2830:../MQXLITE/kernel/task.c **** 
2831:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
2832:../MQXLITE/kernel/task.c **** /*!
2833:../MQXLITE/kernel/task.c ****  * \private
2834:../MQXLITE/kernel/task.c ****  *
2835:../MQXLITE/kernel/task.c ****  * \brief Creates a new task of the type specified by the task template number,
2836:../MQXLITE/kernel/task.c ****  * but not make it ready to run.
2837:../MQXLITE/kernel/task.c ****  *
2838:../MQXLITE/kernel/task.c ****  * \param[in] template_index Task template index number for this task.
2839:../MQXLITE/kernel/task.c ****  * \param[in] parameter      The parameter to pass to the newly created task.
2840:../MQXLITE/kernel/task.c ****  * \param[in] stack_ptr      Pointer to the stack (if not NULL).
2841:../MQXLITE/kernel/task.c ****  * \param[in] stack_size     Stack size if provided by the application.
2842:../MQXLITE/kernel/task.c ****  * \param[in] user           User mode functionality.
2843:../MQXLITE/kernel/task.c ****  *
2844:../MQXLITE/kernel/task.c ****  * \return Pointer to the task descriptor for created task.
2845:../MQXLITE/kernel/task.c ****  * \return NULL
2846:../MQXLITE/kernel/task.c ****  *
2847:../MQXLITE/kernel/task.c ****  * \see TD_STRUCT
2848:../MQXLITE/kernel/task.c ****  */
2849:../MQXLITE/kernel/task.c **** TD_STRUCT_PTR _task_build_internal
2850:../MQXLITE/kernel/task.c **** (
2851:../MQXLITE/kernel/task.c ****     _mqx_uint     template_index,
2852:../MQXLITE/kernel/task.c ****     uint_32       parameter,
2853:../MQXLITE/kernel/task.c ****     pointer       stack_ptr,
2854:../MQXLITE/kernel/task.c ****     _mqx_uint     stack_size,
2855:../MQXLITE/kernel/task.c ****     boolean       user
2856:../MQXLITE/kernel/task.c **** )
2857:../MQXLITE/kernel/task.c **** {
 3231              		.loc 1 2857 0
 3232              		.cfi_startproc
 3233 0000 90B5     		push	{r4, r7, lr}
 3234              	.LCFI98:
 3235              		.cfi_def_cfa_offset 12
 3236              		.cfi_offset 4, -12
 3237              		.cfi_offset 7, -8
 3238              		.cfi_offset 14, -4
 3239 0002 8DB0     		sub	sp, sp, #52
 3240              	.LCFI99:
 3241              		.cfi_def_cfa_offset 64
 3242 0004 02AF     		add	r7, sp, #8
 3243              	.LCFI100:
 3244              		.cfi_def_cfa 7, 56
 3245 0006 F860     		str	r0, [r7, #12]
 3246 0008 B960     		str	r1, [r7, #8]
 3247 000a 7A60     		str	r2, [r7, #4]
 3248 000c 3B60     		str	r3, [r7]
2858:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR   kernel_data;
2859:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR            td_ptr;
2860:../MQXLITE/kernel/task.c ****     TASK_TEMPLATE_STRUCT_PTR task_template_ptr;
2861:../MQXLITE/kernel/task.c ****     boolean                  dynamic;
2862:../MQXLITE/kernel/task.c ****     uint_32                  create_parameter;
2863:../MQXLITE/kernel/task.c **** 
2864:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 3249              		.loc 1 2864 0
 3250 000e 274B     		ldr	r3, .L214
 3251 0010 1B68     		ldr	r3, [r3]
 3252 0012 BB61     		str	r3, [r7, #24]
2865:../MQXLITE/kernel/task.c **** 
2866:../MQXLITE/kernel/task.c ****     if ( template_index )
 3253              		.loc 1 2866 0
 3254 0014 FB68     		ldr	r3, [r7, #12]
 3255 0016 002B     		cmp	r3, #0
 3256 0018 1CD0     		beq	.L207
2867:../MQXLITE/kernel/task.c ****     {
2868:../MQXLITE/kernel/task.c ****         dynamic = FALSE;
 3257              		.loc 1 2868 0
 3258 001a 0023     		mov	r3, #0
 3259 001c 3B62     		str	r3, [r7, #32]
2869:../MQXLITE/kernel/task.c ****         create_parameter = parameter;
 3260              		.loc 1 2869 0
 3261 001e BB68     		ldr	r3, [r7, #8]
 3262 0020 FB61     		str	r3, [r7, #28]
2870:../MQXLITE/kernel/task.c **** 
2871:../MQXLITE/kernel/task.c ****         /* Search all the local task templates for one whose index matches */
2872:../MQXLITE/kernel/task.c ****         task_template_ptr = kernel_data->INIT.TASK_TEMPLATE_LIST;
 3263              		.loc 1 2872 0
 3264 0022 BA69     		ldr	r2, [r7, #24]
 3265 0024 B823     		mov	r3, #184
 3266 0026 5B00     		lsl	r3, r3, #1
 3267 0028 D358     		ldr	r3, [r2, r3]
 3268 002a 7B62     		str	r3, [r7, #36]
2873:../MQXLITE/kernel/task.c **** 
2874:../MQXLITE/kernel/task.c ****         while ( task_template_ptr->TASK_TEMPLATE_INDEX &&
 3269              		.loc 1 2874 0
 3270 002c 02E0     		b	.L208
 3271              	.L210:
2875:../MQXLITE/kernel/task.c ****                         (task_template_ptr->TASK_TEMPLATE_INDEX != template_index) )
2876:../MQXLITE/kernel/task.c ****         {
2877:../MQXLITE/kernel/task.c ****             ++task_template_ptr;
 3272              		.loc 1 2877 0
 3273 002e 7B6A     		ldr	r3, [r7, #36]
 3274 0030 1C33     		add	r3, r3, #28
 3275 0032 7B62     		str	r3, [r7, #36]
 3276              	.L208:
2874:../MQXLITE/kernel/task.c ****         while ( task_template_ptr->TASK_TEMPLATE_INDEX &&
 3277              		.loc 1 2874 0
 3278 0034 7B6A     		ldr	r3, [r7, #36]
 3279 0036 1B68     		ldr	r3, [r3]
 3280 0038 002B     		cmp	r3, #0
 3281 003a 04D0     		beq	.L209
2875:../MQXLITE/kernel/task.c ****                         (task_template_ptr->TASK_TEMPLATE_INDEX != template_index) )
 3282              		.loc 1 2875 0
 3283 003c 7B6A     		ldr	r3, [r7, #36]
 3284 003e 1A68     		ldr	r2, [r3]
2874:../MQXLITE/kernel/task.c ****         while ( task_template_ptr->TASK_TEMPLATE_INDEX &&
 3285              		.loc 1 2874 0
 3286 0040 FB68     		ldr	r3, [r7, #12]
 3287 0042 9A42     		cmp	r2, r3
 3288 0044 F3D1     		bne	.L210
 3289              	.L209:
2878:../MQXLITE/kernel/task.c ****         } /* Endwhile */
2879:../MQXLITE/kernel/task.c ****         if (task_template_ptr->TASK_TEMPLATE_INDEX == 0)
 3290              		.loc 1 2879 0
 3291 0046 7B6A     		ldr	r3, [r7, #36]
 3292 0048 1B68     		ldr	r3, [r3]
 3293 004a 002B     		cmp	r3, #0
 3294 004c 09D1     		bne	.L211
2880:../MQXLITE/kernel/task.c ****         {
2881:../MQXLITE/kernel/task.c ****             /* Task not found */
2882:../MQXLITE/kernel/task.c ****             task_template_ptr = NULL;
 3295              		.loc 1 2882 0
 3296 004e 0023     		mov	r3, #0
 3297 0050 7B62     		str	r3, [r7, #36]
 3298 0052 06E0     		b	.L211
 3299              	.L207:
2883:../MQXLITE/kernel/task.c ****         } /* Endif */
2884:../MQXLITE/kernel/task.c ****     }
2885:../MQXLITE/kernel/task.c ****     else
2886:../MQXLITE/kernel/task.c ****     {
2887:../MQXLITE/kernel/task.c ****         task_template_ptr = (TASK_TEMPLATE_STRUCT_PTR)parameter;
 3300              		.loc 1 2887 0
 3301 0054 BB68     		ldr	r3, [r7, #8]
 3302 0056 7B62     		str	r3, [r7, #36]
2888:../MQXLITE/kernel/task.c ****         create_parameter  = task_template_ptr->CREATION_PARAMETER;
 3303              		.loc 1 2888 0
 3304 0058 7B6A     		ldr	r3, [r7, #36]
 3305 005a 9B69     		ldr	r3, [r3, #24]
 3306 005c FB61     		str	r3, [r7, #28]
2889:../MQXLITE/kernel/task.c ****         dynamic = TRUE;
 3307              		.loc 1 2889 0
 3308 005e 0123     		mov	r3, #1
 3309 0060 3B62     		str	r3, [r7, #32]
 3310              	.L211:
2890:../MQXLITE/kernel/task.c ****     } /* Endif */
2891:../MQXLITE/kernel/task.c **** 
2892:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
2893:../MQXLITE/kernel/task.c ****     if (task_template_ptr == NULL)
 3311              		.loc 1 2893 0
 3312 0062 7B6A     		ldr	r3, [r7, #36]
 3313 0064 002B     		cmp	r3, #0
 3314 0066 04D1     		bne	.L212
2894:../MQXLITE/kernel/task.c ****     {
2895:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_NO_TASK_TEMPLATE);
 3315              		.loc 1 2895 0
 3316 0068 1020     		mov	r0, #16
 3317 006a FFF7FEFF 		bl	_task_set_error
2896:../MQXLITE/kernel/task.c ****         return NULL;
 3318              		.loc 1 2896 0
 3319 006e 0023     		mov	r3, #0
 3320 0070 18E0     		b	.L213
 3321              	.L212:
2897:../MQXLITE/kernel/task.c ****     } /* Endif */
2898:../MQXLITE/kernel/task.c **** #endif
2899:../MQXLITE/kernel/task.c **** 
2900:../MQXLITE/kernel/task.c **** 
2901:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
2902:../MQXLITE/kernel/task.c ****     /* check template for correct user task parameters */
2903:../MQXLITE/kernel/task.c ****     if (user)
2904:../MQXLITE/kernel/task.c ****     {
2905:../MQXLITE/kernel/task.c ****         if (!(task_template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK))
2906:../MQXLITE/kernel/task.c ****         {
2907:../MQXLITE/kernel/task.c ****             _task_set_error(MQX_INVALID_PARAMETER);
2908:../MQXLITE/kernel/task.c ****             return NULL;
2909:../MQXLITE/kernel/task.c ****         }
2910:../MQXLITE/kernel/task.c **** 
2911:../MQXLITE/kernel/task.c ****         if (kernel_data->INIT.MAX_USER_TASK_PRIORITY && kernel_data->INIT.MAX_USER_TASK_PRIORITY > 
2912:../MQXLITE/kernel/task.c ****         {
2913:../MQXLITE/kernel/task.c ****             _task_set_error(MQX_INVALID_TASK_PRIORITY);
2914:../MQXLITE/kernel/task.c ****             return NULL;
2915:../MQXLITE/kernel/task.c ****         }
2916:../MQXLITE/kernel/task.c ****     }
2917:../MQXLITE/kernel/task.c **** #endif
2918:../MQXLITE/kernel/task.c **** 
2919:../MQXLITE/kernel/task.c ****     /* serialize task creation/destruction */
2920:../MQXLITE/kernel/task.c ****     _lwsem_wait((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 3322              		.loc 1 2920 0
 3323 0072 BB69     		ldr	r3, [r7, #24]
 3324 0074 F433     		add	r3, r3, #244
 3325 0076 181C     		mov	r0, r3
 3326 0078 FFF7FEFF 		bl	_lwsem_wait
2921:../MQXLITE/kernel/task.c **** 
2922:../MQXLITE/kernel/task.c ****     /* Create the task, but do not ready it */
2923:../MQXLITE/kernel/task.c ****     td_ptr = _task_init_internal(task_template_ptr, kernel_data->ACTIVE_PTR->TASK_ID, \
 3327              		.loc 1 2923 0
 3328 007c BB69     		ldr	r3, [r7, #24]
 3329 007e DB69     		ldr	r3, [r3, #28]
 3330 0080 D968     		ldr	r1, [r3, #12]
 3331 0082 786A     		ldr	r0, [r7, #36]
 3332 0084 FA69     		ldr	r2, [r7, #28]
 3333 0086 3B6A     		ldr	r3, [r7, #32]
 3334 0088 7C68     		ldr	r4, [r7, #4]
 3335 008a 0094     		str	r4, [sp]
 3336 008c 3C68     		ldr	r4, [r7]
 3337 008e 0194     		str	r4, [sp, #4]
 3338 0090 FFF7FEFF 		bl	_task_init_internal
 3339 0094 031C     		mov	r3, r0
 3340 0096 7B61     		str	r3, [r7, #20]
2924:../MQXLITE/kernel/task.c ****                     create_parameter, dynamic, stack_ptr, stack_size);
2925:../MQXLITE/kernel/task.c **** 
2926:../MQXLITE/kernel/task.c ****     /* Allow other tasks to create */
2927:../MQXLITE/kernel/task.c ****     _lwsem_post((LWSEM_STRUCT_PTR)&kernel_data->TASK_CREATE_LWSEM);
 3341              		.loc 1 2927 0
 3342 0098 BB69     		ldr	r3, [r7, #24]
 3343 009a F433     		add	r3, r3, #244
 3344 009c 181C     		mov	r0, r3
 3345 009e FFF7FEFF 		bl	_lwsem_post
2928:../MQXLITE/kernel/task.c **** 
2929:../MQXLITE/kernel/task.c ****     return(td_ptr);
 3346              		.loc 1 2929 0
 3347 00a2 7B69     		ldr	r3, [r7, #20]
 3348              	.L213:
2930:../MQXLITE/kernel/task.c **** 
2931:../MQXLITE/kernel/task.c **** } /* Endbody */
 3349              		.loc 1 2931 0
 3350 00a4 181C     		mov	r0, r3
 3351 00a6 BD46     		mov	sp, r7
 3352 00a8 0BB0     		add	sp, sp, #44
 3353              		@ sp needed for prologue
 3354 00aa 90BD     		pop	{r4, r7, pc}
 3355              	.L215:
 3356              		.align	2
 3357              	.L214:
 3358 00ac 00000000 		.word	_mqx_kernel_data
 3359              		.cfi_endproc
 3360              	.LFE34:
 3362              		.section	.text._task_exiting_function_internal,"ax",%progbits
 3363              		.align	2
 3364              		.global	_task_exiting_function_internal
 3365              		.code	16
 3366              		.thumb_func
 3368              	_task_exiting_function_internal:
 3369              	.LFB35:
2932:../MQXLITE/kernel/task.c **** 
2933:../MQXLITE/kernel/task.c **** 
2934:../MQXLITE/kernel/task.c **** /*! \private */
2935:../MQXLITE/kernel/task.c **** extern void _task_exiting_function_internal(void);  /* Dummy prototype */
2936:../MQXLITE/kernel/task.c **** /*!
2937:../MQXLITE/kernel/task.c ****  * \private
2938:../MQXLITE/kernel/task.c ****  *
2939:../MQXLITE/kernel/task.c ****  * \brief Dummy function so debuggers will display stack correctly.
2940:../MQXLITE/kernel/task.c ****  */
2941:../MQXLITE/kernel/task.c **** void _task_exiting_function_internal(void){}
 3370              		.loc 1 2941 0
 3371              		.cfi_startproc
 3372 0000 80B5     		push	{r7, lr}
 3373              	.LCFI101:
 3374              		.cfi_def_cfa_offset 8
 3375              		.cfi_offset 7, -8
 3376              		.cfi_offset 14, -4
 3377 0002 00AF     		add	r7, sp, #0
 3378              	.LCFI102:
 3379              		.cfi_def_cfa_register 7
 3380              		.loc 1 2941 0
 3381 0004 BD46     		mov	sp, r7
 3382              		@ sp needed for prologue
 3383 0006 80BD     		pop	{r7, pc}
 3384              		.cfi_endproc
 3385              	.LFE35:
 3387              		.section	.text._task_exit_function_internal,"ax",%progbits
 3388              		.align	2
 3389              		.global	_task_exit_function_internal
 3390              		.code	16
 3391              		.thumb_func
 3393              	_task_exit_function_internal:
 3394              	.LFB36:
2942:../MQXLITE/kernel/task.c **** 
2943:../MQXLITE/kernel/task.c **** /*!
2944:../MQXLITE/kernel/task.c ****  * \private
2945:../MQXLITE/kernel/task.c ****  *
2946:../MQXLITE/kernel/task.c ****  * \brief Executes the exit handler for the current task, then destroys the current task.
2947:../MQXLITE/kernel/task.c ****  */
2948:../MQXLITE/kernel/task.c **** void _task_exit_function_internal(void)
2949:../MQXLITE/kernel/task.c **** {
 3395              		.loc 1 2949 0
 3396              		.cfi_startproc
 3397 0000 80B5     		push	{r7, lr}
 3398              	.LCFI103:
 3399              		.cfi_def_cfa_offset 8
 3400              		.cfi_offset 7, -8
 3401              		.cfi_offset 14, -4
 3402 0002 82B0     		sub	sp, sp, #8
 3403              	.LCFI104:
 3404              		.cfi_def_cfa_offset 16
 3405 0004 00AF     		add	r7, sp, #0
 3406              	.LCFI105:
 3407              		.cfi_def_cfa_register 7
2950:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR kernel_data;
2951:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR          td_ptr;
2952:../MQXLITE/kernel/task.c **** 
2953:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 3408              		.loc 1 2953 0
 3409 0006 094B     		ldr	r3, .L219
 3410 0008 1B68     		ldr	r3, [r3]
 3411 000a 7B60     		str	r3, [r7, #4]
2954:../MQXLITE/kernel/task.c ****     _KLOGE2(KLOG_task_exit_function, kernel_data->ACTIVE_PTR->TASK_ID);
2955:../MQXLITE/kernel/task.c **** 
2956:../MQXLITE/kernel/task.c ****     td_ptr = kernel_data->ACTIVE_PTR;
 3412              		.loc 1 2956 0
 3413 000c 7B68     		ldr	r3, [r7, #4]
 3414 000e DB69     		ldr	r3, [r3, #28]
 3415 0010 3B60     		str	r3, [r7]
2957:../MQXLITE/kernel/task.c **** #if MQX_TASK_DESTRUCTION
2958:../MQXLITE/kernel/task.c **** 
2959:../MQXLITE/kernel/task.c **** #if MQX_HAS_EXIT_HANDLER
2960:../MQXLITE/kernel/task.c ****     if (td_ptr->EXIT_HANDLER_PTR != NULL)
 3416              		.loc 1 2960 0
 3417 0012 3B68     		ldr	r3, [r7]
 3418 0014 5B6E     		ldr	r3, [r3, #100]
 3419 0016 002B     		cmp	r3, #0
 3420 0018 02D0     		beq	.L218
2961:../MQXLITE/kernel/task.c ****     {
2962:../MQXLITE/kernel/task.c ****         (*td_ptr->EXIT_HANDLER_PTR)();
 3421              		.loc 1 2962 0
 3422 001a 3B68     		ldr	r3, [r7]
 3423 001c 5B6E     		ldr	r3, [r3, #100]
 3424 001e 9847     		blx	r3
 3425              	.L218:
2963:../MQXLITE/kernel/task.c ****     }
2964:../MQXLITE/kernel/task.c **** #endif
2965:../MQXLITE/kernel/task.c ****     (void)_task_destroy(MQX_NULL_TASK_ID); /* Never returns */
 3426              		.loc 1 2965 0
 3427 0020 0020     		mov	r0, #0
 3428 0022 FFF7FEFF 		bl	_task_destroy
2966:../MQXLITE/kernel/task.c **** #else
2967:../MQXLITE/kernel/task.c ****     td_ptr->STATE = DYING;
2968:../MQXLITE/kernel/task.c ****     while(TRUE)
2969:../MQXLITE/kernel/task.c ****     {
2970:../MQXLITE/kernel/task.c ****         _task_block();
2971:../MQXLITE/kernel/task.c ****     }
2972:../MQXLITE/kernel/task.c **** #endif /* MQX_TASK_DESTRUCTION */
2973:../MQXLITE/kernel/task.c **** }
 3429              		.loc 1 2973 0
 3430 0026 BD46     		mov	sp, r7
 3431 0028 02B0     		add	sp, sp, #8
 3432              		@ sp needed for prologue
 3433 002a 80BD     		pop	{r7, pc}
 3434              	.L220:
 3435              		.align	2
 3436              	.L219:
 3437 002c 00000000 		.word	_mqx_kernel_data
 3438              		.cfi_endproc
 3439              	.LFE36:
 3441              		.section	.text._task_init_internal,"ax",%progbits
 3442              		.align	2
 3443              		.global	_task_init_internal
 3444              		.code	16
 3445              		.thumb_func
 3447              	_task_init_internal:
 3448              	.LFB37:
2974:../MQXLITE/kernel/task.c **** 
2975:../MQXLITE/kernel/task.c **** #if MQX_EXTRA_TASK_STACK_ENABLE
2976:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
2977:../MQXLITE/kernel/task.c **** /*!
2978:../MQXLITE/kernel/task.c ****  * \brief Gets the base address of the space reserved for the active task.
2979:../MQXLITE/kernel/task.c ****  *
2980:../MQXLITE/kernel/task.c ****  * \return TD_STRUCT.TOS_RESERVED
2981:../MQXLITE/kernel/task.c ****  * \return 0 (MQX is currently in ISR.)
2982:../MQXLITE/kernel/task.c ****  *
2983:../MQXLITE/kernel/task.c ****  * \see _task_reserve_space
2984:../MQXLITE/kernel/task.c ****  */
2985:../MQXLITE/kernel/task.c **** pointer _task_get_reserved_base(void)
2986:../MQXLITE/kernel/task.c **** { /* Body */
2987:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR kernel_data;
2988:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
2989:../MQXLITE/kernel/task.c **** 
2990:../MQXLITE/kernel/task.c ****     if (kernel_data->IN_ISR)
2991:../MQXLITE/kernel/task.c ****     {
2992:../MQXLITE/kernel/task.c ****         return 0;
2993:../MQXLITE/kernel/task.c ****     } /* Endif */
2994:../MQXLITE/kernel/task.c **** 
2995:../MQXLITE/kernel/task.c ****     return kernel_data->ACTIVE_PTR->TOS_RESERVED;
2996:../MQXLITE/kernel/task.c **** 
2997:../MQXLITE/kernel/task.c **** } /* Endbody */
2998:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
2999:../MQXLITE/kernel/task.c **** #endif /* MQX_EXTRA_TASK_STACK_ENABLE */
3000:../MQXLITE/kernel/task.c **** 
3001:../MQXLITE/kernel/task.c **** /*!
3002:../MQXLITE/kernel/task.c ****  * \private
3003:../MQXLITE/kernel/task.c ****  *
3004:../MQXLITE/kernel/task.c ****  * \brief Creates task for given task template.
3005:../MQXLITE/kernel/task.c ****  *
3006:../MQXLITE/kernel/task.c ****  * \param[in] template_ptr     Task template for the new task.
3007:../MQXLITE/kernel/task.c ****  * \param[in] creator_task_id  Task ID of the creating task.
3008:../MQXLITE/kernel/task.c ****  * \param[in] create_parameter Creation parameter for the task.
3009:../MQXLITE/kernel/task.c ****  * \param[in] dynamic          TRUE (Template_ptr is a dynamic template.), FALSE
3010:../MQXLITE/kernel/task.c ****  * (Template_ptr is not a dynamic template.)
3011:../MQXLITE/kernel/task.c ****  * \param[in] input_stack_ptr  If not NULL, the location of the stack if provided.
3012:../MQXLITE/kernel/task.c ****  * \param[in] input_stack_size Input stack size if provided by the application.
3013:../MQXLITE/kernel/task.c ****  *
3014:../MQXLITE/kernel/task.c ****  * \return Pointer to the created task's descriptor.
3015:../MQXLITE/kernel/task.c ****  * \return NULL (Failure)
3016:../MQXLITE/kernel/task.c ****  *
3017:../MQXLITE/kernel/task.c ****  * \see TASK_TEMPLATE_STRUCT
3018:../MQXLITE/kernel/task.c ****  * \see TD_STRUCT
3019:../MQXLITE/kernel/task.c ****  */
3020:../MQXLITE/kernel/task.c **** TD_STRUCT_PTR _task_init_internal
3021:../MQXLITE/kernel/task.c **** (
3022:../MQXLITE/kernel/task.c ****     TASK_TEMPLATE_STRUCT_PTR template_ptr,
3023:../MQXLITE/kernel/task.c ****     _task_id                 creator_task_id,
3024:../MQXLITE/kernel/task.c ****     uint_32                  create_parameter,
3025:../MQXLITE/kernel/task.c ****     boolean                  dynamic,
3026:../MQXLITE/kernel/task.c ****     pointer                  input_stack_ptr,
3027:../MQXLITE/kernel/task.c ****     _mem_size                input_stack_size
3028:../MQXLITE/kernel/task.c **** )
3029:../MQXLITE/kernel/task.c **** { /* Body */
 3449              		.loc 1 3029 0
 3450              		.cfi_startproc
 3451 0000 90B5     		push	{r4, r7, lr}
 3452              	.LCFI106:
 3453              		.cfi_def_cfa_offset 12
 3454              		.cfi_offset 4, -12
 3455              		.cfi_offset 7, -8
 3456              		.cfi_offset 14, -4
 3457 0002 8FB0     		sub	sp, sp, #60
 3458              	.LCFI107:
 3459              		.cfi_def_cfa_offset 72
 3460 0004 02AF     		add	r7, sp, #8
 3461              	.LCFI108:
 3462              		.cfi_def_cfa 7, 64
 3463 0006 F860     		str	r0, [r7, #12]
 3464 0008 B960     		str	r1, [r7, #8]
 3465 000a 7A60     		str	r2, [r7, #4]
 3466 000c 3B60     		str	r3, [r7]
3030:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR   kernel_data;
3031:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR            td_ptr;
3032:../MQXLITE/kernel/task.c ****     READY_Q_STRUCT_PTR       ready_q_ptr;
3033:../MQXLITE/kernel/task.c ****     TASK_TEMPLATE_STRUCT_PTR new_template_ptr;
3034:../MQXLITE/kernel/task.c **** #if MQX_USE_LWMEM_ALLOCATOR == 0 && !MQX_LITE_VERSION_NUMBER
3035:../MQXLITE/kernel/task.c ****     STOREBLOCK_STRUCT_PTR    block_ptr;
3036:../MQXLITE/kernel/task.c **** #endif
3037:../MQXLITE/kernel/task.c **** 
3038:../MQXLITE/kernel/task.c ****     char_ptr                 stack_ptr;
3039:../MQXLITE/kernel/task.c ****     _mqx_uint                stack_size;
3040:../MQXLITE/kernel/task.c ****     _mqx_uint                td_size;
3041:../MQXLITE/kernel/task.c **** 
3042:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 3467              		.loc 1 3042 0
 3468 000e 634B     		ldr	r3, .L236
 3469 0010 1B68     		ldr	r3, [r3]
 3470 0012 3B62     		str	r3, [r7, #32]
3043:../MQXLITE/kernel/task.c **** 
3044:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
3045:../MQXLITE/kernel/task.c ****     if (template_ptr->TASK_PRIORITY > kernel_data->LOWEST_TASK_PRIORITY)
 3471              		.loc 1 3045 0
 3472 0014 FB68     		ldr	r3, [r7, #12]
 3473 0016 DA68     		ldr	r2, [r3, #12]
 3474 0018 396A     		ldr	r1, [r7, #32]
 3475 001a C423     		mov	r3, #196
 3476 001c CB58     		ldr	r3, [r1, r3]
 3477 001e 9A42     		cmp	r2, r3
 3478 0020 0BD9     		bls	.L222
3046:../MQXLITE/kernel/task.c ****     {
3047:../MQXLITE/kernel/task.c **** #if MQX_USE_IDLE_TASK
3048:../MQXLITE/kernel/task.c ****         if (template_ptr != &kernel_data->IDLE_TASK_TEMPLATE)
 3479              		.loc 1 3048 0
 3480 0022 3B6A     		ldr	r3, [r7, #32]
 3481 0024 8420     		mov	r0, #132
 3482 0026 8000     		lsl	r0, r0, #2
 3483 0028 1A18     		add	r2, r3, r0
 3484 002a FB68     		ldr	r3, [r7, #12]
 3485 002c 9A42     		cmp	r2, r3
 3486 002e 04D0     		beq	.L222
3049:../MQXLITE/kernel/task.c ****         {
3050:../MQXLITE/kernel/task.c **** #endif /* MQX_USE_IDLE_TASK */
3051:../MQXLITE/kernel/task.c **** 
3052:../MQXLITE/kernel/task.c ****             _task_set_error(MQX_INVALID_TASK_PRIORITY);
 3487              		.loc 1 3052 0
 3488 0030 0E20     		mov	r0, #14
 3489 0032 FFF7FEFF 		bl	_task_set_error
3053:../MQXLITE/kernel/task.c ****             return (NULL);
 3490              		.loc 1 3053 0
 3491 0036 0023     		mov	r3, #0
 3492 0038 ACE0     		b	.L235
 3493              	.L222:
3054:../MQXLITE/kernel/task.c **** 
3055:../MQXLITE/kernel/task.c **** #if MQX_USE_IDLE_TASK
3056:../MQXLITE/kernel/task.c ****         }
3057:../MQXLITE/kernel/task.c **** #endif /* MQX_USE_IDLE_TASK */
3058:../MQXLITE/kernel/task.c ****     }
3059:../MQXLITE/kernel/task.c **** #endif /* MQX_CHECK_ERRORS */
3060:../MQXLITE/kernel/task.c **** 
3061:../MQXLITE/kernel/task.c **** 
3062:../MQXLITE/kernel/task.c ****     /*
3063:../MQXLITE/kernel/task.c ****      * Calculate space for the stack. Note that the stack size
3064:../MQXLITE/kernel/task.c ****      * must be no smaller than a specified minimum, and it
3065:../MQXLITE/kernel/task.c ****      * is made to be a multiple of longwords. The space allocated
3066:../MQXLITE/kernel/task.c ****      * for the stack includes the specified stacksize and the
3067:../MQXLITE/kernel/task.c ****      * overhead required by the kernel.
3068:../MQXLITE/kernel/task.c ****      */
3069:../MQXLITE/kernel/task.c ****     if (input_stack_ptr)
 3494              		.loc 1 3069 0
 3495 003a 3B6C     		ldr	r3, [r7, #64]
 3496 003c 002B     		cmp	r3, #0
 3497 003e 22D0     		beq	.L224
3070:../MQXLITE/kernel/task.c ****     {
3071:../MQXLITE/kernel/task.c ****         /* force stack size, ignore stack size from template */
3072:../MQXLITE/kernel/task.c ****         stack_size = input_stack_size;
 3498              		.loc 1 3072 0
 3499 0040 7B6C     		ldr	r3, [r7, #68]
 3500 0042 7B62     		str	r3, [r7, #36]
3073:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
3074:../MQXLITE/kernel/task.c ****         if (stack_size <= (PSP_MINSTACKSIZE+sizeof(TD_STRUCT)))
 3501              		.loc 1 3074 0
 3502 0044 7A6A     		ldr	r2, [r7, #36]
 3503 0046 8423     		mov	r3, #132
 3504 0048 5B00     		lsl	r3, r3, #1
 3505 004a 9A42     		cmp	r2, r3
 3506 004c 04D8     		bhi	.L225
3075:../MQXLITE/kernel/task.c ****         {
3076:../MQXLITE/kernel/task.c ****             _task_set_error(MQX_INVALID_SIZE);
 3507              		.loc 1 3076 0
 3508 004e 0220     		mov	r0, #2
 3509 0050 FFF7FEFF 		bl	_task_set_error
3077:../MQXLITE/kernel/task.c ****             return(NULL);
 3510              		.loc 1 3077 0
 3511 0054 0023     		mov	r3, #0
 3512 0056 9DE0     		b	.L235
 3513              	.L225:
3078:../MQXLITE/kernel/task.c ****         } /* Endif */
3079:../MQXLITE/kernel/task.c **** #endif
3080:../MQXLITE/kernel/task.c ****         td_ptr = _task_alloc_td_internal(stack_size, &td_size, input_stack_ptr, template_ptr->TASK_
 3514              		.loc 1 3080 0
 3515 0058 796A     		ldr	r1, [r7, #36]
 3516 005a 3A1C     		mov	r2, r7
 3517 005c 1432     		add	r2, r2, #20
 3518 005e 3B6C     		ldr	r3, [r7, #64]
 3519 0060 081C     		mov	r0, r1
 3520 0062 111C     		mov	r1, r2
 3521 0064 1A1C     		mov	r2, r3
 3522 0066 0023     		mov	r3, #0
 3523 0068 FFF7FEFF 		bl	_task_alloc_td_internal
 3524 006c 031C     		mov	r3, r0
 3525 006e FB62     		str	r3, [r7, #44]
3081:../MQXLITE/kernel/task.c ****         stack_size -= td_size;
 3526              		.loc 1 3081 0
 3527 0070 7B69     		ldr	r3, [r7, #20]
 3528 0072 7A6A     		ldr	r2, [r7, #36]
 3529 0074 D31A     		sub	r3, r2, r3
 3530 0076 7B62     		str	r3, [r7, #36]
3082:../MQXLITE/kernel/task.c **** 
3083:../MQXLITE/kernel/task.c ****         if (dynamic)
 3531              		.loc 1 3083 0
 3532 0078 3B68     		ldr	r3, [r7]
 3533 007a 002B     		cmp	r3, #0
 3534 007c 21D0     		beq	.L226
3084:../MQXLITE/kernel/task.c ****         {
3085:../MQXLITE/kernel/task.c ****             stack_size -=  sizeof(TASK_TEMPLATE_STRUCT);
 3535              		.loc 1 3085 0
 3536 007e 7B6A     		ldr	r3, [r7, #36]
 3537 0080 1C3B     		sub	r3, r3, #28
 3538 0082 7B62     		str	r3, [r7, #36]
 3539 0084 1DE0     		b	.L226
 3540              	.L224:
3086:../MQXLITE/kernel/task.c ****         }
3087:../MQXLITE/kernel/task.c **** 
3088:../MQXLITE/kernel/task.c ****     }
3089:../MQXLITE/kernel/task.c ****     else
3090:../MQXLITE/kernel/task.c ****     {
3091:../MQXLITE/kernel/task.c ****         /* take stack size from template */
3092:../MQXLITE/kernel/task.c ****         stack_size = template_ptr->TASK_STACKSIZE;
 3541              		.loc 1 3092 0
 3542 0086 FB68     		ldr	r3, [r7, #12]
 3543 0088 9B68     		ldr	r3, [r3, #8]
 3544 008a 7B62     		str	r3, [r7, #36]
3093:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
3094:../MQXLITE/kernel/task.c ****         if ( stack_size <= PSP_MINSTACKSIZE  )
 3545              		.loc 1 3094 0
 3546 008c 7B6A     		ldr	r3, [r7, #36]
 3547 008e 982B     		cmp	r3, #152
 3548 0090 01D8     		bhi	.L227
3095:../MQXLITE/kernel/task.c ****         {
3096:../MQXLITE/kernel/task.c ****             stack_size = PSP_MINSTACKSIZE;
 3549              		.loc 1 3096 0
 3550 0092 9823     		mov	r3, #152
 3551 0094 7B62     		str	r3, [r7, #36]
 3552              	.L227:
3097:../MQXLITE/kernel/task.c ****         } /* Endif */
3098:../MQXLITE/kernel/task.c **** #endif
3099:../MQXLITE/kernel/task.c ****         /* Make the size a multiple of the memory alignment */
3100:../MQXLITE/kernel/task.c ****         _STACK_ALIGN_VAL_LARGER(stack_size);
 3553              		.loc 1 3100 0
 3554 0096 7B6A     		ldr	r3, [r7, #36]
 3555 0098 0F33     		add	r3, r3, #15
 3556 009a 0F22     		mov	r2, #15
 3557 009c 9343     		bic	r3, r2
 3558 009e 7B62     		str	r3, [r7, #36]
3101:../MQXLITE/kernel/task.c **** 
3102:../MQXLITE/kernel/task.c **** #if 0 /* we dont need this, because we using _mem_alloc_align function in _task_alloc_td_internal *
3103:../MQXLITE/kernel/task.c **** #if PSP_MEMORY_ALIGNMENT
3104:../MQXLITE/kernel/task.c ****         /* But we need to add size to allow for alignment of stack base */
3105:../MQXLITE/kernel/task.c ****         stack_size += PSP_STACK_ALIGNMENT + 1;
3106:../MQXLITE/kernel/task.c **** #endif
3107:../MQXLITE/kernel/task.c **** #endif
3108:../MQXLITE/kernel/task.c **** 
3109:../MQXLITE/kernel/task.c ****         /*
3110:../MQXLITE/kernel/task.c ****          * Allocate space for a task descriptor and stack.
3111:../MQXLITE/kernel/task.c ****          * If there is none available,
3112:../MQXLITE/kernel/task.c ****          * then indicate that the create failed.
3113:../MQXLITE/kernel/task.c ****          */
3114:../MQXLITE/kernel/task.c ****         /* function allocate task descriptor, stack and optionally increase stack block size by siz
3115:../MQXLITE/kernel/task.c ****         td_ptr = _task_alloc_td_internal(dynamic ? (stack_size +  sizeof(TASK_TEMPLATE_STRUCT)) : s
 3559              		.loc 1 3115 0
 3560 00a0 3B68     		ldr	r3, [r7]
 3561 00a2 002B     		cmp	r3, #0
 3562 00a4 02D0     		beq	.L228
 3563              		.loc 1 3115 0 is_stmt 0
 3564 00a6 7B6A     		ldr	r3, [r7, #36]
 3565 00a8 1C33     		add	r3, r3, #28
 3566 00aa 00E0     		b	.L229
 3567              	.L228:
 3568              		.loc 1 3115 0
 3569 00ac 7B6A     		ldr	r3, [r7, #36]
 3570              	.L229:
3116:../MQXLITE/kernel/task.c ****                                                  &td_size, NULL, template_ptr->TASK_ATTRIBUTES & MQ
 3571              		.loc 1 3116 0 is_stmt 1
 3572 00ae 3A1C     		mov	r2, r7
 3573 00b0 1432     		add	r2, r2, #20
3115:../MQXLITE/kernel/task.c ****         td_ptr = _task_alloc_td_internal(dynamic ? (stack_size +  sizeof(TASK_TEMPLATE_STRUCT)) : s
 3574              		.loc 1 3115 0
 3575 00b2 181C     		mov	r0, r3
 3576 00b4 111C     		mov	r1, r2
 3577 00b6 0022     		mov	r2, #0
 3578 00b8 0023     		mov	r3, #0
 3579 00ba FFF7FEFF 		bl	_task_alloc_td_internal
 3580 00be 031C     		mov	r3, r0
 3581 00c0 FB62     		str	r3, [r7, #44]
 3582              	.L226:
3117:../MQXLITE/kernel/task.c ****     }/* Endif */
3118:../MQXLITE/kernel/task.c **** 
3119:../MQXLITE/kernel/task.c **** 
3120:../MQXLITE/kernel/task.c **** #if MQX_CHECK_MEMORY_ALLOCATION_ERRORS
3121:../MQXLITE/kernel/task.c ****     if (td_ptr == NULL)
3122:../MQXLITE/kernel/task.c ****     {
3123:../MQXLITE/kernel/task.c ****         _task_set_error(MQX_OUT_OF_TASK_DESCRIPTORS);
3124:../MQXLITE/kernel/task.c ****         return (NULL);
3125:../MQXLITE/kernel/task.c ****     } /* Endif */
3126:../MQXLITE/kernel/task.c **** #endif
3127:../MQXLITE/kernel/task.c ****     td_ptr->STATE = BLOCKED;
 3583              		.loc 1 3127 0
 3584 00c2 FB6A     		ldr	r3, [r7, #44]
 3585 00c4 0322     		mov	r2, #3
 3586 00c6 9A60     		str	r2, [r3, #8]
3128:../MQXLITE/kernel/task.c **** 
3129:../MQXLITE/kernel/task.c ****     /* get begin of new stack */
3130:../MQXLITE/kernel/task.c ****     if (td_ptr->STACK_ALLOC_BLOCK)
 3587              		.loc 1 3130 0
 3588 00c8 FB6A     		ldr	r3, [r7, #44]
 3589 00ca DB6E     		ldr	r3, [r3, #108]
 3590 00cc 002B     		cmp	r3, #0
 3591 00ce 03D0     		beq	.L230
3131:../MQXLITE/kernel/task.c ****     {
3132:../MQXLITE/kernel/task.c ****         /* (stack has been allocated) */
3133:../MQXLITE/kernel/task.c ****         /* stack start in new allocated block */
3134:../MQXLITE/kernel/task.c ****         stack_ptr = td_ptr->STACK_ALLOC_BLOCK;
 3592              		.loc 1 3134 0
 3593 00d0 FB6A     		ldr	r3, [r7, #44]
 3594 00d2 DB6E     		ldr	r3, [r3, #108]
 3595 00d4 BB62     		str	r3, [r7, #40]
 3596 00d6 03E0     		b	.L231
 3597              	.L230:
3135:../MQXLITE/kernel/task.c ****     }
3136:../MQXLITE/kernel/task.c ****     else
3137:../MQXLITE/kernel/task.c ****     {
3138:../MQXLITE/kernel/task.c ****         /* (this will be executed if user provide input_stack_size) */
3139:../MQXLITE/kernel/task.c ****         /* stack start in provided block behind TD */
3140:../MQXLITE/kernel/task.c ****         stack_ptr = (char_ptr)td_ptr + td_size;
 3598              		.loc 1 3140 0
 3599 00d8 7B69     		ldr	r3, [r7, #20]
 3600 00da FA6A     		ldr	r2, [r7, #44]
 3601 00dc D318     		add	r3, r2, r3
 3602 00de BB62     		str	r3, [r7, #40]
 3603              	.L231:
3141:../MQXLITE/kernel/task.c ****     }
3142:../MQXLITE/kernel/task.c **** 
3143:../MQXLITE/kernel/task.c ****     if (dynamic)
 3604              		.loc 1 3143 0
 3605 00e0 3B68     		ldr	r3, [r7]
 3606 00e2 002B     		cmp	r3, #0
 3607 00e4 15D0     		beq	.L232
3144:../MQXLITE/kernel/task.c ****     {
3145:../MQXLITE/kernel/task.c ****         /* task is creating from temporary template, store template before stack (in stack allocate
3146:../MQXLITE/kernel/task.c ****         new_template_ptr = (pointer)stack_ptr;
 3608              		.loc 1 3146 0
 3609 00e6 BB6A     		ldr	r3, [r7, #40]
 3610 00e8 FB61     		str	r3, [r7, #28]
3147:../MQXLITE/kernel/task.c ****         stack_ptr +=  sizeof(TASK_TEMPLATE_STRUCT);
 3611              		.loc 1 3147 0
 3612 00ea BB6A     		ldr	r3, [r7, #40]
 3613 00ec 1C33     		add	r3, r3, #28
 3614 00ee BB62     		str	r3, [r7, #40]
3148:../MQXLITE/kernel/task.c ****         *new_template_ptr = *template_ptr;
 3615              		.loc 1 3148 0
 3616 00f0 FB69     		ldr	r3, [r7, #28]
 3617 00f2 FA68     		ldr	r2, [r7, #12]
 3618 00f4 13CA     		ldmia	r2!, {r0, r1, r4}
 3619 00f6 13C3     		stmia	r3!, {r0, r1, r4}
 3620 00f8 13CA     		ldmia	r2!, {r0, r1, r4}
 3621 00fa 13C3     		stmia	r3!, {r0, r1, r4}
 3622 00fc 1268     		ldr	r2, [r2]
 3623 00fe 1A60     		str	r2, [r3]
3149:../MQXLITE/kernel/task.c ****         template_ptr = new_template_ptr;
 3624              		.loc 1 3149 0
 3625 0100 FB69     		ldr	r3, [r7, #28]
 3626 0102 FB60     		str	r3, [r7, #12]
3150:../MQXLITE/kernel/task.c ****         template_ptr->TASK_TEMPLATE_INDEX |= SYSTEM_TASK_FLAG;
 3627              		.loc 1 3150 0
 3628 0104 FB68     		ldr	r3, [r7, #12]
 3629 0106 1B68     		ldr	r3, [r3]
 3630 0108 8022     		mov	r2, #128
 3631 010a 1206     		lsl	r2, r2, #24
 3632 010c 1A43     		orr	r2, r3
 3633 010e FB68     		ldr	r3, [r7, #12]
 3634 0110 1A60     		str	r2, [r3]
 3635              	.L232:
3151:../MQXLITE/kernel/task.c ****         /* stack_ptr is moved behind template */
3152:../MQXLITE/kernel/task.c ****     }
3153:../MQXLITE/kernel/task.c **** 
3154:../MQXLITE/kernel/task.c **** #if MQX_MONITOR_STACK
3155:../MQXLITE/kernel/task.c ****     /* fill stack with mark for TAD stack overflow functionality */
3156:../MQXLITE/kernel/task.c ****     _task_fill_stack_internal((_mqx_uint_ptr)stack_ptr, stack_size);
 3636              		.loc 1 3156 0
 3637 0112 BA6A     		ldr	r2, [r7, #40]
 3638 0114 7B6A     		ldr	r3, [r7, #36]
 3639 0116 101C     		mov	r0, r2
 3640 0118 191C     		mov	r1, r3
 3641 011a FFF7FEFF 		bl	_task_fill_stack_internal
3157:../MQXLITE/kernel/task.c **** #endif
3158:../MQXLITE/kernel/task.c **** 
3159:../MQXLITE/kernel/task.c ****     /*  Find the ready_q that the new task belongs to.  */
3160:../MQXLITE/kernel/task.c ****     /* The ready queues are stored as a array as follows:
3161:../MQXLITE/kernel/task.c ****      *     lowest priority - eg 9
3162:../MQXLITE/kernel/task.c ****      *                          8
3163:../MQXLITE/kernel/task.c ****      *                        ...
3164:../MQXLITE/kernel/task.c ****      *     highest priority     0
3165:../MQXLITE/kernel/task.c ****      * With the READY_Q_LIST pointer pointing to the highest priority queue
3166:../MQXLITE/kernel/task.c ****      */
3167:../MQXLITE/kernel/task.c ****     ready_q_ptr = kernel_data->READY_Q_LIST - template_ptr->TASK_PRIORITY;
 3642              		.loc 1 3167 0
 3643 011e 3B6A     		ldr	r3, [r7, #32]
 3644 0120 1A6A     		ldr	r2, [r3, #32]
 3645 0122 FB68     		ldr	r3, [r7, #12]
 3646 0124 DB68     		ldr	r3, [r3, #12]
 3647 0126 1B01     		lsl	r3, r3, #4
 3648 0128 5B42     		neg	r3, r3
 3649 012a D318     		add	r3, r2, r3
 3650 012c BB61     		str	r3, [r7, #24]
3168:../MQXLITE/kernel/task.c ****     td_ptr->MY_QUEUE = ready_q_ptr;
 3651              		.loc 1 3168 0
 3652 012e FB6A     		ldr	r3, [r7, #44]
 3653 0130 BA69     		ldr	r2, [r7, #24]
 3654 0132 DA61     		str	r2, [r3, #28]
3169:../MQXLITE/kernel/task.c **** #if MQX_HAS_DYNAMIC_PRIORITIES
3170:../MQXLITE/kernel/task.c ****     td_ptr->HOME_QUEUE  = ready_q_ptr;
 3655              		.loc 1 3170 0
 3656 0134 FB6A     		ldr	r3, [r7, #44]
 3657 0136 BA69     		ldr	r2, [r7, #24]
 3658 0138 1A62     		str	r2, [r3, #32]
3171:../MQXLITE/kernel/task.c **** #endif
3172:../MQXLITE/kernel/task.c ****     td_ptr->TASK_SR     = ready_q_ptr->ENABLE_SR;
 3659              		.loc 1 3172 0
 3660 013a BB69     		ldr	r3, [r7, #24]
 3661 013c 9A89     		ldrh	r2, [r3, #12]
 3662 013e FB6A     		ldr	r3, [r7, #44]
 3663 0140 9A84     		strh	r2, [r3, #36]
3173:../MQXLITE/kernel/task.c ****     td_ptr->FLAGS       = template_ptr->TASK_ATTRIBUTES;
 3664              		.loc 1 3173 0
 3665 0142 FB68     		ldr	r3, [r7, #12]
 3666 0144 5A69     		ldr	r2, [r3, #20]
 3667 0146 FB6A     		ldr	r3, [r7, #44]
 3668 0148 9A62     		str	r2, [r3, #40]
3174:../MQXLITE/kernel/task.c **** 
3175:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
3176:../MQXLITE/kernel/task.c ****     if (template_ptr->TASK_ATTRIBUTES & MQX_USER_TASK)
3177:../MQXLITE/kernel/task.c ****     {
3178:../MQXLITE/kernel/task.c ****         td_ptr->FLAGS |= TASK_USER_MODE;
3179:../MQXLITE/kernel/task.c ****     }
3180:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
3181:../MQXLITE/kernel/task.c **** 
3182:../MQXLITE/kernel/task.c ****     if (input_stack_ptr)
 3669              		.loc 1 3182 0
 3670 014a 3B6C     		ldr	r3, [r7, #64]
 3671 014c 002B     		cmp	r3, #0
 3672 014e 05D0     		beq	.L233
3183:../MQXLITE/kernel/task.c ****     {
3184:../MQXLITE/kernel/task.c ****         td_ptr->FLAGS |= TASK_STACK_PREALLOCATED;
 3673              		.loc 1 3184 0
 3674 0150 FB6A     		ldr	r3, [r7, #44]
 3675 0152 9B6A     		ldr	r3, [r3, #40]
 3676 0154 2022     		mov	r2, #32
 3677 0156 1A43     		orr	r2, r3
 3678 0158 FB6A     		ldr	r3, [r7, #44]
 3679 015a 9A62     		str	r2, [r3, #40]
 3680              	.L233:
3185:../MQXLITE/kernel/task.c ****     } /* Endif */
3186:../MQXLITE/kernel/task.c **** 
3187:../MQXLITE/kernel/task.c ****     /* create stack frame - initialize stack parameters in TD and stack itself (registers required 
3188:../MQXLITE/kernel/task.c ****     if (FALSE == _psp_build_stack_frame(td_ptr, stack_ptr, stack_size, template_ptr, (_mqx_uint)rea
 3681              		.loc 1 3188 0
 3682 015c BB69     		ldr	r3, [r7, #24]
 3683 015e 9B89     		ldrh	r3, [r3, #12]
 3684 0160 1C1C     		mov	r4, r3
 3685 0162 F86A     		ldr	r0, [r7, #44]
 3686 0164 B96A     		ldr	r1, [r7, #40]
 3687 0166 7A6A     		ldr	r2, [r7, #36]
 3688 0168 FB68     		ldr	r3, [r7, #12]
 3689 016a 0094     		str	r4, [sp]
 3690 016c 7C68     		ldr	r4, [r7, #4]
 3691 016e 0194     		str	r4, [sp, #4]
 3692 0170 FFF7FEFF 		bl	_psp_build_stack_frame
 3693 0174 031C     		mov	r3, r0
 3694 0176 002B     		cmp	r3, #0
 3695 0178 01D1     		bne	.L234
3189:../MQXLITE/kernel/task.c ****     {
3190:../MQXLITE/kernel/task.c ****         /* build stack failed */
3191:../MQXLITE/kernel/task.c ****         return NULL;
 3696              		.loc 1 3191 0
 3697 017a 0023     		mov	r3, #0
 3698 017c 0AE0     		b	.L235
 3699              	.L234:
3192:../MQXLITE/kernel/task.c ****     }
3193:../MQXLITE/kernel/task.c **** 
3194:../MQXLITE/kernel/task.c **** 
3195:../MQXLITE/kernel/task.c ****     /* Initialize the task's task descriptor. */
3196:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_TASK_TEMPLATE_PTR
3197:../MQXLITE/kernel/task.c ****     td_ptr->TASK_TEMPLATE_PTR = template_ptr;
 3700              		.loc 1 3197 0
 3701 017e FB6A     		ldr	r3, [r7, #44]
 3702 0180 FA68     		ldr	r2, [r7, #12]
 3703 0182 9A65     		str	r2, [r3, #88]
3198:../MQXLITE/kernel/task.c **** #endif
3199:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_TEMPLATE_INDEX
3200:../MQXLITE/kernel/task.c ****     td_ptr->TEMPLATE_INDEX    = template_ptr->TASK_TEMPLATE_INDEX;
 3704              		.loc 1 3200 0
 3705 0184 FB68     		ldr	r3, [r7, #12]
 3706 0186 1A68     		ldr	r2, [r3]
 3707 0188 FB6A     		ldr	r3, [r7, #44]
 3708 018a 5A65     		str	r2, [r3, #84]
3201:../MQXLITE/kernel/task.c **** #endif
3202:../MQXLITE/kernel/task.c **** 
3203:../MQXLITE/kernel/task.c **** #if MQX_HAS_TIME_SLICE
3204:../MQXLITE/kernel/task.c ****     /* Use the provided default time slice */
3205:../MQXLITE/kernel/task.c ****     if (template_ptr->DEFAULT_TIME_SLICE)
3206:../MQXLITE/kernel/task.c ****     {
3207:../MQXLITE/kernel/task.c **** #if (MQX_DEFAULT_TIME_SLICE_IN_TICKS == 0)
3208:../MQXLITE/kernel/task.c ****         uint_32 ticks;
3209:../MQXLITE/kernel/task.c **** 
3210:../MQXLITE/kernel/task.c ****         ticks = ((template_ptr->DEFAULT_TIME_SLICE * 2 *
3211:../MQXLITE/kernel/task.c ****                         kernel_data->TICKS_PER_SECOND) / 1000) / 2  /* Rounding.. */;
3212:../MQXLITE/kernel/task.c ****         PSP_ADD_TICKS_TO_TICK_STRUCT(&td_ptr->TIME_SLICE,
3213:../MQXLITE/kernel/task.c ****             ticks, &td_ptr->TIME_SLICE);
3214:../MQXLITE/kernel/task.c **** #else
3215:../MQXLITE/kernel/task.c ****         PSP_ADD_TICKS_TO_TICK_STRUCT(&td_ptr->TIME_SLICE,
3216:../MQXLITE/kernel/task.c ****             template_ptr->DEFAULT_TIME_SLICE, &td_ptr->TIME_SLICE);
3217:../MQXLITE/kernel/task.c **** #endif
3218:../MQXLITE/kernel/task.c ****     }
3219:../MQXLITE/kernel/task.c ****     else
3220:../MQXLITE/kernel/task.c ****     {
3221:../MQXLITE/kernel/task.c ****         td_ptr->TIME_SLICE = kernel_data->SCHED_TIME_SLICE;
3222:../MQXLITE/kernel/task.c ****     } /* Endif */
3223:../MQXLITE/kernel/task.c ****     if (kernel_data->SCHED_POLICY == MQX_SCHED_RR)
3224:../MQXLITE/kernel/task.c ****     {
3225:../MQXLITE/kernel/task.c ****         td_ptr->FLAGS |= MQX_TIME_SLICE_TASK;
3226:../MQXLITE/kernel/task.c ****     } /* Endif */
3227:../MQXLITE/kernel/task.c **** #endif
3228:../MQXLITE/kernel/task.c **** 
3229:../MQXLITE/kernel/task.c **** #if MQX_USE_IO
3230:../MQXLITE/kernel/task.c ****     td_ptr->STDIN_STREAM  = kernel_data->PROCESSOR_STDIN;
3231:../MQXLITE/kernel/task.c ****     td_ptr->STDOUT_STREAM = kernel_data->PROCESSOR_STDOUT;
3232:../MQXLITE/kernel/task.c ****     td_ptr->STDERR_STREAM = kernel_data->PROCESSOR_STDERR;
3233:../MQXLITE/kernel/task.c **** #endif
3234:../MQXLITE/kernel/task.c **** 
3235:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_PARENT
3236:../MQXLITE/kernel/task.c ****     td_ptr->PARENT = creator_task_id;
 3709              		.loc 1 3236 0
 3710 018c FB6A     		ldr	r3, [r7, #44]
 3711 018e BA68     		ldr	r2, [r7, #8]
 3712 0190 1A65     		str	r2, [r3, #80]
3237:../MQXLITE/kernel/task.c **** #endif
3238:../MQXLITE/kernel/task.c **** 
3239:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
3240:../MQXLITE/kernel/task.c ****     /*
3241:../MQXLITE/kernel/task.c ****      * Move ownership of the td from the creating task, to the
3242:../MQXLITE/kernel/task.c ****      * newly created task.
3243:../MQXLITE/kernel/task.c ****      */
3244:../MQXLITE/kernel/task.c **** #if MQX_USE_LWMEM_ALLOCATOR==0
3245:../MQXLITE/kernel/task.c ****     block_ptr = GET_MEMBLOCK_PTR(td_ptr);
3246:../MQXLITE/kernel/task.c ****     kernel_data->ACTIVE_PTR->MEMORY_RESOURCE_LIST = block_ptr->NEXTBLOCK;
3247:../MQXLITE/kernel/task.c **** #endif
3248:../MQXLITE/kernel/task.c **** 
3249:../MQXLITE/kernel/task.c ****     if (input_stack_ptr == 0)
3250:../MQXLITE/kernel/task.c ****     {
3251:../MQXLITE/kernel/task.c ****         _mem_transfer_internal(td_ptr, td_ptr);
3252:../MQXLITE/kernel/task.c ****         _mem_transfer_internal(td_ptr->STACK_ALLOC_BLOCK, td_ptr);
3253:../MQXLITE/kernel/task.c ****     } /* Endif */
3254:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
3255:../MQXLITE/kernel/task.c **** 
3256:../MQXLITE/kernel/task.c ****     return (td_ptr);
 3713              		.loc 1 3256 0
 3714 0192 FB6A     		ldr	r3, [r7, #44]
 3715              	.L235:
3257:../MQXLITE/kernel/task.c **** 
3258:../MQXLITE/kernel/task.c **** } /* Endbody */
 3716              		.loc 1 3258 0
 3717 0194 181C     		mov	r0, r3
 3718 0196 BD46     		mov	sp, r7
 3719 0198 0DB0     		add	sp, sp, #52
 3720              		@ sp needed for prologue
 3721 019a 90BD     		pop	{r4, r7, pc}
 3722              	.L237:
 3723              		.align	2
 3724              	.L236:
 3725 019c 00000000 		.word	_mqx_kernel_data
 3726              		.cfi_endproc
 3727              	.LFE37:
 3729              		.section	.text._task_fill_stack_internal,"ax",%progbits
 3730              		.align	2
 3731              		.global	_task_fill_stack_internal
 3732              		.code	16
 3733              		.thumb_func
 3735              	_task_fill_stack_internal:
 3736              	.LFB38:
3259:../MQXLITE/kernel/task.c **** 
3260:../MQXLITE/kernel/task.c **** #if MQX_MONITOR_STACK
3261:../MQXLITE/kernel/task.c **** /*!
3262:../MQXLITE/kernel/task.c ****  * \private
3263:../MQXLITE/kernel/task.c ****  *
3264:../MQXLITE/kernel/task.c ****  * \brief Initializes a stack to be filled with the MQX_MONITOR_STACK_VALUE: "stak".
3265:../MQXLITE/kernel/task.c ****  *
3266:../MQXLITE/kernel/task.c ****  * \param[in] addr_ptr Pointer to the start of the stack which is to be filled.
3267:../MQXLITE/kernel/task.c ****  * \param[in] size     The number of bytes to be filled.
3268:../MQXLITE/kernel/task.c ****  */
3269:../MQXLITE/kernel/task.c **** void _task_fill_stack_internal
3270:../MQXLITE/kernel/task.c **** (
3271:../MQXLITE/kernel/task.c ****     _mqx_uint_ptr addr_ptr,
3272:../MQXLITE/kernel/task.c ****     _mqx_uint     size
3273:../MQXLITE/kernel/task.c **** )
3274:../MQXLITE/kernel/task.c **** { /* Body */
 3737              		.loc 1 3274 0
 3738              		.cfi_startproc
 3739 0000 80B5     		push	{r7, lr}
 3740              	.LCFI109:
 3741              		.cfi_def_cfa_offset 8
 3742              		.cfi_offset 7, -8
 3743              		.cfi_offset 14, -4
 3744 0002 82B0     		sub	sp, sp, #8
 3745              	.LCFI110:
 3746              		.cfi_def_cfa_offset 16
 3747 0004 00AF     		add	r7, sp, #0
 3748              	.LCFI111:
 3749              		.cfi_def_cfa_register 7
 3750 0006 7860     		str	r0, [r7, #4]
 3751 0008 3960     		str	r1, [r7]
3275:../MQXLITE/kernel/task.c **** 
3276:../MQXLITE/kernel/task.c ****     size = (size/sizeof(_mqx_uint)) + 1;  /* Calculate # _mqx_uints */
 3752              		.loc 1 3276 0
 3753 000a 3B68     		ldr	r3, [r7]
 3754 000c 9B08     		lsr	r3, r3, #2
 3755 000e 0133     		add	r3, r3, #1
 3756 0010 3B60     		str	r3, [r7]
3277:../MQXLITE/kernel/task.c ****     while (--size)
 3757              		.loc 1 3277 0
 3758 0012 05E0     		b	.L239
 3759              	.L240:
3278:../MQXLITE/kernel/task.c ****     {
3279:../MQXLITE/kernel/task.c ****         *addr_ptr++ = MQX_STACK_MONITOR_VALUE;
 3760              		.loc 1 3279 0
 3761 0014 7B68     		ldr	r3, [r7, #4]
 3762 0016 074A     		ldr	r2, .L241
 3763 0018 1A60     		str	r2, [r3]
 3764 001a 7B68     		ldr	r3, [r7, #4]
 3765 001c 0433     		add	r3, r3, #4
 3766 001e 7B60     		str	r3, [r7, #4]
 3767              	.L239:
3277:../MQXLITE/kernel/task.c ****     while (--size)
 3768              		.loc 1 3277 0
 3769 0020 3B68     		ldr	r3, [r7]
 3770 0022 013B     		sub	r3, r3, #1
 3771 0024 3B60     		str	r3, [r7]
 3772 0026 3B68     		ldr	r3, [r7]
 3773 0028 002B     		cmp	r3, #0
 3774 002a F3D1     		bne	.L240
3280:../MQXLITE/kernel/task.c ****     } /* Endwhile */
3281:../MQXLITE/kernel/task.c **** 
3282:../MQXLITE/kernel/task.c **** } /* Endbody */
 3775              		.loc 1 3282 0
 3776 002c BD46     		mov	sp, r7
 3777 002e 02B0     		add	sp, sp, #8
 3778              		@ sp needed for prologue
 3779 0030 80BD     		pop	{r7, pc}
 3780              	.L242:
 3781 0032 C046     		.align	2
 3782              	.L241:
 3783 0034 6B617473 		.word	1937006955
 3784              		.cfi_endproc
 3785              	.LFE38:
 3787              		.section	.text._task_ready_internal,"ax",%progbits
 3788              		.align	2
 3789              		.global	_task_ready_internal
 3790              		.code	16
 3791              		.thumb_func
 3793              	_task_ready_internal:
 3794              	.LFB39:
3283:../MQXLITE/kernel/task.c **** #endif
3284:../MQXLITE/kernel/task.c **** 
3285:../MQXLITE/kernel/task.c **** /*!
3286:../MQXLITE/kernel/task.c ****  * \private
3287:../MQXLITE/kernel/task.c ****  *
3288:../MQXLITE/kernel/task.c ****  * \brief Adds a task to the ready to run queue.
3289:../MQXLITE/kernel/task.c ****  *
3290:../MQXLITE/kernel/task.c ****  * This function MUST BE CALLED DISABLED.
3291:../MQXLITE/kernel/task.c ****  *
3292:../MQXLITE/kernel/task.c ****  * \param[in] td_ptr Pointer to the task descriptor to add.
3293:../MQXLITE/kernel/task.c ****  *
3294:../MQXLITE/kernel/task.c ****  * \see TD_STRUCT
3295:../MQXLITE/kernel/task.c ****  */
3296:../MQXLITE/kernel/task.c **** void _task_ready_internal
3297:../MQXLITE/kernel/task.c **** (
3298:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR td_ptr
3299:../MQXLITE/kernel/task.c **** )
3300:../MQXLITE/kernel/task.c **** { /* Body */
 3795              		.loc 1 3300 0
 3796              		.cfi_startproc
 3797 0000 B0B5     		push	{r4, r5, r7, lr}
 3798              	.LCFI112:
 3799              		.cfi_def_cfa_offset 16
 3800              		.cfi_offset 4, -16
 3801              		.cfi_offset 5, -12
 3802              		.cfi_offset 7, -8
 3803              		.cfi_offset 14, -4
 3804 0002 84B0     		sub	sp, sp, #16
 3805              	.LCFI113:
 3806              		.cfi_def_cfa_offset 32
 3807 0004 00AF     		add	r7, sp, #0
 3808              	.LCFI114:
 3809              		.cfi_def_cfa_register 7
 3810 0006 7860     		str	r0, [r7, #4]
3301:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR       kernel_data;
3302:../MQXLITE/kernel/task.c ****     register READY_Q_STRUCT_PTR  ready_q_ptr;
3303:../MQXLITE/kernel/task.c ****     register TD_STRUCT_PTR       old_tail_ptr;
3304:../MQXLITE/kernel/task.c **** 
3305:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 3811              		.loc 1 3305 0
 3812 0008 0D4B     		ldr	r3, .L245
 3813 000a 1B68     		ldr	r3, [r3]
 3814 000c FB60     		str	r3, [r7, #12]
3306:../MQXLITE/kernel/task.c **** 
3307:../MQXLITE/kernel/task.c ****     _KLOGE2(KLOG_task_ready, td_ptr);
3308:../MQXLITE/kernel/task.c **** 
3309:../MQXLITE/kernel/task.c ****     ready_q_ptr   = td_ptr->MY_QUEUE;
 3815              		.loc 1 3309 0
 3816 000e 7B68     		ldr	r3, [r7, #4]
 3817 0010 DC69     		ldr	r4, [r3, #28]
3310:../MQXLITE/kernel/task.c ****     old_tail_ptr  = ready_q_ptr->TAIL_READY_Q;
 3818              		.loc 1 3310 0
 3819 0012 6568     		ldr	r5, [r4, #4]
3311:../MQXLITE/kernel/task.c ****     /*
3312:../MQXLITE/kernel/task.c ****      * Ready queues are ALWAYS allocated with higher priority queues in higher
3313:../MQXLITE/kernel/task.c ****      * memory, thus we need to update the CURRENT_READY_Q field (which
3314:../MQXLITE/kernel/task.c ****      * always points to the highest priority ready queue with a task
3315:../MQXLITE/kernel/task.c ****      * on it.
3316:../MQXLITE/kernel/task.c ****      */
3317:../MQXLITE/kernel/task.c ****     if ( (uchar_ptr)ready_q_ptr > (uchar_ptr)(kernel_data->CURRENT_READY_Q) )
 3820              		.loc 1 3317 0
 3821 0014 FB68     		ldr	r3, [r7, #12]
 3822 0016 5B6A     		ldr	r3, [r3, #36]
 3823 0018 A342     		cmp	r3, r4
 3824 001a 01D2     		bcs	.L244
3318:../MQXLITE/kernel/task.c ****     {
3319:../MQXLITE/kernel/task.c ****         kernel_data->CURRENT_READY_Q = ready_q_ptr;
 3825              		.loc 1 3319 0
 3826 001c FB68     		ldr	r3, [r7, #12]
 3827 001e 5C62     		str	r4, [r3, #36]
 3828              	.L244:
3320:../MQXLITE/kernel/task.c ****     } /* Endif */
3321:../MQXLITE/kernel/task.c **** 
3322:../MQXLITE/kernel/task.c ****     td_ptr->STATE              = READY;
 3829              		.loc 1 3322 0
 3830 0020 7B68     		ldr	r3, [r7, #4]
 3831 0022 0222     		mov	r2, #2
 3832 0024 9A60     		str	r2, [r3, #8]
3323:../MQXLITE/kernel/task.c ****     td_ptr->TD_PREV            = old_tail_ptr;
 3833              		.loc 1 3323 0
 3834 0026 7B68     		ldr	r3, [r7, #4]
 3835 0028 5D60     		str	r5, [r3, #4]
3324:../MQXLITE/kernel/task.c ****     td_ptr->TD_NEXT            = old_tail_ptr->TD_NEXT;
 3836              		.loc 1 3324 0
 3837 002a 2A68     		ldr	r2, [r5]
 3838 002c 7B68     		ldr	r3, [r7, #4]
 3839 002e 1A60     		str	r2, [r3]
3325:../MQXLITE/kernel/task.c ****     old_tail_ptr->TD_NEXT      = td_ptr;
 3840              		.loc 1 3325 0
 3841 0030 7B68     		ldr	r3, [r7, #4]
 3842 0032 2B60     		str	r3, [r5]
3326:../MQXLITE/kernel/task.c ****     ready_q_ptr->TAIL_READY_Q  = td_ptr;
 3843              		.loc 1 3326 0
 3844 0034 7B68     		ldr	r3, [r7, #4]
 3845 0036 6360     		str	r3, [r4, #4]
3327:../MQXLITE/kernel/task.c ****     /* SPR P171-0020-01 add macro to zero tick structure */
3328:../MQXLITE/kernel/task.c **** #if MQX_HAS_TIME_SLICE
3329:../MQXLITE/kernel/task.c ****     MQX_ZERO_TICK_STRUCT(&td_ptr->CURRENT_TIME_SLICE);
3330:../MQXLITE/kernel/task.c **** #endif
3331:../MQXLITE/kernel/task.c ****     /* END SPR */
3332:../MQXLITE/kernel/task.c ****     _KLOGX1(KLOG_task_ready);
3333:../MQXLITE/kernel/task.c **** 
3334:../MQXLITE/kernel/task.c **** } /* Endbody */
 3846              		.loc 1 3334 0
 3847 0038 BD46     		mov	sp, r7
 3848 003a 04B0     		add	sp, sp, #16
 3849              		@ sp needed for prologue
 3850 003c B0BD     		pop	{r4, r5, r7, pc}
 3851              	.L246:
 3852 003e C046     		.align	2
 3853              	.L245:
 3854 0040 00000000 		.word	_mqx_kernel_data
 3855              		.cfi_endproc
 3856              	.LFE39:
 3858              		.section	.text._task_sync_priority_internal,"ax",%progbits
 3859              		.align	2
 3860              		.global	_task_sync_priority_internal
 3861              		.code	16
 3862              		.thumb_func
 3864              	_task_sync_priority_internal:
 3865              	.LFB40:
3335:../MQXLITE/kernel/task.c **** 
3336:../MQXLITE/kernel/task.c **** #if MQX_EXTRA_TASK_STACK_ENABLE
3337:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
3338:../MQXLITE/kernel/task.c **** /*!
3339:../MQXLITE/kernel/task.c ****  * \brief Reserves space to add to every stack.
3340:../MQXLITE/kernel/task.c ****  *
3341:../MQXLITE/kernel/task.c ****  * This function reserves 'size' bytes that will be added to the size of every
3342:../MQXLITE/kernel/task.c ****  * task's stack. It can be thought of as a way of allocating "task local storage"
3343:../MQXLITE/kernel/task.c ****  * or perhaps as a way of dynamically adding to the TD_STRUCT. Both "OS Changer"
3344:../MQXLITE/kernel/task.c ****  * and the MetaWare C/C++ runtime want additional per-task variables. However,
3345:../MQXLITE/kernel/task.c ****  * this is a general feature that can be used for many more purposes.
3346:../MQXLITE/kernel/task.c ****  *
3347:../MQXLITE/kernel/task.c ****  * \note
3348:../MQXLITE/kernel/task.c ****  * The space added to each task must be known before ANY tasks are created.
3349:../MQXLITE/kernel/task.c ****  *
3350:../MQXLITE/kernel/task.c ****  * \param[in] size Amount of space to reserve.
3351:../MQXLITE/kernel/task.c ****  *
3352:../MQXLITE/kernel/task.c ****  * \return Byte offset from reserved area base address.
3353:../MQXLITE/kernel/task.c ****  *
3354:../MQXLITE/kernel/task.c ****  * \see _task_get_reserved_base
3355:../MQXLITE/kernel/task.c ****  * \see _task_alloc_td_internal
3356:../MQXLITE/kernel/task.c ****  */
3357:../MQXLITE/kernel/task.c **** _mqx_uint _task_reserve_space
3358:../MQXLITE/kernel/task.c **** (
3359:../MQXLITE/kernel/task.c ****     _mqx_uint size
3360:../MQXLITE/kernel/task.c **** )
3361:../MQXLITE/kernel/task.c **** { /* Body */
3362:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR kernel_data;
3363:../MQXLITE/kernel/task.c ****     _mqx_uint              off, algn;
3364:../MQXLITE/kernel/task.c **** 
3365:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
3366:../MQXLITE/kernel/task.c **** 
3367:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
3368:../MQXLITE/kernel/task.c ****     /* Can only be called prior to creating any tasks! */
3369:../MQXLITE/kernel/task.c ****     if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) != 0)
3370:../MQXLITE/kernel/task.c ****     {
3371:../MQXLITE/kernel/task.c ****         _mqx_fatal_error(MQX_EINVAL);
3372:../MQXLITE/kernel/task.c ****     } /* Endif */
3373:../MQXLITE/kernel/task.c **** #endif
3374:../MQXLITE/kernel/task.c **** 
3375:../MQXLITE/kernel/task.c ****     if      (size > 7) algn = 7;
3376:../MQXLITE/kernel/task.c ****     else if (size > 3) algn = 3;
3377:../MQXLITE/kernel/task.c ****     else if (size > 1) algn = 1;
3378:../MQXLITE/kernel/task.c ****     else               algn = 0;
3379:../MQXLITE/kernel/task.c **** 
3380:../MQXLITE/kernel/task.c ****     if (algn > kernel_data->TOS_RESERVED_ALIGN_MASK)
3381:../MQXLITE/kernel/task.c ****     {
3382:../MQXLITE/kernel/task.c ****         kernel_data->TOS_RESERVED_ALIGN_MASK = algn;
3383:../MQXLITE/kernel/task.c ****     } /* Endif */
3384:../MQXLITE/kernel/task.c **** 
3385:../MQXLITE/kernel/task.c ****     off = (kernel_data->TOS_RESERVED_SIZE + algn) & ~algn;
3386:../MQXLITE/kernel/task.c ****     kernel_data->TOS_RESERVED_SIZE = off + size;
3387:../MQXLITE/kernel/task.c **** 
3388:../MQXLITE/kernel/task.c ****     return off;
3389:../MQXLITE/kernel/task.c **** 
3390:../MQXLITE/kernel/task.c **** } /* Endbody */
3391:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
3392:../MQXLITE/kernel/task.c **** #endif /* MQX_EXTRA_TASK_STACK_ENABLE */
3393:../MQXLITE/kernel/task.c **** 
3394:../MQXLITE/kernel/task.c **** /*!
3395:../MQXLITE/kernel/task.c ****  * \private
3396:../MQXLITE/kernel/task.c ****  *
3397:../MQXLITE/kernel/task.c ****  * \brief Changes task's priority level.
3398:../MQXLITE/kernel/task.c ****  *
3399:../MQXLITE/kernel/task.c ****  * This function is called when a quiescent task's priority level has changed, and
3400:../MQXLITE/kernel/task.c ****  * the hardware disable/enable bits may need to be patched to the correct level.
3401:../MQXLITE/kernel/task.c ****  *
3402:../MQXLITE/kernel/task.c ****  * \param[in] td_ptr Task descriptor whose stack is to be modified.
3403:../MQXLITE/kernel/task.c ****  *
3404:../MQXLITE/kernel/task.c ****  * \see TD_STRUCT
3405:../MQXLITE/kernel/task.c ****  */
3406:../MQXLITE/kernel/task.c **** void _task_sync_priority_internal
3407:../MQXLITE/kernel/task.c **** (
3408:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR td_ptr
3409:../MQXLITE/kernel/task.c **** )
3410:../MQXLITE/kernel/task.c **** { /* Body */
 3866              		.loc 1 3410 0
 3867              		.cfi_startproc
 3868 0000 80B5     		push	{r7, lr}
 3869              	.LCFI115:
 3870              		.cfi_def_cfa_offset 8
 3871              		.cfi_offset 7, -8
 3872              		.cfi_offset 14, -4
 3873 0002 84B0     		sub	sp, sp, #16
 3874              	.LCFI116:
 3875              		.cfi_def_cfa_offset 24
 3876 0004 00AF     		add	r7, sp, #0
 3877              	.LCFI117:
 3878              		.cfi_def_cfa_register 7
 3879 0006 7860     		str	r0, [r7, #4]
3411:../MQXLITE/kernel/task.c ****     pointer stack_ptr = td_ptr->STACK_PTR;
 3880              		.loc 1 3411 0
 3881 0008 7B68     		ldr	r3, [r7, #4]
 3882 000a 5B69     		ldr	r3, [r3, #20]
 3883 000c FB60     		str	r3, [r7, #12]
3412:../MQXLITE/kernel/task.c **** 
3413:../MQXLITE/kernel/task.c ****     _PSP_SET_SR_OF_BLOCKED_TASK(stack_ptr, td_ptr->MY_QUEUE->ENABLE_SR);
3414:../MQXLITE/kernel/task.c **** 
3415:../MQXLITE/kernel/task.c **** } /* Endbody */
 3884              		.loc 1 3415 0
 3885 000e BD46     		mov	sp, r7
 3886 0010 04B0     		add	sp, sp, #16
 3887              		@ sp needed for prologue
 3888 0012 80BD     		pop	{r7, pc}
 3889              		.cfi_endproc
 3890              	.LFE40:
 3892              		.section	.text._task_alloc_td_internal,"ax",%progbits
 3893              		.align	2
 3894              		.global	_task_alloc_td_internal
 3895              		.code	16
 3896              		.thumb_func
 3898              	_task_alloc_td_internal:
 3899              	.LFB41:
3416:../MQXLITE/kernel/task.c **** 
3417:../MQXLITE/kernel/task.c **** /* Start SPR P171-0016-01 */
3418:../MQXLITE/kernel/task.c **** 
3419:../MQXLITE/kernel/task.c **** /*!
3420:../MQXLITE/kernel/task.c ****  * \private
3421:../MQXLITE/kernel/task.c ****  *
3422:../MQXLITE/kernel/task.c ****  * \brief Gets a pointer to an initialized task descriptor.
3423:../MQXLITE/kernel/task.c ****  *
3424:../MQXLITE/kernel/task.c ****  * Note that the task descriptor is initialized to zero.
3425:../MQXLITE/kernel/task.c ****  *
3426:../MQXLITE/kernel/task.c ****  * \param[in]  stack_size      Size of the stack for the newly created task.
3427:../MQXLITE/kernel/task.c ****  * \param[out] overhead        Size of TD_STRUCT and other overhead.
3428:../MQXLITE/kernel/task.c ****  * \param[in]  input_stack_ptr If not NULL, the location of the stack is provided.
3429:../MQXLITE/kernel/task.c ****  * \param[in]  user            User mode functionality.
3430:../MQXLITE/kernel/task.c ****  *
3431:../MQXLITE/kernel/task.c ****  * \return Pointer to an initialized task descriptor.
3432:../MQXLITE/kernel/task.c ****  * \return NULL
3433:../MQXLITE/kernel/task.c ****  * \return 0 (Not enough resources to create a task.)
3434:../MQXLITE/kernel/task.c ****  *
3435:../MQXLITE/kernel/task.c ****  * \see TD_STRUCT
3436:../MQXLITE/kernel/task.c ****  */
3437:../MQXLITE/kernel/task.c **** 
3438:../MQXLITE/kernel/task.c **** TD_STRUCT_PTR _task_alloc_td_internal
3439:../MQXLITE/kernel/task.c **** (
3440:../MQXLITE/kernel/task.c ****     _mem_size     stack_size,
3441:../MQXLITE/kernel/task.c ****     _mem_size_ptr overhead,
3442:../MQXLITE/kernel/task.c ****     pointer    input_stack_ptr,
3443:../MQXLITE/kernel/task.c ****     _mqx_uint user
3444:../MQXLITE/kernel/task.c **** )
3445:../MQXLITE/kernel/task.c **** { /* Body */
 3900              		.loc 1 3445 0
 3901              		.cfi_startproc
 3902 0000 80B5     		push	{r7, lr}
 3903              	.LCFI118:
 3904              		.cfi_def_cfa_offset 8
 3905              		.cfi_offset 7, -8
 3906              		.cfi_offset 14, -4
 3907 0002 8EB0     		sub	sp, sp, #56
 3908              	.LCFI119:
 3909              		.cfi_def_cfa_offset 64
 3910 0004 00AF     		add	r7, sp, #0
 3911              	.LCFI120:
 3912              		.cfi_def_cfa_register 7
 3913 0006 F860     		str	r0, [r7, #12]
 3914 0008 B960     		str	r1, [r7, #8]
 3915 000a 7A60     		str	r2, [r7, #4]
 3916 000c 3B60     		str	r3, [r7]
3446:../MQXLITE/kernel/task.c ****     KERNEL_DATA_STRUCT_PTR      kernel_data;
3447:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR               insert_td_ptr;
3448:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR               next_td_ptr;
3449:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR               new_td_ptr;
3450:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR               prev_td_ptr;
3451:../MQXLITE/kernel/task.c ****     QUEUE_ELEMENT_STRUCT_PTR    q_ptr;
3452:../MQXLITE/kernel/task.c ****     _mem_size                   extra = sizeof(TD_STRUCT);
 3917              		.loc 1 3452 0
 3918 000e 7023     		mov	r3, #112
 3919 0010 7B62     		str	r3, [r7, #36]
3453:../MQXLITE/kernel/task.c **** #if MQX_EXTRA_TASK_STACK_ENABLE
3454:../MQXLITE/kernel/task.c ****     _mem_size                tos, tos_offset = 0;
3455:../MQXLITE/kernel/task.c **** #endif
3456:../MQXLITE/kernel/task.c ****     uint_16                  task_num;
3457:../MQXLITE/kernel/task.c **** 
3458:../MQXLITE/kernel/task.c ****     _GET_KERNEL_DATA(kernel_data);
 3920              		.loc 1 3458 0
 3921 0012 454B     		ldr	r3, .L257
 3922 0014 1B68     		ldr	r3, [r3]
 3923 0016 3B62     		str	r3, [r7, #32]
3459:../MQXLITE/kernel/task.c **** 
3460:../MQXLITE/kernel/task.c **** #if MQX_CHECK_ERRORS
3461:../MQXLITE/kernel/task.c ****     if (_QUEUE_GET_SIZE(&kernel_data->TD_LIST) >= (MAX_UINT_16-1))
 3924              		.loc 1 3461 0
 3925 0018 3B6A     		ldr	r3, [r7, #32]
 3926 001a C833     		add	r3, r3, #200
 3927 001c 1A89     		ldrh	r2, [r3, #8]
 3928 001e 434B     		ldr	r3, .L257+4
 3929 0020 9A42     		cmp	r2, r3
 3930 0022 01D9     		bls	.L249
3462:../MQXLITE/kernel/task.c ****     {
3463:../MQXLITE/kernel/task.c ****         /* We already have maximum number of tasks in system */
3464:../MQXLITE/kernel/task.c ****         return NULL;
 3931              		.loc 1 3464 0
 3932 0024 0023     		mov	r3, #0
 3933 0026 7AE0     		b	.L250
 3934              	.L249:
3465:../MQXLITE/kernel/task.c ****     } /* Endif */
3466:../MQXLITE/kernel/task.c **** #endif
3467:../MQXLITE/kernel/task.c **** 
3468:../MQXLITE/kernel/task.c **** #if MQX_EXTRA_TASK_STACK_ENABLE
3469:../MQXLITE/kernel/task.c ****     tos = kernel_data->TOS_RESERVED_SIZE;
3470:../MQXLITE/kernel/task.c ****     if (tos != 0)
3471:../MQXLITE/kernel/task.c ****     {
3472:../MQXLITE/kernel/task.c ****         uint_32 align_mask = kernel_data->TOS_RESERVED_ALIGN_MASK;
3473:../MQXLITE/kernel/task.c ****         extra = (extra + align_mask) & ~align_mask;
3474:../MQXLITE/kernel/task.c ****         tos_offset = extra;
3475:../MQXLITE/kernel/task.c ****         /* must be word multiple */
3476:../MQXLITE/kernel/task.c ****         extra = (extra + tos + 3) & ~3;
3477:../MQXLITE/kernel/task.c ****     } /* Endif */
3478:../MQXLITE/kernel/task.c **** #endif
3479:../MQXLITE/kernel/task.c ****     *overhead = extra;
 3935              		.loc 1 3479 0
 3936 0028 BB68     		ldr	r3, [r7, #8]
 3937 002a 7A6A     		ldr	r2, [r7, #36]
 3938 002c 1A60     		str	r2, [r3]
3480:../MQXLITE/kernel/task.c **** 
3481:../MQXLITE/kernel/task.c **** 
3482:../MQXLITE/kernel/task.c ****     if (input_stack_ptr)
 3939              		.loc 1 3482 0
 3940 002e 7B68     		ldr	r3, [r7, #4]
 3941 0030 002B     		cmp	r3, #0
 3942 0032 07D0     		beq	.L251
3483:../MQXLITE/kernel/task.c ****     {
3484:../MQXLITE/kernel/task.c ****         new_td_ptr = (TD_STRUCT_PTR)input_stack_ptr;
 3943              		.loc 1 3484 0
 3944 0034 7B68     		ldr	r3, [r7, #4]
 3945 0036 7B63     		str	r3, [r7, #52]
3485:../MQXLITE/kernel/task.c ****         _mem_zero((pointer)new_td_ptr, extra);
 3946              		.loc 1 3485 0
 3947 0038 7A6B     		ldr	r2, [r7, #52]
 3948 003a 7B6A     		ldr	r3, [r7, #36]
 3949 003c 101C     		mov	r0, r2
 3950 003e 191C     		mov	r1, r3
 3951 0040 FFF7FEFF 		bl	_mem_zero
 3952              	.L251:
3486:../MQXLITE/kernel/task.c ****     }
3487:../MQXLITE/kernel/task.c **** #if !MQX_LITE_VERSION_NUMBER
3488:../MQXLITE/kernel/task.c ****     else
3489:../MQXLITE/kernel/task.c ****     {
3490:../MQXLITE/kernel/task.c ****         new_td_ptr = (TD_STRUCT_PTR)_mem_alloc_zero(extra);
3491:../MQXLITE/kernel/task.c **** 
3492:../MQXLITE/kernel/task.c ****         if (new_td_ptr)
3493:../MQXLITE/kernel/task.c ****         {
3494:../MQXLITE/kernel/task.c **** #if MQX_ENABLE_USER_MODE
3495:../MQXLITE/kernel/task.c ****             if (user)
3496:../MQXLITE/kernel/task.c ****             {
3497:../MQXLITE/kernel/task.c ****                 new_td_ptr->STACK_ALLOC_BLOCK = (TD_STRUCT_PTR)_mem_alloc_from(kernel_data->KD_USER
3498:../MQXLITE/kernel/task.c ****             }
3499:../MQXLITE/kernel/task.c ****             else
3500:../MQXLITE/kernel/task.c ****             {
3501:../MQXLITE/kernel/task.c ****                 new_td_ptr->STACK_ALLOC_BLOCK = (TD_STRUCT_PTR)_mem_alloc(stack_size);
3502:../MQXLITE/kernel/task.c ****             }
3503:../MQXLITE/kernel/task.c **** #else
3504:../MQXLITE/kernel/task.c ****             new_td_ptr->STACK_ALLOC_BLOCK = (TD_STRUCT_PTR)_mem_alloc(stack_size);
3505:../MQXLITE/kernel/task.c **** #endif /* MQX_ENABLE_USER_MODE */
3506:../MQXLITE/kernel/task.c ****         }
3507:../MQXLITE/kernel/task.c **** 
3508:../MQXLITE/kernel/task.c **** #if MQX_CHECK_MEMORY_ALLOCATION_ERRORS
3509:../MQXLITE/kernel/task.c ****         if ( new_td_ptr == NULL )
3510:../MQXLITE/kernel/task.c ****         {
3511:../MQXLITE/kernel/task.c ****             return ((TD_STRUCT_PTR)new_td_ptr);
3512:../MQXLITE/kernel/task.c ****         } /* Endif */
3513:../MQXLITE/kernel/task.c **** 
3514:../MQXLITE/kernel/task.c ****         if (new_td_ptr->STACK_ALLOC_BLOCK == NULL )
3515:../MQXLITE/kernel/task.c ****         {
3516:../MQXLITE/kernel/task.c ****             /* dealloc TD, because we do not have enough resources to create task */
3517:../MQXLITE/kernel/task.c ****             _mem_free(new_td_ptr);
3518:../MQXLITE/kernel/task.c ****             return 0;
3519:../MQXLITE/kernel/task.c ****         }
3520:../MQXLITE/kernel/task.c **** 
3521:../MQXLITE/kernel/task.c ****         _mem_set_type(new_td_ptr, MEM_TYPE_TD);
3522:../MQXLITE/kernel/task.c ****         _mem_set_type(new_td_ptr->STACK_ALLOC_BLOCK, MEM_TYPE_TASK_STACK);
3523:../MQXLITE/kernel/task.c **** #endif
3524:../MQXLITE/kernel/task.c ****     } /* Endif */
3525:../MQXLITE/kernel/task.c **** #endif /* MQX_LITE_VERSION_NUMBER */
3526:../MQXLITE/kernel/task.c **** 
3527:../MQXLITE/kernel/task.c **** 
3528:../MQXLITE/kernel/task.c **** #if MQX_EXTRA_TASK_STACK_ENABLE
3529:../MQXLITE/kernel/task.c ****     if (tos != 0)
3530:../MQXLITE/kernel/task.c ****     {
3531:../MQXLITE/kernel/task.c ****         new_td_ptr->TOS_RESERVED = ((uchar_ptr) new_td_ptr) + tos_offset;
3532:../MQXLITE/kernel/task.c ****     } /* Endif */
3533:../MQXLITE/kernel/task.c **** #endif
3534:../MQXLITE/kernel/task.c **** 
3535:../MQXLITE/kernel/task.c ****     /* Add new task to list */
3536:../MQXLITE/kernel/task.c ****     task_num = kernel_data->TASK_NUMBER;
 3953              		.loc 1 3536 0
 3954 0044 3A6A     		ldr	r2, [r7, #32]
 3955 0046 D423     		mov	r3, #212
 3956 0048 D258     		ldr	r2, [r2, r3]
 3957 004a 3B1C     		mov	r3, r7
 3958 004c 2A33     		add	r3, r3, #42
 3959 004e 1A80     		strh	r2, [r3]
3537:../MQXLITE/kernel/task.c ****     insert_td_ptr = kernel_data->INSERT_TD_PTR;
 3960              		.loc 1 3537 0
 3961 0050 3A6A     		ldr	r2, [r7, #32]
 3962 0052 D823     		mov	r3, #216
 3963 0054 D358     		ldr	r3, [r2, r3]
 3964 0056 FB61     		str	r3, [r7, #28]
3538:../MQXLITE/kernel/task.c ****     new_td_ptr->TASK_ID = BUILD_TASKID(kernel_data->INIT.PROCESSOR_NUMBER, task_num);
 3965              		.loc 1 3538 0
 3966 0058 3A6A     		ldr	r2, [r7, #32]
 3967 005a A823     		mov	r3, #168
 3968 005c 5B00     		lsl	r3, r3, #1
 3969 005e D358     		ldr	r3, [r2, r3]
 3970 0060 1A04     		lsl	r2, r3, #16
 3971 0062 3B1C     		mov	r3, r7
 3972 0064 2A33     		add	r3, r3, #42
 3973 0066 1B88     		ldrh	r3, [r3]
 3974 0068 1A43     		orr	r2, r3
 3975 006a 7B6B     		ldr	r3, [r7, #52]
 3976 006c DA60     		str	r2, [r3, #12]
3539:../MQXLITE/kernel/task.c **** 
3540:../MQXLITE/kernel/task.c ****     if (!insert_td_ptr)
 3977              		.loc 1 3540 0
 3978 006e FB69     		ldr	r3, [r7, #28]
 3979 0070 002B     		cmp	r3, #0
 3980 0072 03D1     		bne	.L252
3541:../MQXLITE/kernel/task.c ****     {
3542:../MQXLITE/kernel/task.c ****         q_ptr = (QUEUE_ELEMENT_STRUCT_PTR)((pointer)&kernel_data->TD_LIST);
 3981              		.loc 1 3542 0
 3982 0074 3B6A     		ldr	r3, [r7, #32]
 3983 0076 C833     		add	r3, r3, #200
 3984 0078 FB62     		str	r3, [r7, #44]
 3985 007a 02E0     		b	.L253
 3986              	.L252:
3543:../MQXLITE/kernel/task.c ****     }
3544:../MQXLITE/kernel/task.c ****     else
3545:../MQXLITE/kernel/task.c ****     {
3546:../MQXLITE/kernel/task.c ****         q_ptr = &insert_td_ptr->TD_LIST_INFO;
 3987              		.loc 1 3546 0
 3988 007c FB69     		ldr	r3, [r7, #28]
 3989 007e 5C33     		add	r3, r3, #92
 3990 0080 FB62     		str	r3, [r7, #44]
 3991              	.L253:
 3992              	.LBB19:
3547:../MQXLITE/kernel/task.c ****     } /* Endif */
3548:../MQXLITE/kernel/task.c **** 
3549:../MQXLITE/kernel/task.c ****     _QUEUE_INSERT(&kernel_data->TD_LIST, q_ptr, &new_td_ptr->TD_LIST_INFO);
 3993              		.loc 1 3549 0
 3994 0082 FB6A     		ldr	r3, [r7, #44]
 3995 0084 1B68     		ldr	r3, [r3]
 3996 0086 BB61     		str	r3, [r7, #24]
 3997 0088 7B6B     		ldr	r3, [r7, #52]
 3998 008a 5C33     		add	r3, r3, #92
 3999 008c BA69     		ldr	r2, [r7, #24]
 4000 008e 1A60     		str	r2, [r3]
 4001 0090 7B6B     		ldr	r3, [r7, #52]
 4002 0092 1A1C     		mov	r2, r3
 4003 0094 5C32     		add	r2, r2, #92
 4004 0096 FB6A     		ldr	r3, [r7, #44]
 4005 0098 1A60     		str	r2, [r3]
 4006 009a 7B6B     		ldr	r3, [r7, #52]
 4007 009c 5C33     		add	r3, r3, #92
 4008 009e FA6A     		ldr	r2, [r7, #44]
 4009 00a0 5A60     		str	r2, [r3, #4]
 4010 00a2 7B6B     		ldr	r3, [r7, #52]
 4011 00a4 1A1C     		mov	r2, r3
 4012 00a6 5C32     		add	r2, r2, #92
 4013 00a8 BB69     		ldr	r3, [r7, #24]
 4014 00aa 5A60     		str	r2, [r3, #4]
 4015              	.LBE19:
 4016 00ac 3B6A     		ldr	r3, [r7, #32]
 4017 00ae C833     		add	r3, r3, #200
 4018 00b0 1A89     		ldrh	r2, [r3, #8]
 4019 00b2 0132     		add	r2, r2, #1
 4020 00b4 92B2     		uxth	r2, r2
 4021 00b6 1A81     		strh	r2, [r3, #8]
3550:../MQXLITE/kernel/task.c **** 
3551:../MQXLITE/kernel/task.c ****     /*
3552:../MQXLITE/kernel/task.c ****      * New task may not have been inserted at the end of the list. Search for a
3553:../MQXLITE/kernel/task.c ****      * spot to insert the next td and also calculate its task number
3554:../MQXLITE/kernel/task.c ****      */
3555:../MQXLITE/kernel/task.c ****     prev_td_ptr = new_td_ptr;
 4022              		.loc 1 3555 0
 4023 00b8 7B6B     		ldr	r3, [r7, #52]
 4024 00ba 3B63     		str	r3, [r7, #48]
 4025              	.L256:
3556:../MQXLITE/kernel/task.c ****     do
3557:../MQXLITE/kernel/task.c ****     {
3558:../MQXLITE/kernel/task.c ****         insert_td_ptr = prev_td_ptr;
 4026              		.loc 1 3558 0
 4027 00bc 3B6B     		ldr	r3, [r7, #48]
 4028 00be FB61     		str	r3, [r7, #28]
3559:../MQXLITE/kernel/task.c ****         next_td_ptr   = (TD_STRUCT_PTR)((uchar_ptr)insert_td_ptr->TD_LIST_INFO.NEXT - FIELD_OFFSET(
 4029              		.loc 1 3559 0
 4030 00c0 FB69     		ldr	r3, [r7, #28]
 4031 00c2 DB6D     		ldr	r3, [r3, #92]
 4032 00c4 5C3B     		sub	r3, r3, #92
 4033 00c6 7B61     		str	r3, [r7, #20]
3560:../MQXLITE/kernel/task.c ****         prev_td_ptr   = next_td_ptr;
 4034              		.loc 1 3560 0
 4035 00c8 7B69     		ldr	r3, [r7, #20]
 4036 00ca 3B63     		str	r3, [r7, #48]
3561:../MQXLITE/kernel/task.c ****         INC_TASK_NUMBER(task_num);
 4037              		.loc 1 3561 0
 4038 00cc 3B1C     		mov	r3, r7
 4039 00ce 2A33     		add	r3, r3, #42
 4040 00d0 3A1C     		mov	r2, r7
 4041 00d2 2A32     		add	r2, r2, #42
 4042 00d4 1288     		ldrh	r2, [r2]
 4043 00d6 0132     		add	r2, r2, #1
 4044 00d8 1A80     		strh	r2, [r3]
 4045 00da 3B1C     		mov	r3, r7
 4046 00dc 2A33     		add	r3, r3, #42
 4047 00de 1B88     		ldrh	r3, [r3]
 4048 00e0 002B     		cmp	r3, #0
 4049 00e2 03D1     		bne	.L254
 4050              		.loc 1 3561 0 is_stmt 0
 4051 00e4 3B1C     		mov	r3, r7
 4052 00e6 2A33     		add	r3, r3, #42
 4053 00e8 0122     		mov	r2, #1
 4054 00ea 1A80     		strh	r2, [r3]
 4055              	.L254:
3562:../MQXLITE/kernel/task.c ****     } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
 4056              		.loc 1 3562 0 is_stmt 1
 4057 00ec 3B6A     		ldr	r3, [r7, #32]
 4058 00ee 1A1C     		mov	r2, r3
 4059 00f0 C832     		add	r2, r2, #200
3563:../MQXLITE/kernel/task.c ****                     (TASK_NUMBER_FROM_TASKID(next_td_ptr->TASK_ID) == task_num) );
 4060              		.loc 1 3563 0
 4061 00f2 7B69     		ldr	r3, [r7, #20]
 4062 00f4 9A42     		cmp	r2, r3
 4063 00f6 07D0     		beq	.L255
 4064              		.loc 1 3563 0 is_stmt 0
 4065 00f8 7B69     		ldr	r3, [r7, #20]
 4066 00fa DB68     		ldr	r3, [r3, #12]
 4067 00fc 9BB2     		uxth	r3, r3
3562:../MQXLITE/kernel/task.c ****     } while( ((pointer)next_td_ptr != ((pointer)&kernel_data->TD_LIST)) &&
 4068              		.loc 1 3562 0 is_stmt 1
 4069 00fe 3A1C     		mov	r2, r7
 4070 0100 2A32     		add	r2, r2, #42
 4071 0102 1288     		ldrh	r2, [r2]
 4072 0104 9A42     		cmp	r2, r3
 4073 0106 D9D0     		beq	.L256
 4074              	.L255:
3564:../MQXLITE/kernel/task.c **** 
3565:../MQXLITE/kernel/task.c ****     kernel_data->INSERT_TD_PTR = insert_td_ptr;
 4075              		.loc 1 3565 0
 4076 0108 3A6A     		ldr	r2, [r7, #32]
 4077 010a D823     		mov	r3, #216
 4078 010c F969     		ldr	r1, [r7, #28]
 4079 010e D150     		str	r1, [r2, r3]
3566:../MQXLITE/kernel/task.c ****     kernel_data->TASK_NUMBER   = task_num;
 4080              		.loc 1 3566 0
 4081 0110 3B1C     		mov	r3, r7
 4082 0112 2A33     		add	r3, r3, #42
 4083 0114 1988     		ldrh	r1, [r3]
 4084 0116 3A6A     		ldr	r2, [r7, #32]
 4085 0118 D423     		mov	r3, #212
 4086 011a D150     		str	r1, [r2, r3]
3567:../MQXLITE/kernel/task.c **** 
3568:../MQXLITE/kernel/task.c ****     return ((TD_STRUCT_PTR)new_td_ptr);
 4087              		.loc 1 3568 0
 4088 011c 7B6B     		ldr	r3, [r7, #52]
 4089              	.L250:
3569:../MQXLITE/kernel/task.c **** 
3570:../MQXLITE/kernel/task.c **** } /* Endbody */
 4090              		.loc 1 3570 0
 4091 011e 181C     		mov	r0, r3
 4092 0120 BD46     		mov	sp, r7
 4093 0122 0EB0     		add	sp, sp, #56
 4094              		@ sp needed for prologue
 4095 0124 80BD     		pop	{r7, pc}
 4096              	.L258:
 4097 0126 C046     		.align	2
 4098              	.L257:
 4099 0128 00000000 		.word	_mqx_kernel_data
 4100 012c FDFF0000 		.word	65533
 4101              		.cfi_endproc
 4102              	.LFE41:
 4104              		.section	.text._task_set_error_td_internal,"ax",%progbits
 4105              		.align	2
 4106              		.global	_task_set_error_td_internal
 4107              		.code	16
 4108              		.thumb_func
 4110              	_task_set_error_td_internal:
 4111              	.LFB42:
3571:../MQXLITE/kernel/task.c **** 
3572:../MQXLITE/kernel/task.c **** /* End SPR P171-0016-01 */
3573:../MQXLITE/kernel/task.c **** 
3574:../MQXLITE/kernel/task.c **** /*!
3575:../MQXLITE/kernel/task.c ****  * \private
3576:../MQXLITE/kernel/task.c ****  *
3577:../MQXLITE/kernel/task.c ****  * \brief Sets the task error code of the specified task.
3578:../MQXLITE/kernel/task.c ****  *
3579:../MQXLITE/kernel/task.c ****  * If the task error code does not equal MQX_OK, then the value is not changed.
3580:../MQXLITE/kernel/task.c ****  * However, the value of the task error code may be reset to MQX_OK by setting the
3581:../MQXLITE/kernel/task.c ****  * task error code to MQX_OK.  The old value of the task error code is returned.
3582:../MQXLITE/kernel/task.c ****  *
3583:../MQXLITE/kernel/task.c ****  * \param[in] td_ptr         Pointer to the task descriptor whose error is to be set.
3584:../MQXLITE/kernel/task.c ****  * \param[in] new_error_code The new error code.
3585:../MQXLITE/kernel/task.c ****  *
3586:../MQXLITE/kernel/task.c ****  * \return MQX_OK
3587:../MQXLITE/kernel/task.c ****  * \return Old task error code.
3588:../MQXLITE/kernel/task.c ****  *
3589:../MQXLITE/kernel/task.c ****  * \see TD_STRUCT
3590:../MQXLITE/kernel/task.c ****  */
3591:../MQXLITE/kernel/task.c **** _mqx_uint _task_set_error_td_internal
3592:../MQXLITE/kernel/task.c **** (
3593:../MQXLITE/kernel/task.c ****     TD_STRUCT_PTR td_ptr,
3594:../MQXLITE/kernel/task.c ****     _mqx_uint new_error_code
3595:../MQXLITE/kernel/task.c **** )
3596:../MQXLITE/kernel/task.c **** { /* Body */
 4112              		.loc 1 3596 0
 4113              		.cfi_startproc
 4114 0000 80B5     		push	{r7, lr}
 4115              	.LCFI121:
 4116              		.cfi_def_cfa_offset 8
 4117              		.cfi_offset 7, -8
 4118              		.cfi_offset 14, -4
 4119 0002 84B0     		sub	sp, sp, #16
 4120              	.LCFI122:
 4121              		.cfi_def_cfa_offset 24
 4122 0004 00AF     		add	r7, sp, #0
 4123              	.LCFI123:
 4124              		.cfi_def_cfa_register 7
 4125 0006 7860     		str	r0, [r7, #4]
 4126 0008 3960     		str	r1, [r7]
3597:../MQXLITE/kernel/task.c **** #if MQX_TD_HAS_ERROR_CODE
3598:../MQXLITE/kernel/task.c ****     _KLOGM(KERNEL_DATA_STRUCT_PTR  kernel_data;)
3599:../MQXLITE/kernel/task.c ****     _mqx_uint                      old_error_code;
3600:../MQXLITE/kernel/task.c **** 
3601:../MQXLITE/kernel/task.c ****     _KLOGM(_GET_KERNEL_DATA(kernel_data);)
3602:../MQXLITE/kernel/task.c **** 
3603:../MQXLITE/kernel/task.c ****     _KLOGE2(KLOG_task_set_error, new_error_code);
3604:../MQXLITE/kernel/task.c **** 
3605:../MQXLITE/kernel/task.c ****     /* get the old value */
3606:../MQXLITE/kernel/task.c ****     old_error_code = td_ptr->TASK_ERROR_CODE;
 4127              		.loc 1 3606 0
 4128 000a 7B68     		ldr	r3, [r7, #4]
 4129 000c DB6C     		ldr	r3, [r3, #76]
 4130 000e FB60     		str	r3, [r7, #12]
3607:../MQXLITE/kernel/task.c ****     if (( new_error_code == MQX_OK ) || ( old_error_code == MQX_OK ))
 4131              		.loc 1 3607 0
 4132 0010 3B68     		ldr	r3, [r7]
 4133 0012 002B     		cmp	r3, #0
 4134 0014 02D0     		beq	.L260
 4135              		.loc 1 3607 0 is_stmt 0
 4136 0016 FB68     		ldr	r3, [r7, #12]
 4137 0018 002B     		cmp	r3, #0
 4138 001a 02D1     		bne	.L261
 4139              	.L260:
3608:../MQXLITE/kernel/task.c ****     {
3609:../MQXLITE/kernel/task.c ****         td_ptr->TASK_ERROR_CODE = new_error_code;
 4140              		.loc 1 3609 0 is_stmt 1
 4141 001c 7B68     		ldr	r3, [r7, #4]
 4142 001e 3A68     		ldr	r2, [r7]
 4143 0020 DA64     		str	r2, [r3, #76]
 4144              	.L261:
3610:../MQXLITE/kernel/task.c ****     } /* Endif */
3611:../MQXLITE/kernel/task.c **** 
3612:../MQXLITE/kernel/task.c ****     _KLOGX2(KLOG_task_set_error, old_error_code);
3613:../MQXLITE/kernel/task.c ****     return( old_error_code );
 4145              		.loc 1 3613 0
 4146 0022 FB68     		ldr	r3, [r7, #12]
3614:../MQXLITE/kernel/task.c **** #else
3615:../MQXLITE/kernel/task.c ****     return MQX_OK;
3616:../MQXLITE/kernel/task.c **** #endif
3617:../MQXLITE/kernel/task.c **** 
3618:../MQXLITE/kernel/task.c **** } /* Endbody */
 4147              		.loc 1 3618 0
 4148 0024 181C     		mov	r0, r3
 4149 0026 BD46     		mov	sp, r7
 4150 0028 04B0     		add	sp, sp, #16
 4151              		@ sp needed for prologue
 4152 002a 80BD     		pop	{r7, pc}
 4153              		.cfi_endproc
 4154              	.LFE42:
 4156              		.text
 4157              	.Letext0:
 4158              		.file 2 "E:/CW103_Work_Space/Mqx_Lite_Test/MQXLITE/psp/cortex_m/psptypes.h"
 4159              		.file 3 "E:/CW103_Work_Space/Mqx_Lite_Test/MQXLITE/include/mqxlite.h"
 4160              		.file 4 "E:/CW103_Work_Space/Mqx_Lite_Test/MQXLITE/include/queue.h"
 4161              		.file 5 "E:/CW103_Work_Space/Mqx_Lite_Test/MQXLITE/include/lwsem.h"
 4162              		.file 6 "E:/CW103_Work_Space/Mqx_Lite_Test/MQXLITE/psp/cortex_m/cortex.h"
 4163              		.file 7 "E:/CW103_Work_Space/Mqx_Lite_Test/MQXLITE/include/mqxlite_prv.h"
 4164              		.file 8 "E:/CW103_Work_Space/Mqx_Lite_Test/Generated_Code/IO_Map.h"
DEFINED SYMBOLS
                            *ABS*:00000000 task.c
                            *COM*:00000004 _tad_task_at_flag
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:19     .text._task_abort_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:24     .text._task_abort_internal:00000000 _task_abort_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2996   .text._task_get_td:00000000 _task_get_td
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3393   .text._task_exit_function_internal:00000000 _task_exit_function_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2015   .text._task_ready:00000000 _task_ready
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:267    .text._task_abort_internal:00000174 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:275    .text._task_abort:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:280    .text._task_abort:00000000 _task_abort
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:312    .text._task_create_at:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:317    .text._task_create_at:00000000 _task_create_at
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3151   .text._task_set_error:00000000 _task_set_error
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3229   .text._task_build_internal:00000000 _task_build_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3793   .text._task_ready_internal:00000000 _task_ready_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:467    .text._task_create_at:000000c4 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:473    .text._task_destroy_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:478    .text._task_destroy_internal:00000000 _task_destroy_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:879    .text._task_destroy_internal:00000278 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:885    .text._task_destroy:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:890    .text._task_destroy:00000000 _task_destroy
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:922    .text._task_get_exception_handler:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:927    .text._task_get_exception_handler:00000000 _task_get_exception_handler
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:977    .text._task_set_exception_handler:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:982    .text._task_set_exception_handler:00000000 _task_set_exception_handler
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1037   .text._task_get_exit_handler:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1042   .text._task_get_exit_handler:00000000 _task_get_exit_handler
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1092   .text._task_set_exit_handler:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1097   .text._task_set_exit_handler:00000000 _task_set_exit_handler
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1152   .text._task_get_id_from_name:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1157   .text._task_get_id_from_name:00000000 _task_get_id_from_name
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1254   .text._task_get_id_from_name:00000084 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1259   .text._task_get_template_ptr:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1264   .text._task_get_template_ptr:00000000 _task_get_template_ptr
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1308   .text._task_get_template_index:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1313   .text._task_get_template_index:00000000 _task_get_template_index
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1396   .text._task_get_template_index:0000006c $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1401   .text._task_get_id_from_td:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1406   .text._task_get_id_from_td:00000000 _task_get_id_from_td
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1444   .text._task_get_index_from_id:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1449   .text._task_get_index_from_id:00000000 _task_get_index_from_id
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1494   .text._task_get_parameter:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1499   .text._task_get_parameter:00000000 _task_get_parameter
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1585   .text._task_get_parameter_internal:00000000 _task_get_parameter_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1533   .text._task_get_parameter:00000020 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1538   .text._task_get_parameter_for:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1543   .text._task_get_parameter_for:00000000 _task_get_parameter_for
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1580   .text._task_get_parameter_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1620   .text._task_set_parameter:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1625   .text._task_set_parameter:00000000 _task_set_parameter
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1740   .text._task_set_parameter_internal:00000000 _task_set_parameter_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1665   .text._task_set_parameter:0000002c $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1670   .text._task_set_parameter_for:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1675   .text._task_set_parameter_for:00000000 _task_set_parameter_for
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1730   .text._task_set_parameter_for:00000040 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1735   .text._task_set_parameter_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1783   .text._task_get_priority:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1788   .text._task_get_priority:00000000 _task_get_priority
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1839   .text._task_set_priority:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:1844   .text._task_set_priority:00000000 _task_set_priority
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2004   .text._task_set_priority:000000f0 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2010   .text._task_ready:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2135   .text._task_ready:00000094 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2140   .text._task_restart_func:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2144   .text._task_restart_func:00000000 _task_restart_func
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2609   .text._task_restart_func:000002c8 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2615   .text._task_restart:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2620   .text._task_restart:00000000 _task_restart
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2662   .text._task_stop_preemption:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2667   .text._task_stop_preemption:00000000 _task_stop_preemption
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2709   .text._task_stop_preemption:0000002c $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2714   .text._task_start_preemption:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2719   .text._task_start_preemption:00000000 _task_start_preemption
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2762   .text._task_start_preemption:0000002c $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2768   .text._task_check_stack:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2773   .text._task_check_stack:00000000 _task_check_stack
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2818   .text._task_check_stack:00000028 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2823   .text._task_get_creator:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2828   .text._task_get_creator:00000000 _task_get_creator
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2855   .text._task_get_creator:00000014 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2860   .text._task_get_error:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2865   .text._task_get_error:00000000 _task_get_error
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2902   .text._task_get_error:00000020 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2907   .text._task_get_error_ptr:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2912   .text._task_get_error_ptr:00000000 _task_get_error_ptr
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2949   .text._task_get_error_ptr:00000020 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2954   .text._task_get_id:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2959   .text._task_get_id:00000000 _task_get_id
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2986   .text._task_get_id:00000014 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:2991   .text._task_get_td:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3141   .text._task_get_td:000000b4 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3146   .text._task_set_error:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3219   .text._task_set_error:00000044 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3224   .text._task_build_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3447   .text._task_init_internal:00000000 _task_init_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3358   .text._task_build_internal:000000ac $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3363   .text._task_exiting_function_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3368   .text._task_exiting_function_internal:00000000 _task_exiting_function_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3388   .text._task_exit_function_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3437   .text._task_exit_function_internal:0000002c $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3442   .text._task_init_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3898   .text._task_alloc_td_internal:00000000 _task_alloc_td_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3735   .text._task_fill_stack_internal:00000000 _task_fill_stack_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3725   .text._task_init_internal:0000019c $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3730   .text._task_fill_stack_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3783   .text._task_fill_stack_internal:00000034 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3788   .text._task_ready_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3854   .text._task_ready_internal:00000040 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3859   .text._task_sync_priority_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3864   .text._task_sync_priority_internal:00000000 _task_sync_priority_internal
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:3893   .text._task_alloc_td_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:4099   .text._task_alloc_td_internal:00000128 $d
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:4105   .text._task_set_error_td_internal:00000000 $t
C:\DOCUME~1\SNAKUL~1.DEL\LOCALS~1\Temp\cc8ZX1VL.s:4110   .text._task_set_error_td_internal:00000000 _task_set_error_td_internal
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__get_PSP
_int_disable
_int_enable
_mqx_kernel_data
_sched_check_scheduler_internal
_lwsem_wait
_lwsem_post
_psp_destroy_stack_frame
_sched_run_internal
strncmp
_psp_get_stack_start
_sched_set_priority_internal
_sched_insert_priorityq_internal
_psp_build_stack_frame
_sched_execute_scheduler_internal
_mem_zero
